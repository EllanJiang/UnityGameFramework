<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameFramework</name>
    </assembly>
    <members>
        <member name="T:GameFramework.TypeNamePair">
            <summary>
            类型和名称的组合值。
            </summary>
        </member>
        <member name="M:GameFramework.TypeNamePair.#ctor(System.Type)">
            <summary>
            初始化类型和名称的组合值的新实例。
            </summary>
            <param name="type">类型。</param>
        </member>
        <member name="M:GameFramework.TypeNamePair.#ctor(System.Type,System.String)">
            <summary>
            初始化类型和名称的组合值的新实例。
            </summary>
            <param name="type">类型。</param>
            <param name="name">名称。</param>
        </member>
        <member name="P:GameFramework.TypeNamePair.Type">
            <summary>
            获取类型。
            </summary>
        </member>
        <member name="P:GameFramework.TypeNamePair.Name">
            <summary>
            获取名称。
            </summary>
        </member>
        <member name="M:GameFramework.TypeNamePair.ToString">
            <summary>
            获取类型和名称的组合值字符串。
            </summary>
            <returns>类型和名称的组合值字符串。</returns>
        </member>
        <member name="M:GameFramework.TypeNamePair.GetHashCode">
            <summary>
            获取对象的哈希值。
            </summary>
            <returns>对象的哈希值。</returns>
        </member>
        <member name="M:GameFramework.TypeNamePair.Equals(System.Object)">
            <summary>
            比较对象是否与自身相等。
            </summary>
            <param name="obj">要比较的对象。</param>
            <returns>被比较的对象是否与自身相等。</returns>
        </member>
        <member name="M:GameFramework.TypeNamePair.Equals(GameFramework.TypeNamePair)">
            <summary>
            比较对象是否与自身相等。
            </summary>
            <param name="value">要比较的对象。</param>
            <returns>被比较的对象是否与自身相等。</returns>
        </member>
        <member name="M:GameFramework.TypeNamePair.op_Equality(GameFramework.TypeNamePair,GameFramework.TypeNamePair)">
            <summary>
            判断两个对象是否相等。
            </summary>
            <param name="a">值 a。</param>
            <param name="b">值 b。</param>
            <returns>两个对象是否相等。</returns>
        </member>
        <member name="M:GameFramework.TypeNamePair.op_Inequality(GameFramework.TypeNamePair,GameFramework.TypeNamePair)">
            <summary>
            判断两个对象是否不相等。
            </summary>
            <param name="a">值 a。</param>
            <param name="b">值 b。</param>
            <returns>两个对象是否不相等。</returns>
        </member>
        <member name="T:GameFramework.BaseEventArgs">
            <summary>
            事件基类。
            </summary>
        </member>
        <member name="P:GameFramework.BaseEventArgs.Id">
            <summary>
            获取类型编号。
            </summary>
        </member>
        <member name="T:GameFramework.EventPool`1">
            <summary>
            事件池。
            </summary>
            <typeparam name="T">事件类型。</typeparam>
        </member>
        <member name="M:GameFramework.EventPool`1.#ctor(GameFramework.EventPoolMode)">
            <summary>
            初始化事件池的新实例。
            </summary>
            <param name="mode">事件池模式。</param>
        </member>
        <member name="P:GameFramework.EventPool`1.EventHandlerCount">
            <summary>
            获取事件处理函数的数量。
            </summary>
        </member>
        <member name="P:GameFramework.EventPool`1.EventCount">
            <summary>
            获取事件数量。
            </summary>
        </member>
        <member name="M:GameFramework.EventPool`1.Update(System.Single,System.Single)">
            <summary>
            事件池轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.Shutdown">
            <summary>
            关闭并清理事件池。
            </summary>
        </member>
        <member name="M:GameFramework.EventPool`1.Clear">
            <summary>
            清理事件。
            </summary>
        </member>
        <member name="M:GameFramework.EventPool`1.Count(System.Int32)">
            <summary>
            获取事件处理函数的数量。
            </summary>
            <param name="id">事件类型编号。</param>
            <returns>事件处理函数的数量。</returns>
        </member>
        <member name="M:GameFramework.EventPool`1.Check(System.Int32,System.EventHandler{`0})">
            <summary>
            检查是否存在事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要检查的事件处理函数。</param>
            <returns>是否存在事件处理函数。</returns>
        </member>
        <member name="M:GameFramework.EventPool`1.Subscribe(System.Int32,System.EventHandler{`0})">
            <summary>
            订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.Unsubscribe(System.Int32,System.EventHandler{`0})">
            <summary>
            取消订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要取消订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.SetDefaultHandler(System.EventHandler{`0})">
            <summary>
            设置默认事件处理函数。
            </summary>
            <param name="handler">要设置的默认事件处理函数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.Fire(System.Object,`0)">
            <summary>
            抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.FireNow(System.Object,`0)">
            <summary>
            抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.HandleEvent(System.Object,`0)">
            <summary>
            处理事件结点。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:GameFramework.EventPool`1.Event">
            <summary>
            事件结点。
            </summary>
        </member>
        <member name="T:GameFramework.EventPoolMode">
            <summary>
            事件池模式。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.Default">
            <summary>
            默认事件池模式，即必须存在有且只有一个事件处理函数。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.AllowNoHandler">
            <summary>
            允许不存在事件处理函数。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.AllowMultiHandler">
            <summary>
            允许存在多个事件处理函数。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.AllowDuplicateHandler">
            <summary>
            允许存在重复的事件处理函数。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkAction">
            <summary>
            封装一个方法，该方法不具有参数并且不返回值。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`1">
            <summary>
            封装一个方法，该方法只有一个参数并且不返回值。
            </summary>
            <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
            <param name="obj">此委托封装的方法的参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`2">
            <summary>
            封装一个方法，该方法具有两个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`3">
            <summary>
            封装一个方法，该方法具有三个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`4">
            <summary>
            封装一个方法，该方法具有四个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`5">
            <summary>
            封装一个方法，该方法具有五个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`6">
            <summary>
            封装一个方法，该方法具有六个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`7">
            <summary>
            封装一个方法，该方法具有七个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`8">
            <summary>
            封装一个方法，该方法具有八个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`9">
            <summary>
            封装一个方法，该方法具有九个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`10">
            <summary>
            封装一个方法，该方法具有十个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`11">
            <summary>
            封装一个方法，该方法具有十一个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`12">
            <summary>
            封装一个方法，该方法具有十二个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`13">
            <summary>
            封装一个方法，该方法具有十三个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`14">
            <summary>
            封装一个方法，该方法具有十四个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`15">
            <summary>
            封装一个方法，该方法具有十五个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <param name="arg15">此委托封装的方法的第十五个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`16">
            <summary>
            封装一个方法，该方法具有十六个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
            <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <param name="arg15">此委托封装的方法的第十五个参数。</param>
            <param name="arg16">此委托封装的方法的第十六个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkDataSegment">
            <summary>
            数据片段。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkDataSegment.#ctor(System.Object,System.Int32,System.Int32)">
            <summary>
            初始化数据片段的新实例。
            </summary>
            <param name="data">完整数据。</param>
            <param name="offset">偏移。</param>
            <param name="length">长度。</param>
        </member>
        <member name="P:GameFramework.GameFrameworkDataSegment.Data">
            <summary>
            获取完整数据。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkDataSegment.DataType">
            <summary>
            获取数据类型。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkDataSegment.Offset">
            <summary>
            获取偏移。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkDataSegment.Length">
            <summary>
            获取长度。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkDataSegment.GetHashCode">
            <summary>
            获取对象的哈希值。
            </summary>
            <returns>对象的哈希值。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkDataSegment.Equals(System.Object)">
            <summary>
            比较对象是否与自身相等。
            </summary>
            <param name="obj">要比较的对象。</param>
            <returns>被比较的对象是否与自身相等。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkDataSegment.Equals(GameFramework.GameFrameworkDataSegment)">
            <summary>
            比较对象是否与自身相等。
            </summary>
            <param name="value">要比较的对象。</param>
            <returns>被比较的对象是否与自身相等。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkDataSegment.op_Equality(GameFramework.GameFrameworkDataSegment,GameFramework.GameFrameworkDataSegment)">
            <summary>
            判断两个对象是否相等。
            </summary>
            <param name="a">值 a。</param>
            <param name="b">值 b。</param>
            <returns>两个对象是否相等。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkDataSegment.op_Inequality(GameFramework.GameFrameworkDataSegment,GameFramework.GameFrameworkDataSegment)">
            <summary>
            判断两个对象是否不相等。
            </summary>
            <param name="a">值 a。</param>
            <param name="b">值 b。</param>
            <returns>两个对象是否不相等。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkEntry">
            <summary>
            游戏框架入口。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.Update(System.Single,System.Single)">
            <summary>
            所有游戏框架模块轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.Shutdown">
            <summary>
            关闭并清理所有游戏框架模块。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.GetModule``1">
            <summary>
            获取游戏框架模块。
            </summary>
            <typeparam name="T">要获取的游戏框架模块类型。</typeparam>
            <returns>要获取的游戏框架模块。</returns>
            <remarks>如果要获取的游戏框架模块不存在，则自动创建该游戏框架模块。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.GetModule(System.Type)">
            <summary>
            获取游戏框架模块。
            </summary>
            <param name="moduleType">要获取的游戏框架模块类型。</param>
            <returns>要获取的游戏框架模块。</returns>
            <remarks>如果要获取的游戏框架模块不存在，则自动创建该游戏框架模块。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.CreateModule(System.Type)">
            <summary>
            创建游戏框架模块。
            </summary>
            <param name="moduleType">要创建的游戏框架模块类型。</param>
            <returns>要创建的游戏框架模块。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkEventArgs">
            <summary>
            游戏框架中包含事件数据的类的基类。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkEventArgs.#ctor">
            <summary>
            初始化游戏框架中包含事件数据的类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkEventArgs.Clear">
            <summary>
            清理引用。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkException">
            <summary>
            游戏框架异常类。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor">
            <summary>
            初始化游戏框架异常类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor(System.String)">
            <summary>
            使用指定错误消息初始化游戏框架异常类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化游戏框架异常类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化游戏框架异常类的新实例。
            </summary>
            <param name="info">存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">包含有关源或目标的上下文信息。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`1">
            <summary>
            封装一个方法，该方法不具有参数，但却返回 TResult 参数指定的类型的值。
            </summary>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`2">
            <summary>
            封装一个方法，该方法具有一个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg">此委托封装的方法的参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`3">
            <summary>
            封装一个方法，该方法具有两个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`4">
            <summary>
            封装一个方法，该方法具有三个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`5">
            <summary>
            封装一个方法，该方法具有四个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`6">
            <summary>
            封装一个方法，该方法具有五个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`7">
            <summary>
            封装一个方法，该方法具有六个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`8">
            <summary>
            封装一个方法，该方法具有七个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`9">
            <summary>
            封装一个方法，该方法具有八个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`10">
            <summary>
            封装一个方法，该方法具有九个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`11">
            <summary>
            封装一个方法，该方法具有十个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`12">
            <summary>
            封装一个方法，该方法具有十一个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`13">
            <summary>
            封装一个方法，该方法具有十二个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`14">
            <summary>
            封装一个方法，该方法具有十三个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`15">
            <summary>
            封装一个方法，该方法具有十四个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`16">
            <summary>
            封装一个方法，该方法具有十五个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <param name="arg15">此委托封装的方法的第十五个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkFunc`17">
            <summary>
            封装一个方法，该方法具有十六个参数，并返回 TResult 参数所指定的类型的值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
            <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <param name="arg15">此委托封装的方法的第十五个参数。</param>
            <param name="arg16">此委托封装的方法的第十六个参数。</param>
            <returns>此委托封装的方法的返回值。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkLinkedList`1">
            <summary>
            游戏框架链表类。
            </summary>
            <typeparam name="T">指定链表的元素类型。</typeparam>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.#ctor">
            <summary>
            初始化游戏框架链表类的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedList`1.Count">
            <summary>
            获取链表中实际包含的结点数量。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedList`1.CachedNodeCount">
            <summary>
            获取链表结点缓存数量。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedList`1.First">
            <summary>
            获取链表的第一个结点。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedList`1.Last">
            <summary>
            获取链表的最后一个结点。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedList`1.IsReadOnly">
            <summary>
            获取一个值，该值指示 ICollection`1 是否为只读。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedList`1.SyncRoot">
            <summary>
            获取可用于同步对 ICollection 的访问的对象。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedList`1.IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 ICollection 的访问（线程安全）。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.Add(`0)">
            <summary>
            将值添加到 ICollection`1 的结尾处。
            </summary>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            在链表中指定的现有结点后添加包含指定值的新结点。
            </summary>
            <param name="node">指定的现有结点。</param>
            <param name="value">指定值。</param>
            <returns>包含指定值的新结点。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在链表中指定的现有结点后添加指定的新结点。
            </summary>
            <param name="node">指定的现有结点。</param>
            <param name="newNode">指定的新结点。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            在链表中指定的现有结点前添加包含指定值的新结点。
            </summary>
            <param name="node">指定的现有结点。</param>
            <param name="value">指定值。</param>
            <returns>包含指定值的新结点。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在链表中指定的现有结点前添加指定的新结点。
            </summary>
            <param name="node">指定的现有结点。</param>
            <param name="newNode">指定的新结点。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.AddFirst(`0)">
            <summary>
            在链表的开头处添加包含指定值的新结点。
            </summary>
            <param name="value">指定值。</param>
            <returns>包含指定值的新结点。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在链表的开头处添加指定的新结点。
            </summary>
            <param name="node">指定的新结点。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.AddLast(`0)">
            <summary>
            在链表的结尾处添加包含指定值的新结点。
            </summary>
            <param name="value">指定值。</param>
            <returns>包含指定值的新结点。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在链表的结尾处添加指定的新结点。
            </summary>
            <param name="node">指定的新结点。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.Clear">
            <summary>
            从链表中移除所有结点。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.ClearCachedNodes">
            <summary>
            清除链表结点缓存。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.Contains(`0)">
            <summary>
            确定某值是否在链表中。
            </summary>
            <param name="value">指定值。</param>
            <returns>某值是否在链表中。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个链表复制到兼容的一维数组。
            </summary>
            <param name="array">一维数组，它是从链表复制的元素的目标。数组必须具有从零开始的索引。</param>
            <param name="index">array 中从零开始的索引，从此处开始复制。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 ICollection 索引开始，将数组的元素复制到一个数组中。
            </summary>
            <param name="array">一维数组，它是从 ICollection 复制的元素的目标。数组必须具有从零开始的索引。</param>
            <param name="index">array 中从零开始的索引，从此处开始复制。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.Find(`0)">
            <summary>
            查找包含指定值的第一个结点。
            </summary>
            <param name="value">要查找的指定值。</param>
            <returns>包含指定值的第一个结点。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.FindLast(`0)">
            <summary>
            查找包含指定值的最后一个结点。
            </summary>
            <param name="value">要查找的指定值。</param>
            <returns>包含指定值的最后一个结点。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.Remove(`0)">
            <summary>
            从链表中移除指定值的第一个匹配项。
            </summary>
            <param name="value">指定值。</param>
            <returns>是否移除成功。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            从链表中移除指定的结点。
            </summary>
            <param name="node">指定的结点。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.RemoveFirst">
            <summary>
            移除位于链表开头处的结点。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.RemoveLast">
            <summary>
            移除位于链表结尾处的结点。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.GetEnumerator">
            <summary>
            返回循环访问集合的枚举数。
            </summary>
            <returns>循环访问集合的枚举数。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkLinkedList`1.Enumerator">
            <summary>
            循环访问集合的枚举数。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedList`1.Enumerator.Current">
            <summary>
            获取当前结点。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前的枚举数。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.Enumerator.Dispose">
            <summary>
            清理枚举数。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.Enumerator.MoveNext">
            <summary>
            获取下一个结点。
            </summary>
            <returns>返回下一个结点。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            重置枚举数。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkLinkedListRange`1">
            <summary>
            游戏框架链表范围。
            </summary>
            <typeparam name="T">指定链表范围的元素类型。</typeparam>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedListRange`1.#ctor(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            初始化游戏框架链表范围的新实例。
            </summary>
            <param name="first">链表范围的开始结点。</param>
            <param name="terminal">链表范围的终结标记结点。</param>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedListRange`1.IsValid">
            <summary>
            获取链表范围是否有效。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedListRange`1.First">
            <summary>
            获取链表范围的开始结点。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedListRange`1.Terminal">
            <summary>
            获取链表范围的终结标记结点。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedListRange`1.Count">
            <summary>
            获取链表范围的结点数量。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedListRange`1.Contains(`0)">
            <summary>
            检查是否包含指定值。
            </summary>
            <param name="value">要检查的值。</param>
            <returns>是否包含指定值。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedListRange`1.GetEnumerator">
            <summary>
            返回循环访问集合的枚举数。
            </summary>
            <returns>循环访问集合的枚举数。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkLinkedListRange`1.Enumerator">
            <summary>
            循环访问集合的枚举数。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedListRange`1.Enumerator.Current">
            <summary>
            获取当前结点。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkLinkedListRange`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前的枚举数。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedListRange`1.Enumerator.Dispose">
            <summary>
            清理枚举数。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedListRange`1.Enumerator.MoveNext">
            <summary>
            获取下一个结点。
            </summary>
            <returns>返回下一个结点。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkLinkedListRange`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            重置枚举数。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkModule">
            <summary>
            游戏框架模块抽象类。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkModule.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkModule.Update(System.Single,System.Single)">
            <summary>
            游戏框架模块轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkModule.Shutdown">
            <summary>
            关闭并清理游戏框架模块。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkMultiDictionary`2">
            <summary>
            游戏框架多值字典类。
            </summary>
            <typeparam name="TKey">指定多值字典的主键类型。</typeparam>
            <typeparam name="TValue">指定多值字典的值类型。</typeparam>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.#ctor">
            <summary>
            初始化游戏框架多值字典类的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkMultiDictionary`2.Count">
            <summary>
            获取多值字典中实际包含的主键数量。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkMultiDictionary`2.Item(`0)">
            <summary>
            获取多值字典中指定主键的范围。
            </summary>
            <param name="key">指定的主键。</param>
            <returns>指定主键的范围。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.Clear">
            <summary>
            清理多值字典。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.Contains(`0)">
            <summary>
            检查多值字典中是否包含指定主键。
            </summary>
            <param name="key">要检查的主键。</param>
            <returns>多值字典中是否包含指定主键。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.Contains(`0,`1)">
            <summary>
            检查多值字典中是否包含指定值。
            </summary>
            <param name="key">要检查的主键。</param>
            <param name="value">要检查的值。</param>
            <returns>多值字典中是否包含指定值。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.TryGetValue(`0,GameFramework.GameFrameworkLinkedListRange{`1}@)">
            <summary>
            尝试获取多值字典中指定主键的范围。
            </summary>
            <param name="key">指定的主键。</param>
            <param name="range">指定主键的范围。</param>
            <returns>是否获取成功。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.Add(`0,`1)">
            <summary>
            向指定的主键增加指定的值。
            </summary>
            <param name="key">指定的主键。</param>
            <param name="value">指定的值。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.Remove(`0,`1)">
            <summary>
            从指定的主键中移除指定的值。
            </summary>
            <param name="key">指定的主键。</param>
            <param name="value">指定的值。</param>
            <returns>是否移除成功。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.RemoveAll(`0)">
            <summary>
            从指定的主键中移除所有的值。
            </summary>
            <param name="key">指定的主键。</param>
            <returns>是否移除成功。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.GetEnumerator">
            <summary>
            返回循环访问集合的枚举数。
            </summary>
            <returns>循环访问集合的枚举数。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkMultiDictionary`2.Enumerator">
            <summary>
            循环访问集合的枚举数。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkMultiDictionary`2.Enumerator.Current">
            <summary>
            获取当前结点。
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkMultiDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前的枚举数。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.Enumerator.Dispose">
            <summary>
            清理枚举数。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.Enumerator.MoveNext">
            <summary>
            获取下一个结点。
            </summary>
            <returns>返回下一个结点。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkMultiDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            重置枚举数。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkSerializer`1">
            <summary>
            游戏框架序列化器基类。
            </summary>
            <typeparam name="T">要序列化的数据类型。</typeparam>
        </member>
        <member name="M:GameFramework.GameFrameworkSerializer`1.#ctor">
            <summary>
            初始化游戏框架序列化器基类的新实例。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkSerializer`1.SerializeCallback">
            <summary>
            序列化回调函数。
            </summary>
            <param name="binaryWriter">目标流。</param>
            <param name="data">要序列化的数据。</param>
            <returns>序列化数据是否成功。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkSerializer`1.DeserializeCallback">
            <summary>
            反序列化回调函数。
            </summary>
            <param name="binaryReader">指定流。</param>
            <returns>反序列化的数据。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkSerializer`1.TryGetValueCallback">
            <summary>
            尝试从指定流获取指定键的值回调函数。
            </summary>
            <param name="binaryReader">指定流。</param>
            <param name="key">指定键。</param>
            <param name="value">指定键的值。</param>
            <returns>从指定流获取指定键的值是否成功。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkSerializer`1.RegisterSerializeCallback(System.Byte,GameFramework.GameFrameworkSerializer{`0}.SerializeCallback)">
            <summary>
            注册序列化回调函数。
            </summary>
            <param name="version">序列化回调函数的版本。</param>
            <param name="callback">序列化回调函数。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkSerializer`1.RegisterDeserializeCallback(System.Byte,GameFramework.GameFrameworkSerializer{`0}.DeserializeCallback)">
            <summary>
            注册反序列化回调函数。
            </summary>
            <param name="version">反序列化回调函数的版本。</param>
            <param name="callback">反序列化回调函数。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkSerializer`1.RegisterTryGetValueCallback(System.Byte,GameFramework.GameFrameworkSerializer{`0}.TryGetValueCallback)">
            <summary>
            注册尝试从指定流获取指定键的值回调函数。
            </summary>
            <param name="version">尝试从指定流获取指定键的值回调函数的版本。</param>
            <param name="callback">尝试从指定流获取指定键的值回调函数。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkSerializer`1.Serialize(System.IO.Stream,`0)">
            <summary>
            序列化数据到目标流中。
            </summary>
            <param name="stream">目标流。</param>
            <param name="data">要序列化的数据。</param>
            <returns>序列化数据是否成功。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkSerializer`1.Serialize(System.IO.Stream,`0,System.Byte)">
            <summary>
            序列化数据到目标流中。
            </summary>
            <param name="stream">目标流。</param>
            <param name="data">要序列化的数据。</param>
            <param name="version">序列化回调函数的版本。</param>
            <returns>序列化数据是否成功。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkSerializer`1.Deserialize(System.IO.Stream)">
            <summary>
            从指定流反序列化数据。
            </summary>
            <param name="stream">指定流。</param>
            <returns>反序列化的数据。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkSerializer`1.TryGetValue(System.IO.Stream,System.String,System.Object@)">
            <summary>
            尝试从指定流获取指定键的值。
            </summary>
            <param name="stream">指定流。</param>
            <param name="key">指定键。</param>
            <param name="value">指定键的值。</param>
            <returns>从指定流获取指定键的值是否成功。</returns>
        </member>
        <member name="M:GameFramework.GameFrameworkSerializer`1.GetHeader">
            <summary>
            获取数据头标识。
            </summary>
            <returns>数据头标识。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkLog">
            <summary>
            游戏框架日志类。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.SetLogHelper(GameFramework.GameFrameworkLog.ILogHelper)">
            <summary>
            设置游戏框架日志辅助器。
            </summary>
            <param name="logHelper">要设置的游戏框架日志辅助器。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.Object)">
            <summary>
            打印调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="message">日志内容。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.String)">
            <summary>
            打印调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="message">日志内容。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.String,System.Object)">
            <summary>
            打印调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.String,System.Object,System.Object)">
            <summary>
            打印调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.String,System.Object[])">
            <summary>
            打印调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="message">日志内容</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.String)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="message">日志内容</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.String,System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.String,System.Object,System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.String,System.Object[])">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.String)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.String,System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.String,System.Object,System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.String,System.Object[])">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.String)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.String,System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.String,System.Object,System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.String,System.Object[])">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.String)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.String,System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.String,System.Object,System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.String,System.Object[])">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkLog.ILogHelper">
            <summary>
            游戏框架日志辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.ILogHelper.Log(GameFramework.GameFrameworkLogLevel,System.Object)">
            <summary>
            记录日志。
            </summary>
            <param name="level">游戏框架日志等级。</param>
            <param name="message">日志内容。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkLogLevel">
            <summary>
            游戏框架日志等级。
            </summary>
        </member>
        <member name="F:GameFramework.GameFrameworkLogLevel.Debug">
            <summary>
            调试。
            </summary>
        </member>
        <member name="F:GameFramework.GameFrameworkLogLevel.Info">
            <summary>
            信息。
            </summary>
        </member>
        <member name="F:GameFramework.GameFrameworkLogLevel.Warning">
            <summary>
            警告。
            </summary>
        </member>
        <member name="F:GameFramework.GameFrameworkLogLevel.Error">
            <summary>
            错误。
            </summary>
        </member>
        <member name="F:GameFramework.GameFrameworkLogLevel.Fatal">
            <summary>
            严重错误。
            </summary>
        </member>
        <member name="T:GameFramework.IReference">
            <summary>
            引用接口。
            </summary>
        </member>
        <member name="M:GameFramework.IReference.Clear">
            <summary>
            清理引用。
            </summary>
        </member>
        <member name="T:GameFramework.ReferencePool">
            <summary>
            引用池。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePool.EnableStrictCheck">
            <summary>
            获取或设置是否开启强制检查。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePool.Count">
            <summary>
            获取引用池的数量。
            </summary>
        </member>
        <member name="M:GameFramework.ReferencePool.GetAllReferencePoolInfos">
            <summary>
            获取所有引用池的信息。
            </summary>
            <returns>所有引用池的信息。</returns>
        </member>
        <member name="M:GameFramework.ReferencePool.ClearAll">
            <summary>
            清除所有引用池。
            </summary>
        </member>
        <member name="M:GameFramework.ReferencePool.Acquire``1">
            <summary>
            从引用池获取引用。
            </summary>
            <typeparam name="T">引用类型。</typeparam>
            <returns>引用。</returns>
        </member>
        <member name="M:GameFramework.ReferencePool.Acquire(System.Type)">
            <summary>
            从引用池获取引用。
            </summary>
            <param name="referenceType">引用类型。</param>
            <returns>引用。</returns>
        </member>
        <member name="M:GameFramework.ReferencePool.Release(GameFramework.IReference)">
            <summary>
            将引用归还引用池。
            </summary>
            <param name="reference">引用。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.Add``1(System.Int32)">
            <summary>
            向引用池中追加指定数量的引用。
            </summary>
            <typeparam name="T">引用类型。</typeparam>
            <param name="count">追加数量。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.Add(System.Type,System.Int32)">
            <summary>
            向引用池中追加指定数量的引用。
            </summary>
            <param name="referenceType">引用类型。</param>
            <param name="count">追加数量。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.Remove``1(System.Int32)">
            <summary>
            从引用池中移除指定数量的引用。
            </summary>
            <typeparam name="T">引用类型。</typeparam>
            <param name="count">移除数量。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.Remove(System.Type,System.Int32)">
            <summary>
            从引用池中移除指定数量的引用。
            </summary>
            <param name="referenceType">引用类型。</param>
            <param name="count">移除数量。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.RemoveAll``1">
            <summary>
            从引用池中移除所有的引用。
            </summary>
            <typeparam name="T">引用类型。</typeparam>
        </member>
        <member name="M:GameFramework.ReferencePool.RemoveAll(System.Type)">
            <summary>
            从引用池中移除所有的引用。
            </summary>
            <param name="referenceType">引用类型。</param>
        </member>
        <member name="T:GameFramework.ReferencePoolInfo">
            <summary>
            引用池信息。
            </summary>
        </member>
        <member name="M:GameFramework.ReferencePoolInfo.#ctor(System.Type,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化引用池信息的新实例。
            </summary>
            <param name="type">引用池类型。</param>
            <param name="unusedReferenceCount">未使用引用数量。</param>
            <param name="usingReferenceCount">正在使用引用数量。</param>
            <param name="acquireReferenceCount">获取引用数量。</param>
            <param name="releaseReferenceCount">归还引用数量。</param>
            <param name="addReferenceCount">增加引用数量。</param>
            <param name="removeReferenceCount">移除引用数量。</param>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.Type">
            <summary>
            获取引用池类型。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.UnusedReferenceCount">
            <summary>
            获取未使用引用数量。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.UsingReferenceCount">
            <summary>
            获取正在使用引用数量。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.AcquireReferenceCount">
            <summary>
            获取获取引用数量。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.ReleaseReferenceCount">
            <summary>
            获取归还引用数量。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.AddReferenceCount">
            <summary>
            获取增加引用数量。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.RemoveReferenceCount">
            <summary>
            获取移除引用数量。
            </summary>
        </member>
        <member name="T:GameFramework.ITaskAgent`1">
            <summary>
            任务代理接口。
            </summary>
            <typeparam name="T">任务类型。</typeparam>
        </member>
        <member name="P:GameFramework.ITaskAgent`1.Task">
            <summary>
            获取任务。
            </summary>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Initialize">
            <summary>
            初始化任务代理。
            </summary>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Update(System.Single,System.Single)">
            <summary>
            任务代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Shutdown">
            <summary>
            关闭并清理任务代理。
            </summary>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Start(`0)">
            <summary>
            开始处理任务。
            </summary>
            <param name="task">要处理的任务。</param>
            <returns>开始处理任务的状态。</returns>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Reset">
            <summary>
            停止正在处理的任务并重置任务代理。
            </summary>
        </member>
        <member name="T:GameFramework.StartTaskStatus">
            <summary>
            开始处理任务的状态。
            </summary>
        </member>
        <member name="F:GameFramework.StartTaskStatus.Done">
            <summary>
            可以立刻处理完成此任务。
            </summary>
        </member>
        <member name="F:GameFramework.StartTaskStatus.CanResume">
            <summary>
            可以继续处理此任务。
            </summary>
        </member>
        <member name="F:GameFramework.StartTaskStatus.HasToWait">
            <summary>
            不能继续处理此任务，需等待其它任务执行完成。
            </summary>
        </member>
        <member name="F:GameFramework.StartTaskStatus.UnknownError">
            <summary>
            不能继续处理此任务，出现未知错误。
            </summary>
        </member>
        <member name="T:GameFramework.TaskBase">
            <summary>
            任务基类。
            </summary>
        </member>
        <member name="F:GameFramework.TaskBase.DefaultPriority">
            <summary>
            任务默认优先级。
            </summary>
        </member>
        <member name="M:GameFramework.TaskBase.#ctor">
            <summary>
            初始化任务基类的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.TaskBase.SerialId">
            <summary>
            获取任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.TaskBase.Priority">
            <summary>
            获取任务的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.TaskBase.Done">
            <summary>
            获取或设置任务是否完成。
            </summary>
        </member>
        <member name="P:GameFramework.TaskBase.Description">
            <summary>
            获取任务描述。
            </summary>
        </member>
        <member name="M:GameFramework.TaskBase.Initialize(System.Int32,System.Int32)">
            <summary>
            初始化任务基类。
            </summary>
            <param name="serialId">任务的序列编号。</param>
            <param name="priority">任务的优先级。</param>
        </member>
        <member name="M:GameFramework.TaskBase.Clear">
            <summary>
            清理任务基类。
            </summary>
        </member>
        <member name="T:GameFramework.TaskInfo">
            <summary>
            任务信息。
            </summary>
        </member>
        <member name="M:GameFramework.TaskInfo.#ctor(System.Int32,System.Int32,GameFramework.TaskStatus,System.String)">
            <summary>
            初始化任务信息的新实例。
            </summary>
            <param name="serialId">任务的序列编号。</param>
            <param name="priority">任务的优先级。</param>
            <param name="status">任务状态。</param>
            <param name="description">任务描述。</param>
        </member>
        <member name="P:GameFramework.TaskInfo.SerialId">
            <summary>
            获取任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.TaskInfo.Priority">
            <summary>
            获取任务的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.TaskInfo.Status">
            <summary>
            获取任务状态。
            </summary>
        </member>
        <member name="P:GameFramework.TaskInfo.Description">
            <summary>
            获取任务描述。
            </summary>
        </member>
        <member name="T:GameFramework.TaskPool`1">
            <summary>
            任务池。
            </summary>
            <typeparam name="T">任务类型。</typeparam>
        </member>
        <member name="M:GameFramework.TaskPool`1.#ctor">
            <summary>
            初始化任务池的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.Paused">
            <summary>
            获取或设置任务池是否被暂停。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.TotalAgentCount">
            <summary>
            获取任务代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.FreeAgentCount">
            <summary>
            获取可用任务代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.WorkingAgentCount">
            <summary>
            获取工作中任务代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.WaitingTaskCount">
            <summary>
            获取等待任务数量。
            </summary>
        </member>
        <member name="M:GameFramework.TaskPool`1.Update(System.Single,System.Single)">
            <summary>
            任务池轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.TaskPool`1.Shutdown">
            <summary>
            关闭并清理任务池。
            </summary>
        </member>
        <member name="M:GameFramework.TaskPool`1.AddAgent(GameFramework.ITaskAgent{`0})">
            <summary>
            增加任务代理。
            </summary>
            <param name="agent">要增加的任务代理。</param>
        </member>
        <member name="M:GameFramework.TaskPool`1.AddTask(`0)">
            <summary>
            增加任务。
            </summary>
            <param name="task">要增加的任务。</param>
        </member>
        <member name="M:GameFramework.TaskPool`1.RemoveTask(System.Int32)">
            <summary>
            移除任务。
            </summary>
            <param name="serialId">要移除任务的序列编号。</param>
            <returns>移除任务是否成功。</returns>
        </member>
        <member name="M:GameFramework.TaskPool`1.RemoveAllTasks">
            <summary>
            移除所有任务。
            </summary>
        </member>
        <member name="T:GameFramework.TaskStatus">
            <summary>
            任务状态。
            </summary>
        </member>
        <member name="F:GameFramework.TaskStatus.Todo">
            <summary>
            未开始。
            </summary>
        </member>
        <member name="F:GameFramework.TaskStatus.Doing">
            <summary>
            执行中。
            </summary>
        </member>
        <member name="F:GameFramework.TaskStatus.Done">
            <summary>
            完成。
            </summary>
        </member>
        <member name="T:GameFramework.Variable`1">
            <summary>
            变量。
            </summary>
            <typeparam name="T">变量类型。</typeparam>
        </member>
        <member name="M:GameFramework.Variable`1.#ctor">
            <summary>
            初始化变量的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Variable`1.#ctor(`0)">
            <summary>
            初始化变量的新实例。
            </summary>
            <param name="value">初始值。</param>
        </member>
        <member name="P:GameFramework.Variable`1.Type">
            <summary>
            获取变量类型。
            </summary>
        </member>
        <member name="P:GameFramework.Variable`1.Value">
            <summary>
            获取或设置变量值。
            </summary>
        </member>
        <member name="M:GameFramework.Variable`1.GetValue">
            <summary>
            获取变量值。
            </summary>
            <returns>变量值。</returns>
        </member>
        <member name="M:GameFramework.Variable`1.SetValue(System.Object)">
            <summary>
            设置变量值。
            </summary>
            <param name="value">变量值。</param>
        </member>
        <member name="M:GameFramework.Variable`1.Reset">
            <summary>
            重置变量值。
            </summary>
        </member>
        <member name="M:GameFramework.Variable`1.ToString">
            <summary>
            获取变量字符串。
            </summary>
            <returns>变量字符串。</returns>
        </member>
        <member name="T:GameFramework.Variable">
            <summary>
            变量。
            </summary>
        </member>
        <member name="M:GameFramework.Variable.#ctor">
            <summary>
            初始化变量的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Variable.Type">
            <summary>
            获取变量类型。
            </summary>
        </member>
        <member name="M:GameFramework.Variable.GetValue">
            <summary>
            获取变量值。
            </summary>
            <returns>变量值。</returns>
        </member>
        <member name="M:GameFramework.Variable.SetValue(System.Object)">
            <summary>
            设置变量值。
            </summary>
            <param name="value">变量值。</param>
        </member>
        <member name="M:GameFramework.Variable.Reset">
            <summary>
            重置变量值。
            </summary>
        </member>
        <member name="T:GameFramework.Version">
            <summary>
            版本号类。
            </summary>
        </member>
        <member name="P:GameFramework.Version.GameFrameworkVersion">
            <summary>
            获取游戏框架版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Version.GameVersion">
            <summary>
            获取游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Version.InternalGameVersion">
            <summary>
            获取内部游戏版本号。
            </summary>
        </member>
        <member name="M:GameFramework.Version.SetVersionHelper(GameFramework.Version.IVersionHelper)">
            <summary>
            设置版本号辅助器。
            </summary>
            <param name="versionHelper">要设置的版本号辅助器。</param>
        </member>
        <member name="T:GameFramework.Version.IVersionHelper">
            <summary>
            版本号辅助器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Version.IVersionHelper.GameVersion">
            <summary>
            获取游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Version.IVersionHelper.InternalGameVersion">
            <summary>
            获取内部游戏版本号。
            </summary>
        </member>
        <member name="T:GameFramework.Config.ConfigManager">
            <summary>
            全局配置管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.#ctor">
            <summary>
            初始化全局配置管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Config.ConfigManager.Count">
            <summary>
            获取全局配置项数量。
            </summary>
        </member>
        <member name="E:GameFramework.Config.ConfigManager.LoadConfigSuccess">
            <summary>
            加载全局配置成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Config.ConfigManager.LoadConfigFailure">
            <summary>
            加载全局配置失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Config.ConfigManager.LoadConfigUpdate">
            <summary>
            加载全局配置更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Config.ConfigManager.LoadConfigDependencyAsset">
            <summary>
            加载全局配置时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.Update(System.Single,System.Single)">
            <summary>
            全局配置管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.Shutdown">
            <summary>
            关闭并清理全局配置管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.SetConfigHelper(GameFramework.Config.IConfigHelper)">
            <summary>
            设置全局配置辅助器。
            </summary>
            <param name="configHelper">全局配置辅助器。</param>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.LoadConfig(System.String)">
            <summary>
            加载全局配置。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.LoadConfig(System.String,System.Int32)">
            <summary>
            加载全局配置。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="priority">加载全局配置资源的优先级。</param>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.LoadConfig(System.String,System.Object)">
            <summary>
            加载全局配置。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.LoadConfig(System.String,System.Int32,System.Object)">
            <summary>
            加载全局配置。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="priority">加载全局配置资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.ParseConfig(System.Object)">
            <summary>
            解析全局配置。
            </summary>
            <param name="configData">要解析的全局配置数据。</param>
            <returns>是否解析全局配置成功。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.ParseConfig(System.Object,System.Object)">
            <summary>
            解析全局配置。
            </summary>
            <param name="configData">要解析的全局配置数据。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否解析全局配置成功。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.HasConfig(System.String)">
            <summary>
            检查是否存在指定全局配置项。
            </summary>
            <param name="configName">要检查全局配置项的名称。</param>
            <returns>指定的全局配置项是否存在。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.AddConfig(System.String,System.Boolean,System.Int32,System.Single,System.String)">
            <summary>
            增加指定全局配置项。
            </summary>
            <param name="configName">要增加全局配置项的名称。</param>
            <param name="boolValue">全局配置项布尔值。</param>
            <param name="intValue">全局配置项整数值。</param>
            <param name="floatValue">全局配置项浮点数值。</param>
            <param name="stringValue">全局配置项字符串值。</param>
            <returns>是否增加全局配置项成功。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.RemoveConfig(System.String)">
            <summary>
            移除指定全局配置项。
            </summary>
            <param name="configName">要移除全局配置项的名称。</param>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.RemoveAllConfigs">
            <summary>
            清空所有全局配置项。
            </summary>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.GetBool(System.String)">
            <summary>
            从指定全局配置项中读取布尔值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.GetBool(System.String,System.Boolean)">
            <summary>
            从指定全局配置项中读取布尔值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <param name="defaultValue">当指定的全局配置项不存在时，返回此默认值。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.GetInt(System.String)">
            <summary>
            从指定全局配置项中读取整数值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.GetInt(System.String,System.Int32)">
            <summary>
            从指定全局配置项中读取整数值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <param name="defaultValue">当指定的全局配置项不存在时，返回此默认值。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.GetFloat(System.String)">
            <summary>
            从指定全局配置项中读取浮点数值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.GetFloat(System.String,System.Single)">
            <summary>
            从指定全局配置项中读取浮点数值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <param name="defaultValue">当指定的全局配置项不存在时，返回此默认值。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.GetString(System.String)">
            <summary>
            从指定全局配置项中读取字符串值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Config.ConfigManager.GetString(System.String,System.String)">
            <summary>
            从指定全局配置项中读取字符串值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <param name="defaultValue">当指定的全局配置项不存在时，返回此默认值。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="T:GameFramework.Config.IConfigHelper">
            <summary>
            全局配置辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Config.IConfigHelper.LoadConfig(System.String,System.Object,System.Object)">
            <summary>
            加载全局配置。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="configObject">全局配置对象。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否加载成功。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigHelper.ParseConfig(System.Object,System.Object)">
            <summary>
            解析全局配置。
            </summary>
            <param name="configData">要解析的全局配置数据。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否解析全局配置成功。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigHelper.ReleaseConfigAsset(System.Object)">
            <summary>
            释放全局配置资源。
            </summary>
            <param name="configAsset">要释放的全局配置资源。</param>
        </member>
        <member name="T:GameFramework.Config.IConfigManager">
            <summary>
            全局配置管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Config.IConfigManager.Count">
            <summary>
            获取全局配置项数量。
            </summary>
        </member>
        <member name="E:GameFramework.Config.IConfigManager.LoadConfigSuccess">
            <summary>
            加载全局配置成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Config.IConfigManager.LoadConfigFailure">
            <summary>
            加载全局配置失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Config.IConfigManager.LoadConfigUpdate">
            <summary>
            加载全局配置更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Config.IConfigManager.LoadConfigDependencyAsset">
            <summary>
            加载全局配置时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.SetConfigHelper(GameFramework.Config.IConfigHelper)">
            <summary>
            设置全局配置辅助器。
            </summary>
            <param name="configHelper">全局配置辅助器。</param>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.LoadConfig(System.String)">
            <summary>
            加载全局配置。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.LoadConfig(System.String,System.Int32)">
            <summary>
            加载全局配置。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="priority">加载全局配置资源的优先级。</param>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.LoadConfig(System.String,System.Object)">
            <summary>
            加载全局配置。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.LoadConfig(System.String,System.Int32,System.Object)">
            <summary>
            加载全局配置。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="priority">加载全局配置资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.ParseConfig(System.Object)">
            <summary>
            解析全局配置。
            </summary>
            <param name="configData">要解析的全局配置数据。</param>
            <returns>是否解析全局配置成功。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.ParseConfig(System.Object,System.Object)">
            <summary>
            解析全局配置。
            </summary>
            <param name="configData">要解析的全局配置数据。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否解析全局配置成功。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.HasConfig(System.String)">
            <summary>
            检查是否存在指定全局配置项。
            </summary>
            <param name="configName">要检查全局配置项的名称。</param>
            <returns>指定的全局配置项是否存在。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.AddConfig(System.String,System.Boolean,System.Int32,System.Single,System.String)">
            <summary>
            增加指定全局配置项。
            </summary>
            <param name="configName">要增加全局配置项的名称。</param>
            <param name="boolValue">全局配置项布尔值。</param>
            <param name="intValue">全局配置项整数值。</param>
            <param name="floatValue">全局配置项浮点数值。</param>
            <param name="stringValue">全局配置项字符串值。</param>
            <returns>是否增加全局配置项成功。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.RemoveConfig(System.String)">
            <summary>
            移除指定全局配置项。
            </summary>
            <param name="configName">要移除全局配置项的名称。</param>
            <returns>是否移除全局配置项成功。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.RemoveAllConfigs">
            <summary>
            清空所有全局配置项。
            </summary>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.GetBool(System.String)">
            <summary>
            从指定全局配置项中读取布尔值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.GetBool(System.String,System.Boolean)">
            <summary>
            从指定全局配置项中读取布尔值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <param name="defaultValue">当指定的全局配置项不存在时，返回此默认值。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.GetInt(System.String)">
            <summary>
            从指定全局配置项中读取整数值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.GetInt(System.String,System.Int32)">
            <summary>
            从指定全局配置项中读取整数值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <param name="defaultValue">当指定的全局配置项不存在时，返回此默认值。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.GetFloat(System.String)">
            <summary>
            从指定全局配置项中读取浮点数值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.GetFloat(System.String,System.Single)">
            <summary>
            从指定全局配置项中读取浮点数值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <param name="defaultValue">当指定的全局配置项不存在时，返回此默认值。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.GetString(System.String)">
            <summary>
            从指定全局配置项中读取字符串值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Config.IConfigManager.GetString(System.String,System.String)">
            <summary>
            从指定全局配置项中读取字符串值。
            </summary>
            <param name="configName">要获取全局配置项的名称。</param>
            <param name="defaultValue">当指定的全局配置项不存在时，返回此默认值。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="T:GameFramework.Config.LoadConfigDependencyAssetEventArgs">
            <summary>
            加载全局配置时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Config.LoadConfigDependencyAssetEventArgs.#ctor">
            <summary>
            初始化加载全局配置时加载依赖资源事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigDependencyAssetEventArgs.ConfigAssetName">
            <summary>
            获取全局配置资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Config.LoadConfigDependencyAssetEventArgs.Create(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            创建加载全局配置时加载依赖资源事件。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载全局配置时加载依赖资源事件。</returns>
        </member>
        <member name="M:GameFramework.Config.LoadConfigDependencyAssetEventArgs.Clear">
            <summary>
            清理加载全局配置时加载依赖资源事件。
            </summary>
        </member>
        <member name="T:GameFramework.Config.LoadConfigFailureEventArgs">
            <summary>
            加载全局配置失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Config.LoadConfigFailureEventArgs.#ctor">
            <summary>
            初始化加载全局配置失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigFailureEventArgs.ConfigAssetName">
            <summary>
            获取全局配置资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Config.LoadConfigFailureEventArgs.Create(System.String,System.String,System.Object)">
            <summary>
            创建加载全局配置失败事件。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载全局配置失败事件。</returns>
        </member>
        <member name="M:GameFramework.Config.LoadConfigFailureEventArgs.Clear">
            <summary>
            清理加载全局配置失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.Config.LoadConfigSuccessEventArgs">
            <summary>
            加载全局配置成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Config.LoadConfigSuccessEventArgs.#ctor">
            <summary>
            初始化加载全局配置成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigSuccessEventArgs.ConfigAssetName">
            <summary>
            获取全局配置资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigSuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Config.LoadConfigSuccessEventArgs.Create(System.String,System.Single,System.Object)">
            <summary>
            创建加载全局配置成功事件。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载全局配置成功事件。</returns>
        </member>
        <member name="M:GameFramework.Config.LoadConfigSuccessEventArgs.Clear">
            <summary>
            清理加载全局配置成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.Config.LoadConfigUpdateEventArgs">
            <summary>
            加载全局配置更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Config.LoadConfigUpdateEventArgs.#ctor">
            <summary>
            初始化加载全局配置更新事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigUpdateEventArgs.ConfigAssetName">
            <summary>
            获取全局配置资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigUpdateEventArgs.Progress">
            <summary>
            获取加载全局配置进度。
            </summary>
        </member>
        <member name="P:GameFramework.Config.LoadConfigUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Config.LoadConfigUpdateEventArgs.Create(System.String,System.Single,System.Object)">
            <summary>
            创建加载全局配置更新事件。
            </summary>
            <param name="configAssetName">全局配置资源名称。</param>
            <param name="progress">加载全局配置进度。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载全局配置更新事件。</returns>
        </member>
        <member name="M:GameFramework.Config.LoadConfigUpdateEventArgs.Clear">
            <summary>
            清理加载全局配置更新事件。
            </summary>
        </member>
        <member name="T:GameFramework.DataNode.DataNodeManager">
            <summary>
            数据结点管理器。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.#ctor">
            <summary>
            初始化数据结点管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.DataNodeManager.Root">
            <summary>
            获取根数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.Update(System.Single,System.Single)">
            <summary>
            数据结点管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.Shutdown">
            <summary>
            关闭并清理数据结点管理器。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetData``1(System.String)">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetData(System.String)">
            <summary>
            获取数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>数据结点的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetData``1(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetData(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>数据结点的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.SetData``1(System.String,``0)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.SetData(System.String,GameFramework.Variable)">
            <summary>
            设置数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.SetData``1(System.String,``0,GameFramework.DataNode.IDataNode)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
            <param name="node">查找起始结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.SetData(System.String,GameFramework.Variable,GameFramework.DataNode.IDataNode)">
            <summary>
            设置数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
            <param name="node">查找起始结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetNode(System.String)">
            <summary>
            获取数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定位置的数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定位置的数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetOrAddNode(System.String)">
            <summary>
            获取或增加数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定位置的数据结点，如果没有找到，则创建相应的数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetOrAddNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取或增加数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定位置的数据结点，如果没有找到，则增加相应的数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.RemoveNode(System.String)">
            <summary>
            移除数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.RemoveNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            移除数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.Clear">
            <summary>
            移除所有数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.GetSplitPath(System.String)">
            <summary>
            数据结点路径切分工具函数。
            </summary>
            <param name="path">要切分的数据结点路径。</param>
            <returns>切分后的字符串数组。</returns>
        </member>
        <member name="T:GameFramework.DataNode.DataNodeManager.DataNode">
            <summary>
            数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.Create(System.String,GameFramework.DataNode.DataNodeManager.DataNode)">
            <summary>
            创建数据结点。
            </summary>
            <param name="name">数据结点名称。</param>
            <param name="parent">父数据结点。</param>
            <returns>创建的数据结点。</returns>
        </member>
        <member name="P:GameFramework.DataNode.DataNodeManager.DataNode.Name">
            <summary>
            获取数据结点的名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.DataNodeManager.DataNode.FullName">
            <summary>
            获取数据结点的完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.DataNodeManager.DataNode.Parent">
            <summary>
            获取父数据结点。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.DataNodeManager.DataNode.ChildCount">
            <summary>
            获取子数据结点的数量。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetData``1">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetData">
            <summary>
            获取数据结点的数据。
            </summary>
            <returns>数据结点数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.SetData``1(``0)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.SetData(GameFramework.Variable)">
            <summary>
            设置数据结点的数据。
            </summary>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.HasChild(System.Int32)">
            <summary>
            根据索引检查是否存在子数据结点。
            </summary>
            <param name="index">子数据结点的索引。</param>
            <returns>是否存在子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.HasChild(System.String)">
            <summary>
            根据名称检查是否存在子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
            <returns>是否存在子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetChild(System.Int32)">
            <summary>
            根据索引获取子数据结点。
            </summary>
            <param name="index">子数据结点的索引。</param>
            <returns>指定索引的子数据结点，如果索引越界，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetChild(System.String)">
            <summary>
            根据名称获取子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
            <returns>指定名称的子数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetOrAddChild(System.String)">
            <summary>
            根据名称获取或增加子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
            <returns>指定名称的子数据结点，如果对应名称的子数据结点已存在，则返回已存在的子数据结点，否则增加子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetAllChild">
            <summary>
            获取所有子数据结点。
            </summary>
            <returns>所有子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.GetAllChild(System.Collections.Generic.List{GameFramework.DataNode.IDataNode})">
            <summary>
            获取所有子数据结点。
            </summary>
            <param name="results">所有子数据结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.RemoveChild(System.Int32)">
            <summary>
            根据索引移除子数据结点。
            </summary>
            <param name="index">子数据结点的索引位置。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.RemoveChild(System.String)">
            <summary>
            根据名称移除子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.ToString">
            <summary>
            获取数据结点字符串。
            </summary>
            <returns>数据结点字符串。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.ToDataString">
            <summary>
            获取数据字符串。
            </summary>
            <returns>数据字符串。</returns>
        </member>
        <member name="M:GameFramework.DataNode.DataNodeManager.DataNode.IsValidName(System.String)">
            <summary>
            检测数据结点名称是否合法。
            </summary>
            <param name="name">要检测的数据结点名称。</param>
            <returns>是否是合法的数据结点名称。</returns>
        </member>
        <member name="T:GameFramework.DataNode.IDataNode">
            <summary>
            数据结点接口。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.IDataNode.Name">
            <summary>
            获取数据结点的名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.IDataNode.FullName">
            <summary>
            获取数据结点的完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.IDataNode.Parent">
            <summary>
            获取父数据结点。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.IDataNode.ChildCount">
            <summary>
            获取子数据结点的数量。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetData``1">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetData">
            <summary>
            获取数据结点的数据。
            </summary>
            <returns>数据结点数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.SetData``1(``0)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.SetData(GameFramework.Variable)">
            <summary>
            设置数据结点的数据。
            </summary>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.HasChild(System.Int32)">
            <summary>
            根据索引检查是否存在子数据结点。
            </summary>
            <param name="index">子数据结点的索引。</param>
            <returns>是否存在子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.HasChild(System.String)">
            <summary>
            根据名称检查是否存在子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
            <returns>是否存在子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetChild(System.Int32)">
            <summary>
            根据索引获取子数据结点。
            </summary>
            <param name="index">子数据结点的索引。</param>
            <returns>指定索引的子数据结点，如果索引越界，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetChild(System.String)">
            <summary>
            根据名称获取子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
            <returns>指定名称的子数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetOrAddChild(System.String)">
            <summary>
            根据名称获取或增加子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
            <returns>指定名称的子数据结点，如果对应名称的子数据结点已存在，则返回已存在的子数据结点，否则增加子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetAllChild">
            <summary>
            获取所有子数据结点。
            </summary>
            <returns>所有子数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.GetAllChild(System.Collections.Generic.List{GameFramework.DataNode.IDataNode})">
            <summary>
            获取所有子数据结点。
            </summary>
            <param name="results">所有子数据结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.RemoveChild(System.Int32)">
            <summary>
            根据索引移除子数据结点。
            </summary>
            <param name="index">子数据结点的索引。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.RemoveChild(System.String)">
            <summary>
            根据名称移除子数据结点。
            </summary>
            <param name="name">子数据结点名称。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.Clear">
            <summary>
            移除当前数据结点的数据和所有子数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.ToString">
            <summary>
            获取数据结点字符串。
            </summary>
            <returns>数据结点字符串。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNode.ToDataString">
            <summary>
            获取数据字符串。
            </summary>
            <returns>数据字符串。</returns>
        </member>
        <member name="T:GameFramework.DataNode.IDataNodeManager">
            <summary>
            数据结点管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.DataNode.IDataNodeManager.Root">
            <summary>
            获取根数据结点。
            </summary>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetData``1(System.String)">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetData(System.String)">
            <summary>
            获取数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>数据结点的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetData``1(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            根据类型获取数据结点的数据。
            </summary>
            <typeparam name="T">要获取的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定类型的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetData(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>数据结点的数据。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.SetData``1(System.String,``0)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.SetData(System.String,GameFramework.Variable)">
            <summary>
            设置数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.SetData``1(System.String,``0,GameFramework.DataNode.IDataNode)">
            <summary>
            设置数据结点的数据。
            </summary>
            <typeparam name="T">要设置的数据类型。</typeparam>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
            <param name="node">查找起始结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.SetData(System.String,GameFramework.Variable,GameFramework.DataNode.IDataNode)">
            <summary>
            设置数据结点的数据。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="data">要设置的数据。</param>
            <param name="node">查找起始结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetNode(System.String)">
            <summary>
            获取数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定位置的数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定位置的数据结点，如果没有找到，则返回空。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetOrAddNode(System.String)">
            <summary>
            获取或增加数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <returns>指定位置的数据结点，如果没有找到，则创建相应的数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.GetOrAddNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            获取或增加数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
            <returns>指定位置的数据结点，如果没有找到，则创建相应的数据结点。</returns>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.RemoveNode(System.String)">
            <summary>
            移除数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.RemoveNode(System.String,GameFramework.DataNode.IDataNode)">
            <summary>
            移除数据结点。
            </summary>
            <param name="path">相对于 node 的查找路径。</param>
            <param name="node">查找起始结点。</param>
        </member>
        <member name="M:GameFramework.DataNode.IDataNodeManager.Clear">
            <summary>
            移除所有数据结点。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.DataTableBase">
            <summary>
            数据表基类。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableBase.#ctor">
            <summary>
            初始化数据表基类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableBase.#ctor(System.String)">
            <summary>
            初始化数据表基类的新实例。
            </summary>
            <param name="name">数据表名称。</param>
        </member>
        <member name="P:GameFramework.DataTable.DataTableBase.Name">
            <summary>
            获取数据表名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableBase.FullName">
            <summary>
            获取数据表完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableBase.Type">
            <summary>
            获取数据表行的类型。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableBase.Count">
            <summary>
            获取数据表行数。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableBase.AddDataRow(GameFramework.GameFrameworkDataSegment,System.Object)">
            <summary>
            增加数据表行。
            </summary>
            <param name="dataRowSegment">要解析的数据表行片段。</param>
            <param name="dataTableUserData">数据表用户自定义数据。</param>
            <returns>是否增加数据表行成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableBase.Shutdown">
            <summary>
            关闭并清理数据表。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.DataTableManager">
            <summary>
            数据表管理器。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.#ctor">
            <summary>
            初始化数据表管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.Count">
            <summary>
            获取数据表数量。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.DataTableManager.LoadDataTableSuccess">
            <summary>
            加载数据表成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.DataTableManager.LoadDataTableFailure">
            <summary>
            加载数据表失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.DataTableManager.LoadDataTableUpdate">
            <summary>
            加载数据表更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.DataTableManager.LoadDataTableDependencyAsset">
            <summary>
            加载数据表时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.Update(System.Single,System.Single)">
            <summary>
            数据表管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.Shutdown">
            <summary>
            关闭并清理数据表管理器。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.SetDataTableHelper(GameFramework.DataTable.IDataTableHelper)">
            <summary>
            设置数据表辅助器。
            </summary>
            <param name="dataTableHelper">数据表辅助器。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.LoadDataTable(System.String)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.LoadDataTable(System.String,System.Int32)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="priority">加载数据表资源的优先级。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.LoadDataTable(System.String,System.Object)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.LoadDataTable(System.String,System.Int32,System.Object)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="priority">加载数据表资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.HasDataTable``1">
            <summary>
            是否存在数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.HasDataTable(System.Type)">
            <summary>
            是否存在数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.HasDataTable``1(System.String)">
            <summary>
            是否存在数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.HasDataTable(System.Type,System.String)">
            <summary>
            是否存在数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetDataTable``1">
            <summary>
            获取数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetDataTable(System.Type)">
            <summary>
            获取数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetDataTable``1(System.String)">
            <summary>
            获取数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetDataTable(System.Type,System.String)">
            <summary>
            获取数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetAllDataTables">
            <summary>
            获取所有数据表。
            </summary>
            <returns>所有数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.GetAllDataTables(System.Collections.Generic.List{GameFramework.DataTable.DataTableBase})">
            <summary>
            获取所有数据表。
            </summary>
            <param name="results">所有数据表。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.CreateDataTable``1(System.Object)">
            <summary>
            创建数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="dataTableData">要解析的数据表数据。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.CreateDataTable(System.Type,System.Object)">
            <summary>
            创建数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <param name="dataTableData">要解析的数据表数据。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.CreateDataTable``1(System.String,System.Object)">
            <summary>
            创建数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <param name="dataTableData">要解析的数据表数据。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.CreateDataTable(System.Type,System.String,System.Object)">
            <summary>
            创建数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <param name="dataTableData">要解析的数据表数据。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DestroyDataTable``1">
            <summary>
            销毁数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DestroyDataTable(System.Type)">
            <summary>
            销毁数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DestroyDataTable``1(System.String)">
            <summary>
            销毁数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DestroyDataTable(System.Type,System.String)">
            <summary>
            销毁数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DestroyDataTable``1(GameFramework.DataTable.IDataTable{``0})">
            <summary>
            销毁数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="dataTable">要销毁的数据表。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DestroyDataTable(GameFramework.DataTable.DataTableBase)">
            <summary>
            销毁数据表。
            </summary>
            <param name="dataTable">要销毁的数据表。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="T:GameFramework.DataTable.DataTableManager.DataTable`1">
            <summary>
            数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.#ctor(System.String)">
            <summary>
            初始化数据表的新实例。
            </summary>
            <param name="name">数据表名称。</param>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.DataTable`1.Type">
            <summary>
            获取数据表行的类型。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.DataTable`1.Count">
            <summary>
            获取数据表行数。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.DataTable`1.Item(System.Int32)">
            <summary>
            获取数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>数据表行。</returns>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.DataTable`1.MinIdDataRow">
            <summary>
            获取编号最小的数据表行。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.DataTableManager.DataTable`1.MaxIdDataRow">
            <summary>
            获取编号最大的数据表行。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.HasDataRow(System.Int32)">
            <summary>
            检查是否存在数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>是否存在数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.HasDataRow(System.Predicate{`0})">
            <summary>
            检查是否存在数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>是否存在数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetDataRow(System.Int32)">
            <summary>
            获取数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetDataRow(System.Predicate{`0})">
            <summary>
            获取符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>符合条件的数据表行。</returns>
            <remarks>当存在多个符合条件的数据表行时，仅返回第一个符合条件的数据表行。</remarks>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetDataRows(System.Predicate{`0})">
            <summary>
            获取符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>符合条件的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetDataRows(System.Predicate{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="results">符合条件的数据表行。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetDataRows(System.Comparison{`0})">
            <summary>
            获取排序后的数据表行。
            </summary>
            <param name="comparison">要排序的条件。</param>
            <returns>排序后的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetDataRows(System.Comparison{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取排序后的数据表行。
            </summary>
            <param name="comparison">要排序的条件。</param>
            <param name="results">排序后的数据表行。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetDataRows(System.Predicate{`0},System.Comparison{`0})">
            <summary>
            获取排序后的符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="comparison">要排序的条件。</param>
            <returns>排序后的符合条件的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetDataRows(System.Predicate{`0},System.Comparison{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取排序后的符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="comparison">要排序的条件。</param>
            <param name="results">排序后的符合条件的数据表行。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetAllDataRows">
            <summary>
            获取所有数据表行。
            </summary>
            <returns>所有数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetAllDataRows(System.Collections.Generic.List{`0})">
            <summary>
            获取所有数据表行。
            </summary>
            <param name="results">所有数据表行。</param>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.AddDataRow(GameFramework.GameFrameworkDataSegment,System.Object)">
            <summary>
            增加数据表行。
            </summary>
            <param name="dataRowSegment">要解析的数据表行片段。</param>
            <param name="dataTableUserData">数据表用户自定义数据。</param>
            <returns>是否增加数据表行成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.RemoveDataRow(System.Int32)">
            <summary>
            移除指定数据表行。
            </summary>
            <param name="id">要移除数据表行的编号。</param>
            <returns>是否移除数据表行成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.RemoveAllDataRows">
            <summary>
            清空所有数据表行。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.GetEnumerator">
            <summary>
            返回一个循环访问数据表的枚举器。
            </summary>
            <returns>可用于循环访问数据表的对象。</returns>
        </member>
        <member name="M:GameFramework.DataTable.DataTableManager.DataTable`1.Shutdown">
            <summary>
            关闭并清理数据表。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.IDataRow">
            <summary>
            数据表行接口。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataRow.Id">
            <summary>
            获取数据表行的编号。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.IDataRow.ParseDataRow(GameFramework.GameFrameworkDataSegment,System.Object)">
            <summary>
            数据表行解析器。
            </summary>
            <param name="dataRowSegment">要解析的数据表行片段。</param>
            <param name="dataTableUserData">数据表用户自定义数据。</param>
            <returns>是否解析数据表行成功。</returns>
        </member>
        <member name="T:GameFramework.DataTable.IDataTable`1">
            <summary>
            数据表接口。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.Name">
            <summary>
            获取数据表名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.FullName">
            <summary>
            获取数据表完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.Type">
            <summary>
            获取数据表行的类型。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.Count">
            <summary>
            获取数据表行数。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.Item(System.Int32)">
            <summary>
            获取数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>数据表行。</returns>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.MinIdDataRow">
            <summary>
            获取编号最小的数据表行。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTable`1.MaxIdDataRow">
            <summary>
            获取编号最大的数据表行。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.HasDataRow(System.Int32)">
            <summary>
            检查是否存在数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>是否存在数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.HasDataRow(System.Predicate{`0})">
            <summary>
            检查是否存在数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>是否存在数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetDataRow(System.Int32)">
            <summary>
            获取数据表行。
            </summary>
            <param name="id">数据表行的编号。</param>
            <returns>数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetDataRow(System.Predicate{`0})">
            <summary>
            获取符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>符合条件的数据表行。</returns>
            <remarks>当存在多个符合条件的数据表行时，仅返回第一个符合条件的数据表行。</remarks>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetDataRows(System.Predicate{`0})">
            <summary>
            获取符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>符合条件的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetDataRows(System.Predicate{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="results">符合条件的数据表行。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetDataRows(System.Comparison{`0})">
            <summary>
            获取排序后的数据表行。
            </summary>
            <param name="comparison">要排序的条件。</param>
            <returns>排序后的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetDataRows(System.Comparison{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取排序后的数据表行。
            </summary>
            <param name="comparison">要排序的条件。</param>
            <param name="results">排序后的数据表行。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetDataRows(System.Predicate{`0},System.Comparison{`0})">
            <summary>
            获取排序后的符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="comparison">要排序的条件。</param>
            <returns>排序后的符合条件的数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetDataRows(System.Predicate{`0},System.Comparison{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取排序后的符合条件的数据表行。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="comparison">要排序的条件。</param>
            <param name="results">排序后的符合条件的数据表行。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetAllDataRows">
            <summary>
            获取所有数据表行。
            </summary>
            <returns>所有数据表行。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.GetAllDataRows(System.Collections.Generic.List{`0})">
            <summary>
            获取所有数据表行。
            </summary>
            <param name="results">所有数据表行。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.AddDataRow(GameFramework.GameFrameworkDataSegment,System.Object)">
            <summary>
            增加数据表行。
            </summary>
            <param name="dataRowSegment">要解析的数据表行片段。</param>
            <param name="dataTableUserData">数据表用户自定义数据。</param>
            <returns>是否增加数据表行成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.RemoveDataRow(System.Int32)">
            <summary>
            移除指定数据表行。
            </summary>
            <param name="id">要移除数据表行的编号。</param>
            <returns>是否移除数据表行成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTable`1.RemoveAllDataRows">
            <summary>
            清空所有数据表行。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.IDataTableHelper">
            <summary>
            数据表辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableHelper.LoadDataTable(System.String,System.Object,System.Object)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="dataTableObject">数据表对象。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否加载成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableHelper.GetDataRowSegments(System.Object)">
            <summary>
            获取数据表行片段。
            </summary>
            <param name="dataTableData">要解析的数据表数据。</param>
            <returns>数据表行片段。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableHelper.GetDataTableUserData(System.Object)">
            <summary>
            获取数据表用户自定义数据。
            </summary>
            <param name="dataTableData">要解析的数据表数据。</param>
            <returns>数据表用户自定义数据。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableHelper.ReleaseDataTableAsset(System.Object)">
            <summary>
            释放数据表资源。
            </summary>
            <param name="dataTableAsset">要释放的数据表资源。</param>
        </member>
        <member name="T:GameFramework.DataTable.IDataTableManager">
            <summary>
            数据表管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.IDataTableManager.Count">
            <summary>
            获取数据表数量。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.IDataTableManager.LoadDataTableSuccess">
            <summary>
            加载数据表成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.IDataTableManager.LoadDataTableFailure">
            <summary>
            加载数据表失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.IDataTableManager.LoadDataTableUpdate">
            <summary>
            加载数据表更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.DataTable.IDataTableManager.LoadDataTableDependencyAsset">
            <summary>
            加载数据表时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.SetDataTableHelper(GameFramework.DataTable.IDataTableHelper)">
            <summary>
            设置数据表辅助器。
            </summary>
            <param name="dataTableHelper">数据表辅助器。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.LoadDataTable(System.String)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.LoadDataTable(System.String,System.Int32)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="priority">加载数据表资源的优先级。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.LoadDataTable(System.String,System.Object)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.LoadDataTable(System.String,System.Int32,System.Object)">
            <summary>
            加载数据表。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="priority">加载数据表资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.HasDataTable``1">
            <summary>
            是否存在数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.HasDataTable(System.Type)">
            <summary>
            是否存在数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.HasDataTable``1(System.String)">
            <summary>
            是否存在数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.HasDataTable(System.Type,System.String)">
            <summary>
            是否存在数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>是否存在数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetDataTable``1">
            <summary>
            获取数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetDataTable(System.Type)">
            <summary>
            获取数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetDataTable``1(System.String)">
            <summary>
            获取数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetDataTable(System.Type,System.String)">
            <summary>
            获取数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>要获取的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetAllDataTables">
            <summary>
            获取所有数据表。
            </summary>
            <returns>所有数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.GetAllDataTables(System.Collections.Generic.List{GameFramework.DataTable.DataTableBase})">
            <summary>
            获取所有数据表。
            </summary>
            <param name="results">所有数据表。</param>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.CreateDataTable``1(System.Object)">
            <summary>
            创建数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="dataTableData">要解析的数据表数据。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.CreateDataTable(System.Type,System.Object)">
            <summary>
            创建数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <param name="dataTableData">要解析的数据表数据。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.CreateDataTable``1(System.String,System.Object)">
            <summary>
            创建数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <param name="dataTableData">要解析的数据表数据。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.CreateDataTable(System.Type,System.String,System.Object)">
            <summary>
            创建数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <param name="dataTableData">要解析的数据表数据。</param>
            <returns>要创建的数据表。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.DestroyDataTable``1">
            <summary>
            销毁数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.DestroyDataTable(System.Type)">
            <summary>
            销毁数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.DestroyDataTable``1(System.String)">
            <summary>
            销毁数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="name">数据表名称。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.DestroyDataTable(System.Type,System.String)">
            <summary>
            销毁数据表。
            </summary>
            <param name="dataRowType">数据表行的类型。</param>
            <param name="name">数据表名称。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.DestroyDataTable``1(GameFramework.DataTable.IDataTable{``0})">
            <summary>
            销毁数据表。
            </summary>
            <typeparam name="T">数据表行的类型。</typeparam>
            <param name="dataTable">要销毁的数据表。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="M:GameFramework.DataTable.IDataTableManager.DestroyDataTable(GameFramework.DataTable.DataTableBase)">
            <summary>
            销毁数据表。
            </summary>
            <param name="dataTable">要销毁的数据表。</param>
            <returns>是否销毁数据表成功。</returns>
        </member>
        <member name="T:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs">
            <summary>
            加载数据表时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.#ctor">
            <summary>
            初始化加载数据表时加载依赖资源事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.DataTableAssetName">
            <summary>
            获取数据表资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.Create(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            创建加载数据表时加载依赖资源事件。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载数据表时加载依赖资源事件。</returns>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableDependencyAssetEventArgs.Clear">
            <summary>
            清理加载数据表时加载依赖资源事件。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.LoadDataTableFailureEventArgs">
            <summary>
            加载数据表失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableFailureEventArgs.#ctor">
            <summary>
            初始化加载数据表失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableFailureEventArgs.DataTableAssetName">
            <summary>
            获取数据表资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableFailureEventArgs.Create(System.String,System.String,System.Object)">
            <summary>
            创建加载数据表失败事件。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载数据表失败事件。</returns>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableFailureEventArgs.Clear">
            <summary>
            清理加载数据表失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.LoadDataTableSuccessEventArgs">
            <summary>
            加载数据表成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableSuccessEventArgs.#ctor">
            <summary>
            初始化加载数据表成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableSuccessEventArgs.DataTableAssetName">
            <summary>
            获取数据表资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableSuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableSuccessEventArgs.Create(System.String,System.Single,System.Object)">
            <summary>
            创建加载数据表成功事件。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载数据表成功事件。</returns>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableSuccessEventArgs.Clear">
            <summary>
            清理加载数据表成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.DataTable.LoadDataTableUpdateEventArgs">
            <summary>
            加载数据表更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableUpdateEventArgs.#ctor">
            <summary>
            初始化加载数据表更新事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableUpdateEventArgs.DataTableAssetName">
            <summary>
            获取数据表资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableUpdateEventArgs.Progress">
            <summary>
            获取加载数据表进度。
            </summary>
        </member>
        <member name="P:GameFramework.DataTable.LoadDataTableUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableUpdateEventArgs.Create(System.String,System.Single,System.Object)">
            <summary>
            创建加载数据表更新事件。
            </summary>
            <param name="dataTableAssetName">数据表资源名称。</param>
            <param name="progress">加载数据表进度。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载数据表更新事件。</returns>
        </member>
        <member name="M:GameFramework.DataTable.LoadDataTableUpdateEventArgs.Clear">
            <summary>
            清理加载数据表更新事件。
            </summary>
        </member>
        <member name="T:GameFramework.Debugger.DebuggerManager">
            <summary>
            调试器管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.#ctor">
            <summary>
            初始化调试器管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.ActiveWindow">
            <summary>
            获取或设置调试器窗口是否激活。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.DebuggerWindowRoot">
            <summary>
            调试器窗口根结点。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.Update(System.Single,System.Single)">
            <summary>
            调试器管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.Shutdown">
            <summary>
            关闭并清理调试器管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.RegisterDebuggerWindow(System.String,GameFramework.Debugger.IDebuggerWindow,System.Object[])">
            <summary>
            注册调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <param name="debuggerWindow">要注册的调试器窗口。</param>
            <param name="args">初始化调试器窗口参数。</param>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.GetDebuggerWindow(System.String)">
            <summary>
            获取调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <returns>要获取的调试器窗口。</returns>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.SelectDebuggerWindow(System.String)">
            <summary>
            选中调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <returns>是否成功选中调试器窗口。</returns>
        </member>
        <member name="T:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup">
            <summary>
            调试器窗口组。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.DebuggerWindowCount">
            <summary>
            获取调试器窗口数量。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.SelectedIndex">
            <summary>
            获取或设置当前选中的调试器窗口索引。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.SelectedWindow">
            <summary>
            获取当前选中的调试器窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.Initialize(System.Object[])">
            <summary>
            初始化调试组。
            </summary>
            <param name="args">初始化调试组参数。</param>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.Shutdown">
            <summary>
            关闭调试组。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.OnEnter">
            <summary>
            进入调试器窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.OnLeave">
            <summary>
            离开调试器窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.OnUpdate(System.Single,System.Single)">
            <summary>
            调试组轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.OnDraw">
            <summary>
            调试器窗口绘制。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.GetDebuggerWindowNames">
            <summary>
            获取调试组的调试器窗口名称集合。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.GetDebuggerWindow(System.String)">
            <summary>
            获取调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <returns>要获取的调试器窗口。</returns>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.SelectDebuggerWindow(System.String)">
            <summary>
            选中调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <returns>是否成功选中调试器窗口。</returns>
        </member>
        <member name="M:GameFramework.Debugger.DebuggerManager.DebuggerWindowGroup.RegisterDebuggerWindow(System.String,GameFramework.Debugger.IDebuggerWindow)">
            <summary>
            注册调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <param name="debuggerWindow">要注册的调试器窗口。</param>
        </member>
        <member name="T:GameFramework.Debugger.IDebuggerManager">
            <summary>
            调试器管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.IDebuggerManager.ActiveWindow">
            <summary>
            获取或设置调试器窗口是否激活。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.IDebuggerManager.DebuggerWindowRoot">
            <summary>
            调试器窗口根结点。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerManager.RegisterDebuggerWindow(System.String,GameFramework.Debugger.IDebuggerWindow,System.Object[])">
            <summary>
            注册调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <param name="debuggerWindow">要注册的调试器窗口。</param>
            <param name="args">初始化调试器窗口参数。</param>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerManager.GetDebuggerWindow(System.String)">
            <summary>
            获取调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <returns>要获取的调试器窗口。</returns>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerManager.SelectDebuggerWindow(System.String)">
            <summary>
            选中调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <returns>是否成功选中调试器窗口。</returns>
        </member>
        <member name="T:GameFramework.Debugger.IDebuggerWindow">
            <summary>
            调试器窗口接口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.Initialize(System.Object[])">
            <summary>
            初始化调试器窗口。
            </summary>
            <param name="args">初始化调试器窗口参数。</param>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.Shutdown">
            <summary>
            关闭调试器窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.OnEnter">
            <summary>
            进入调试器窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.OnLeave">
            <summary>
            离开调试器窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.OnUpdate(System.Single,System.Single)">
            <summary>
            调试器窗口轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindow.OnDraw">
            <summary>
            调试器窗口绘制。
            </summary>
        </member>
        <member name="T:GameFramework.Debugger.IDebuggerWindowGroup">
            <summary>
            调试器窗口组接口。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.IDebuggerWindowGroup.DebuggerWindowCount">
            <summary>
            获取调试器窗口数量。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.IDebuggerWindowGroup.SelectedIndex">
            <summary>
            获取或设置当前选中的调试器窗口索引。
            </summary>
        </member>
        <member name="P:GameFramework.Debugger.IDebuggerWindowGroup.SelectedWindow">
            <summary>
            获取当前选中的调试器窗口。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindowGroup.GetDebuggerWindowNames">
            <summary>
            获取调试组的调试器窗口名称集合。
            </summary>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindowGroup.GetDebuggerWindow(System.String)">
            <summary>
            获取调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <returns>要获取的调试器窗口。</returns>
        </member>
        <member name="M:GameFramework.Debugger.IDebuggerWindowGroup.RegisterDebuggerWindow(System.String,GameFramework.Debugger.IDebuggerWindow)">
            <summary>
            注册调试器窗口。
            </summary>
            <param name="path">调试器窗口路径。</param>
            <param name="debuggerWindow">要注册的调试器窗口。</param>
        </member>
        <member name="T:GameFramework.Download.Constant">
            <summary>
            下载相关常量。
            </summary>
        </member>
        <member name="F:GameFramework.Download.Constant.DefaultPriority">
            <summary>
            默认下载任务优先级。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadAgentHelperCompleteEventArgs">
            <summary>
            下载代理辅助器完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperCompleteEventArgs.#ctor">
            <summary>
            初始化下载代理辅助器完成事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperCompleteEventArgs.Length">
            <summary>
            获取下载的数据大小。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperCompleteEventArgs.Create(System.Int32)">
            <summary>
            创建下载代理辅助器完成事件。
            </summary>
            <param name="length">下载的数据大小。</param>
            <returns>创建的下载代理辅助器完成事件。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperCompleteEventArgs.Clear">
            <summary>
            清理下载代理辅助器完成事件。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadAgentHelperErrorEventArgs">
            <summary>
            下载代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperErrorEventArgs.#ctor">
            <summary>
            初始化下载代理辅助器错误事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperErrorEventArgs.DeleteDownloading">
            <summary>
            获取是否需要删除正在下载的文件。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperErrorEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperErrorEventArgs.Create(System.Boolean,System.String)">
            <summary>
            创建下载代理辅助器错误事件。
            </summary>
            <param name="deleteDownloading">是否需要删除正在下载的文件。</param>
            <param name="errorMessage">错误信息。</param>
            <returns>创建的下载代理辅助器错误事件。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperErrorEventArgs.Clear">
            <summary>
            清理下载代理辅助器错误事件。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadAgentHelperUpdateBytesEventArgs">
            <summary>
            下载代理辅助器更新数据流事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateBytesEventArgs.#ctor">
            <summary>
            初始化下载代理辅助器更新数据流事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperUpdateBytesEventArgs.Offset">
            <summary>
            获取数据流的偏移。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperUpdateBytesEventArgs.Length">
            <summary>
            获取数据流的长度。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateBytesEventArgs.Create(System.Byte[],System.Int32,System.Int32)">
            <summary>
            创建下载代理辅助器更新数据流事件。
            </summary>
            <param name="bytes">下载的数据流。</param>
            <param name="offset">数据流的偏移。</param>
            <param name="length">数据流的长度。</param>
            <returns>创建的下载代理辅助器更新数据流事件。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateBytesEventArgs.Clear">
            <summary>
            清理下载代理辅助器更新数据流事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateBytesEventArgs.GetBytes">
            <summary>
            获取下载的数据流。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadAgentHelperUpdateLengthEventArgs">
            <summary>
            下载代理辅助器更新数据大小事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateLengthEventArgs.#ctor">
            <summary>
            初始化下载代理辅助器更新数据大小事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperUpdateLengthEventArgs.DeltaLength">
            <summary>
            获取下载的增量数据大小。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateLengthEventArgs.Create(System.Int32)">
            <summary>
            创建下载代理辅助器更新数据大小事件。
            </summary>
            <param name="deltaLength">下载的增量数据大小。</param>
            <returns>创建的下载代理辅助器更新数据大小事件。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateLengthEventArgs.Clear">
            <summary>
            清理下载代理辅助器更新数据大小事件。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadFailureEventArgs">
            <summary>
            下载失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadFailureEventArgs.#ctor">
            <summary>
            初始化下载失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadFailureEventArgs.Create(System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            创建下载失败事件。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的下载失败事件。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadFailureEventArgs.Clear">
            <summary>
            清理下载失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadManager">
            <summary>
            下载管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.#ctor">
            <summary>
            初始化下载管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.Paused">
            <summary>
            获取或设置下载是否被暂停。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.TotalAgentCount">
            <summary>
            获取下载代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.FreeAgentCount">
            <summary>
            获取可用下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.WorkingAgentCount">
            <summary>
            获取工作中下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.WaitingTaskCount">
            <summary>
            获取等待下载任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.FlushSize">
            <summary>
            获取或设置将缓冲区写入磁盘的临界大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.Timeout">
            <summary>
            获取或设置下载超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.CurrentSpeed">
            <summary>
            获取当前下载速度。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadStart">
            <summary>
            下载开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadUpdate">
            <summary>
            下载更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadSuccess">
            <summary>
            下载成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadFailure">
            <summary>
            下载失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.Update(System.Single,System.Single)">
            <summary>
            下载管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.Shutdown">
            <summary>
            关闭并清理下载管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownloadAgentHelper(GameFramework.Download.IDownloadAgentHelper)">
            <summary>
            增加下载代理辅助器。
            </summary>
            <param name="downloadAgentHelper">要增加的下载代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownload(System.String,System.String)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownload(System.String,System.String,System.Int32)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="priority">下载任务的优先级。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownload(System.String,System.String,System.Object)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownload(System.String,System.String,System.Int32,System.Object)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="priority">下载任务的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.RemoveDownload(System.Int32)">
            <summary>
            移除下载任务。
            </summary>
            <param name="serialId">要移除下载任务的序列编号。</param>
            <returns>是否移除下载任务成功。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.RemoveAllDownloads">
            <summary>
            移除所有下载任务。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.GetAllDownloadInfos">
            <summary>
            获取所有下载任务的信息。
            </summary>
            <returns>所有下载任务的信息。</returns>
        </member>
        <member name="T:GameFramework.Download.DownloadManager.DownloadAgent">
            <summary>
            下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.#ctor(GameFramework.Download.IDownloadAgentHelper)">
            <summary>
            初始化下载代理的新实例。
            </summary>
            <param name="downloadAgentHelper">下载代理辅助器。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.Task">
            <summary>
            获取下载任务。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.WaitTime">
            <summary>
            获取已经等待时间。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.StartLength">
            <summary>
            获取开始下载时已经存在的大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.DownloadedLength">
            <summary>
            获取本次已经下载的大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.CurrentLength">
            <summary>
            获取当前的大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.SavedLength">
            <summary>
            获取已经存盘的大小。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Initialize">
            <summary>
            初始化下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Update(System.Single,System.Single)">
            <summary>
            下载代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Shutdown">
            <summary>
            关闭并清理下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Start(GameFramework.Download.DownloadManager.DownloadTask)">
            <summary>
            开始处理下载任务。
            </summary>
            <param name="task">要处理的下载任务。</param>
            <returns>开始处理任务的状态。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Reset">
            <summary>
            重置下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Dispose(System.Boolean)">
            <summary>
            释放资源。
            </summary>
            <param name="disposing">释放资源标记。</param>
        </member>
        <member name="T:GameFramework.Download.DownloadManager.DownloadTask">
            <summary>
            下载任务。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadTask.#ctor">
            <summary>
            初始化下载任务的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.Status">
            <summary>
            获取或设置下载任务的状态。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.DownloadUri">
            <summary>
            获取原始下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.FlushSize">
            <summary>
            获取将缓冲区写入磁盘的临界大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.Timeout">
            <summary>
            获取下载超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.Description">
            <summary>
            获取下载任务的描述。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadTask.Create(System.String,System.String,System.Int32,System.Int32,System.Single,System.Object)">
            <summary>
            创建下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="priority">下载任务的优先级。</param>
            <param name="flushSize">将缓冲区写入磁盘的临界大小。</param>
            <param name="timeout">下载超时时长，以秒为单位。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的下载任务。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadTask.Clear">
            <summary>
            清理下载任务。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadManager.DownloadTaskStatus">
            <summary>
            下载任务的状态。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Todo">
            <summary>
            准备下载。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Doing">
            <summary>
            下载中。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Done">
            <summary>
            下载完成。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Error">
            <summary>
            下载错误。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadStartEventArgs">
            <summary>
            下载开始事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadStartEventArgs.#ctor">
            <summary>
            初始化下载开始事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.CurrentLength">
            <summary>
            获取当前大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadStartEventArgs.Create(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            创建下载开始事件。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="currentLength">当前大小。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的下载开始事件。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadStartEventArgs.Clear">
            <summary>
            清理下载开始事件。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadSuccessEventArgs">
            <summary>
            下载成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadSuccessEventArgs.#ctor">
            <summary>
            初始化下载成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.CurrentLength">
            <summary>
            获取当前大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadSuccessEventArgs.Create(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            创建下载成功事件。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="currentLength">当前大小。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的下载成功事件。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadSuccessEventArgs.Clear">
            <summary>
            清理下载成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadUpdateEventArgs">
            <summary>
            下载更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadUpdateEventArgs.#ctor">
            <summary>
            初始化下载更新事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.CurrentLength">
            <summary>
            获取当前大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadUpdateEventArgs.Create(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            创建下载更新事件。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="currentLength">当前大小。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的下载更新事件。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadUpdateEventArgs.Clear">
            <summary>
            清理下载更新事件。
            </summary>
        </member>
        <member name="T:GameFramework.Download.IDownloadAgentHelper">
            <summary>
            下载代理辅助器接口。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadAgentHelper.DownloadAgentHelperUpdateBytes">
            <summary>
            下载代理辅助器更新数据流事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadAgentHelper.DownloadAgentHelperUpdateLength">
            <summary>
            下载代理辅助器更新数据大小事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadAgentHelper.DownloadAgentHelperComplete">
            <summary>
            下载代理辅助器完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadAgentHelper.DownloadAgentHelperError">
            <summary>
            下载代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Download(System.String,System.Object)">
            <summary>
            通过下载代理辅助器下载指定地址的数据。
            </summary>
            <param name="downloadUri">下载地址。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Download(System.String,System.Int32,System.Object)">
            <summary>
            通过下载代理辅助器下载指定地址的数据。
            </summary>
            <param name="downloadUri">下载地址。</param>
            <param name="fromPosition">下载数据起始位置。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Download(System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            通过下载代理辅助器下载指定地址的数据。
            </summary>
            <param name="downloadUri">下载地址。</param>
            <param name="fromPosition">下载数据起始位置。</param>
            <param name="toPosition">下载数据结束位置。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Reset">
            <summary>
            重置下载代理辅助器。
            </summary>
        </member>
        <member name="T:GameFramework.Download.IDownloadManager">
            <summary>
            下载管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.Paused">
            <summary>
            获取或设置下载是否被暂停。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.TotalAgentCount">
            <summary>
            获取下载代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.FreeAgentCount">
            <summary>
            获取可用下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.WorkingAgentCount">
            <summary>
            获取工作中下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.WaitingTaskCount">
            <summary>
            获取等待下载任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.FlushSize">
            <summary>
            获取或设置将缓冲区写入磁盘的临界大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.Timeout">
            <summary>
            获取或设置下载超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.CurrentSpeed">
            <summary>
            获取当前下载速度。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadStart">
            <summary>
            下载开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadUpdate">
            <summary>
            下载更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadSuccess">
            <summary>
            下载成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadFailure">
            <summary>
            下载失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownloadAgentHelper(GameFramework.Download.IDownloadAgentHelper)">
            <summary>
            增加下载代理辅助器。
            </summary>
            <param name="downloadAgentHelper">要增加的下载代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownload(System.String,System.String)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownload(System.String,System.String,System.Int32)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="priority">下载任务的优先级。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownload(System.String,System.String,System.Object)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownload(System.String,System.String,System.Int32,System.Object)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="priority">下载任务的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.RemoveDownload(System.Int32)">
            <summary>
            移除下载任务。
            </summary>
            <param name="serialId">要移除下载任务的序列编号。</param>
            <returns>是否移除下载任务成功。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.RemoveAllDownloads">
            <summary>
            移除所有下载任务。
            </summary>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.GetAllDownloadInfos">
            <summary>
            获取所有下载任务的信息。
            </summary>
            <returns>所有下载任务的信息。</returns>
        </member>
        <member name="T:GameFramework.Entity.EntityManager">
            <summary>
            实体管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.#ctor">
            <summary>
            初始化实体管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityCount">
            <summary>
            获取实体数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroupCount">
            <summary>
            获取实体组数量。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.EntityManager.ShowEntitySuccess">
            <summary>
            显示实体成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.EntityManager.ShowEntityFailure">
            <summary>
            显示实体失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.EntityManager.ShowEntityUpdate">
            <summary>
            显示实体更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.EntityManager.ShowEntityDependencyAsset">
            <summary>
            显示实体时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.EntityManager.HideEntityComplete">
            <summary>
            隐藏实体完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.Update(System.Single,System.Single)">
            <summary>
            实体管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.Shutdown">
            <summary>
            关闭并清理实体管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.SetEntityHelper(GameFramework.Entity.IEntityHelper)">
            <summary>
            设置实体辅助器。
            </summary>
            <param name="entityHelper">实体辅助器。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HasEntityGroup(System.String)">
            <summary>
            是否存在实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <returns>是否存在实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntityGroup(System.String)">
            <summary>
            获取实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <returns>要获取的实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetAllEntityGroups">
            <summary>
            获取所有实体组。
            </summary>
            <returns>所有实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetAllEntityGroups(System.Collections.Generic.List{GameFramework.Entity.IEntityGroup})">
            <summary>
            获取所有实体组。
            </summary>
            <param name="results">所有实体组。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AddEntityGroup(System.String,System.Single,System.Int32,System.Single,System.Int32,GameFramework.Entity.IEntityGroupHelper)">
            <summary>
            增加实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <param name="instanceAutoReleaseInterval">实体实例对象池自动释放可释放对象的间隔秒数。</param>
            <param name="instanceCapacity">实体实例对象池容量。</param>
            <param name="instanceExpireTime">实体实例对象池对象过期秒数。</param>
            <param name="instancePriority">实体实例对象池的优先级。</param>
            <param name="entityGroupHelper">实体组辅助器。</param>
            <returns>是否增加实体组成功。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HasEntity(System.Int32)">
            <summary>
            是否存在实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HasEntity(System.String)">
            <summary>
            是否存在实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntity(System.Int32)">
            <summary>
            获取实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntity(System.String)">
            <summary>
            获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntities(System.String)">
            <summary>
            获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntities(System.String,System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="results">要获取的实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetAllLoadedEntities">
            <summary>
            获取所有已加载的实体。
            </summary>
            <returns>所有已加载的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetAllLoadedEntities(System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            获取所有已加载的实体。
            </summary>
            <param name="results">所有已加载的实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetAllLoadingEntityIds">
            <summary>
            获取所有正在加载实体的编号。
            </summary>
            <returns>所有正在加载实体的编号。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetAllLoadingEntityIds(System.Collections.Generic.List{System.Int32})">
            <summary>
            获取所有正在加载实体的编号。
            </summary>
            <param name="results">所有正在加载实体的编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.IsLoadingEntity(System.Int32)">
            <summary>
            是否正在加载实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>是否正在加载实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.IsValidEntity(GameFramework.Entity.IEntity)">
            <summary>
            是否是合法的实体。
            </summary>
            <param name="entity">实体。</param>
            <returns>实体是否合法。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.ShowEntity(System.Int32,System.String,System.String)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.ShowEntity(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="priority">加载实体资源的优先级。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.ShowEntity(System.Int32,System.String,System.String,System.Object)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.ShowEntity(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="priority">加载实体资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideEntity(System.Int32)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entityId">实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideEntity(System.Int32,System.Object)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideEntity(GameFramework.Entity.IEntity)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideEntity(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entity">实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideAllLoadedEntities">
            <summary>
            隐藏所有已加载的实体。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideAllLoadedEntities(System.Object)">
            <summary>
            隐藏所有已加载的实体。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.HideAllLoadingEntities">
            <summary>
            隐藏所有正在加载的实体。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetParentEntity(System.Int32)">
            <summary>
            获取父实体。
            </summary>
            <param name="childEntityId">要获取父实体的子实体的实体编号。</param>
            <returns>子实体的父实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetParentEntity(GameFramework.Entity.IEntity)">
            <summary>
            获取父实体。
            </summary>
            <param name="childEntity">要获取父实体的子实体。</param>
            <returns>子实体的父实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetChildEntities(System.Int32)">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntityId">要获取子实体的父实体的实体编号。</param>
            <returns>子实体数组。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetChildEntities(System.Int32,System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntityId">要获取子实体的父实体的实体编号。</param>
            <param name="results">子实体数组。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetChildEntities(GameFramework.Entity.IEntity)">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntity">要获取子实体的父实体。</param>
            <returns>子实体数组。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetChildEntities(GameFramework.Entity.IEntity,System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntity">要获取子实体的父实体。</param>
            <param name="results">子实体数组。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(System.Int32,System.Int32)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(System.Int32,System.Int32,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(System.Int32,GameFramework.Entity.IEntity)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntity">被附加的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(System.Int32,GameFramework.Entity.IEntity,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntity">被附加的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(GameFramework.Entity.IEntity,System.Int32)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(GameFramework.Entity.IEntity,System.Int32,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(GameFramework.Entity.IEntity,GameFramework.Entity.IEntity)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntity">被附加的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.AttachEntity(GameFramework.Entity.IEntity,GameFramework.Entity.IEntity,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntity">被附加的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachEntity(System.Int32)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntityId">要解除的子实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachEntity(System.Int32,System.Object)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntityId">要解除的子实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachEntity(GameFramework.Entity.IEntity)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntity">要解除的子实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachEntity(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntity">要解除的子实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachChildEntities(System.Int32)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntityId">被解除的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachChildEntities(System.Int32,System.Object)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntityId">被解除的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachChildEntities(GameFramework.Entity.IEntity)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntity">被解除的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.DetachChildEntities(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntity">被解除的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.GetEntityInfo(System.Int32)">
            <summary>
            获取实体信息。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>实体信息。</returns>
        </member>
        <member name="T:GameFramework.Entity.EntityManager.EntityGroup">
            <summary>
            实体组。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.#ctor(System.String,System.Single,System.Int32,System.Single,System.Int32,GameFramework.Entity.IEntityGroupHelper,GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            初始化实体组的新实例。
            </summary>
            <param name="name">实体组名称。</param>
            <param name="instanceAutoReleaseInterval">实体实例对象池自动释放可释放对象的间隔秒数。</param>
            <param name="instanceCapacity">实体实例对象池容量。</param>
            <param name="instanceExpireTime">实体实例对象池对象过期秒数。</param>
            <param name="instancePriority">实体实例对象池的优先级。</param>
            <param name="entityGroupHelper">实体组辅助器。</param>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.Name">
            <summary>
            获取实体组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.EntityCount">
            <summary>
            获取实体组中实体数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.InstanceAutoReleaseInterval">
            <summary>
            获取或设置实体组实例对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.InstanceCapacity">
            <summary>
            获取或设置实体组实例对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.InstanceExpireTime">
            <summary>
            获取或设置实体组实例对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.InstancePriority">
            <summary>
            获取或设置实体组实例对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.EntityManager.EntityGroup.Helper">
            <summary>
            获取实体组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.Update(System.Single,System.Single)">
            <summary>
            实体组轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.HasEntity(System.Int32)">
            <summary>
            实体组中是否存在实体。
            </summary>
            <param name="entityId">实体序列编号。</param>
            <returns>实体组中是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.HasEntity(System.String)">
            <summary>
            实体组中是否存在实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>实体组中是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.GetEntity(System.Int32)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityId">实体序列编号。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.GetEntity(System.String)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.GetEntities(System.String)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.GetEntities(System.String,System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="results">要获取的实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.GetAllEntities">
            <summary>
            从实体组中获取所有实体。
            </summary>
            <returns>实体组中的所有实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.GetAllEntities(System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            从实体组中获取所有实体。
            </summary>
            <param name="results">实体组中的所有实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.AddEntity(GameFramework.Entity.IEntity)">
            <summary>
            往实体组增加实体。
            </summary>
            <param name="entity">要增加的实体。</param>
        </member>
        <member name="M:GameFramework.Entity.EntityManager.EntityGroup.RemoveEntity(GameFramework.Entity.IEntity)">
            <summary>
            从实体组移除实体。
            </summary>
            <param name="entity">要移除的实体。</param>
        </member>
        <member name="T:GameFramework.Entity.EntityManager.EntityInfo">
            <summary>
            实体信息。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.EntityManager.EntityInstanceObject">
            <summary>
            实体实例对象。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.EntityManager.EntityStatus">
            <summary>
            实体状态。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.HideEntityCompleteEventArgs">
            <summary>
            隐藏实体完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.HideEntityCompleteEventArgs.#ctor">
            <summary>
            初始化隐藏实体完成事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.HideEntityCompleteEventArgs.EntityId">
            <summary>
            获取实体编号。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.HideEntityCompleteEventArgs.EntityAssetName">
            <summary>
            获取实体资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.HideEntityCompleteEventArgs.EntityGroup">
            <summary>
            获取实体所属的实体组。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.HideEntityCompleteEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.HideEntityCompleteEventArgs.Create(System.Int32,System.String,GameFramework.Entity.IEntityGroup,System.Object)">
            <summary>
            创建隐藏实体完成事件。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroup">实体所属的实体组。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的隐藏实体完成事件。</returns>
        </member>
        <member name="M:GameFramework.Entity.HideEntityCompleteEventArgs.Clear">
            <summary>
            清理隐藏实体完成事件。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.IEntity">
            <summary>
            实体接口。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntity.Id">
            <summary>
            获取实体编号。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntity.EntityAssetName">
            <summary>
            获取实体资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntity.Handle">
            <summary>
            获取实体实例。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntity.EntityGroup">
            <summary>
            获取实体所属的实体组。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnInit(System.Int32,System.String,GameFramework.Entity.IEntityGroup,System.Boolean,System.Object)">
            <summary>
            实体初始化。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroup">实体所属的实体组。</param>
            <param name="isNewInstance">是否是新实例。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnRecycle">
            <summary>
            实体回收。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnShow(System.Object)">
            <summary>
            实体显示。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnHide(System.Boolean,System.Object)">
            <summary>
            实体隐藏。
            </summary>
            <param name="isShutdown">是否是关闭实体管理器时触发。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnAttached(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            实体附加子实体。
            </summary>
            <param name="childEntity">附加的子实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnDetached(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            实体解除子实体。
            </summary>
            <param name="childEntity">解除的子实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnAttachTo(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            实体附加子实体。
            </summary>
            <param name="parentEntity">被附加的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnDetachFrom(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            实体解除子实体。
            </summary>
            <param name="parentEntity">被解除的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntity.OnUpdate(System.Single,System.Single)">
            <summary>
            实体轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="T:GameFramework.Entity.IEntityGroup">
            <summary>
            实体组接口。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.Name">
            <summary>
            获取实体组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.EntityCount">
            <summary>
            获取实体组中实体数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.InstanceAutoReleaseInterval">
            <summary>
            获取或设置实体组实例对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.InstanceCapacity">
            <summary>
            获取或设置实体组实例对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.InstanceExpireTime">
            <summary>
            获取或设置实体组实例对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.InstancePriority">
            <summary>
            获取或设置实体组实例对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityGroup.Helper">
            <summary>
            获取实体组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.HasEntity(System.Int32)">
            <summary>
            实体组中是否存在实体。
            </summary>
            <param name="entityId">实体序列编号。</param>
            <returns>实体组中是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.HasEntity(System.String)">
            <summary>
            实体组中是否存在实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>实体组中是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.GetEntity(System.Int32)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityId">实体序列编号。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.GetEntity(System.String)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.GetEntities(System.String)">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.GetEntities(System.String,System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            从实体组中获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="results">要获取的实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.GetAllEntities">
            <summary>
            从实体组中获取所有实体。
            </summary>
            <returns>实体组中的所有实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.GetAllEntities(System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            从实体组中获取所有实体。
            </summary>
            <param name="results">实体组中的所有实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.SetEntityInstanceLocked(System.Object,System.Boolean)">
            <summary>
            设置实体实例是否被加锁。
            </summary>
            <param name="entityInstance">实体实例。</param>
            <param name="locked">实体实例是否被加锁。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityGroup.SetEntityInstancePriority(System.Object,System.Int32)">
            <summary>
            设置实体实例的优先级。
            </summary>
            <param name="entityInstance">实体实例。</param>
            <param name="priority">实体实例优先级。</param>
        </member>
        <member name="T:GameFramework.Entity.IEntityGroupHelper">
            <summary>
            实体组辅助器接口。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.IEntityHelper">
            <summary>
            实体辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntityHelper.InstantiateEntity(System.Object)">
            <summary>
            实例化实体。
            </summary>
            <param name="entityAsset">要实例化的实体资源。</param>
            <returns>实例化后的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityHelper.CreateEntity(System.Object,GameFramework.Entity.IEntityGroup,System.Object)">
            <summary>
            创建实体。
            </summary>
            <param name="entityInstance">实体实例。</param>
            <param name="entityGroup">实体所属的实体组。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityHelper.ReleaseEntity(System.Object,System.Object)">
            <summary>
            释放实体。
            </summary>
            <param name="entityAsset">要释放的实体资源。</param>
            <param name="entityInstance">要释放的实体实例。</param>
        </member>
        <member name="T:GameFramework.Entity.IEntityManager">
            <summary>
            实体管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityManager.EntityCount">
            <summary>
            获取实体数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.IEntityManager.EntityGroupCount">
            <summary>
            获取实体组数量。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.IEntityManager.ShowEntitySuccess">
            <summary>
            显示实体成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.IEntityManager.ShowEntityFailure">
            <summary>
            显示实体失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.IEntityManager.ShowEntityUpdate">
            <summary>
            显示实体更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.IEntityManager.ShowEntityDependencyAsset">
            <summary>
            显示实体时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.Entity.IEntityManager.HideEntityComplete">
            <summary>
            隐藏实体完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.SetEntityHelper(GameFramework.Entity.IEntityHelper)">
            <summary>
            设置实体辅助器。
            </summary>
            <param name="entityHelper">实体辅助器。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HasEntityGroup(System.String)">
            <summary>
            是否存在实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <returns>是否存在实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetEntityGroup(System.String)">
            <summary>
            获取实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <returns>要获取的实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetAllEntityGroups">
            <summary>
            获取所有实体组。
            </summary>
            <returns>所有实体组。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetAllEntityGroups(System.Collections.Generic.List{GameFramework.Entity.IEntityGroup})">
            <summary>
            获取所有实体组。
            </summary>
            <param name="results">所有实体组。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AddEntityGroup(System.String,System.Single,System.Int32,System.Single,System.Int32,GameFramework.Entity.IEntityGroupHelper)">
            <summary>
            增加实体组。
            </summary>
            <param name="entityGroupName">实体组名称。</param>
            <param name="instanceAutoReleaseInterval">实体实例对象池自动释放可释放对象的间隔秒数。</param>
            <param name="instanceCapacity">实体实例对象池容量。</param>
            <param name="instanceExpireTime">实体实例对象池对象过期秒数。</param>
            <param name="instancePriority">实体实例对象池的优先级。</param>
            <param name="entityGroupHelper">实体组辅助器。</param>
            <returns>是否增加实体组成功。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HasEntity(System.Int32)">
            <summary>
            是否存在实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HasEntity(System.String)">
            <summary>
            是否存在实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>是否存在实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetEntity(System.Int32)">
            <summary>
            获取实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetEntity(System.String)">
            <summary>
            获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetEntities(System.String)">
            <summary>
            获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <returns>要获取的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetEntities(System.String,System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            获取实体。
            </summary>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="results">要获取的实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetAllLoadedEntities">
            <summary>
            获取所有已加载的实体。
            </summary>
            <returns>所有已加载的实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetAllLoadedEntities(System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            获取所有已加载的实体。
            </summary>
            <param name="results">所有已加载的实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetAllLoadingEntityIds">
            <summary>
            获取所有正在加载实体的编号。
            </summary>
            <returns>所有正在加载实体的编号。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetAllLoadingEntityIds(System.Collections.Generic.List{System.Int32})">
            <summary>
            获取所有正在加载实体的编号。
            </summary>
            <param name="results">所有正在加载实体的编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.IsLoadingEntity(System.Int32)">
            <summary>
            是否正在加载实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <returns>是否正在加载实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.IsValidEntity(GameFramework.Entity.IEntity)">
            <summary>
            是否是合法的实体。
            </summary>
            <param name="entity">实体。</param>
            <returns>实体是否合法。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.ShowEntity(System.Int32,System.String,System.String)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.ShowEntity(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="priority">加载实体资源的优先级。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.ShowEntity(System.Int32,System.String,System.String,System.Object)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.ShowEntity(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            显示实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="priority">加载实体资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideEntity(System.Int32)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entityId">实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideEntity(System.Int32,System.Object)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideEntity(GameFramework.Entity.IEntity)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entity">实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideEntity(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            隐藏实体。
            </summary>
            <param name="entity">实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideAllLoadedEntities">
            <summary>
            隐藏所有已加载的实体。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideAllLoadedEntities(System.Object)">
            <summary>
            隐藏所有已加载的实体。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.HideAllLoadingEntities">
            <summary>
            隐藏所有正在加载的实体。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetParentEntity(System.Int32)">
            <summary>
            获取父实体。
            </summary>
            <param name="childEntityId">要获取父实体的子实体的实体编号。</param>
            <returns>子实体的父实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetParentEntity(GameFramework.Entity.IEntity)">
            <summary>
            获取父实体。
            </summary>
            <param name="childEntity">要获取父实体的子实体。</param>
            <returns>子实体的父实体。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetChildEntities(System.Int32)">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntityId">要获取子实体的父实体的实体编号。</param>
            <returns>子实体数组。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetChildEntities(System.Int32,System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntityId">要获取子实体的父实体的实体编号。</param>
            <param name="results">子实体数组。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetChildEntities(GameFramework.Entity.IEntity)">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntity">要获取子实体的父实体。</param>
            <returns>子实体数组。</returns>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.GetChildEntities(GameFramework.Entity.IEntity,System.Collections.Generic.List{GameFramework.Entity.IEntity})">
            <summary>
            获取子实体。
            </summary>
            <param name="parentEntity">要获取子实体的父实体。</param>
            <param name="results">子实体数组。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(System.Int32,System.Int32)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(System.Int32,System.Int32,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(System.Int32,GameFramework.Entity.IEntity)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntity">被附加的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(System.Int32,GameFramework.Entity.IEntity,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntityId">要附加的子实体的实体编号。</param>
            <param name="parentEntity">被附加的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(GameFramework.Entity.IEntity,System.Int32)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(GameFramework.Entity.IEntity,System.Int32,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntityId">被附加的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(GameFramework.Entity.IEntity,GameFramework.Entity.IEntity)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntity">被附加的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.AttachEntity(GameFramework.Entity.IEntity,GameFramework.Entity.IEntity,System.Object)">
            <summary>
            附加子实体。
            </summary>
            <param name="childEntity">要附加的子实体。</param>
            <param name="parentEntity">被附加的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachEntity(System.Int32)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntityId">要解除的子实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachEntity(System.Int32,System.Object)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntityId">要解除的子实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachEntity(GameFramework.Entity.IEntity)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntity">要解除的子实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachEntity(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            解除子实体。
            </summary>
            <param name="childEntity">要解除的子实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachChildEntities(System.Int32)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntityId">被解除的父实体的实体编号。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachChildEntities(System.Int32,System.Object)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntityId">被解除的父实体的实体编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachChildEntities(GameFramework.Entity.IEntity)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntity">被解除的父实体。</param>
        </member>
        <member name="M:GameFramework.Entity.IEntityManager.DetachChildEntities(GameFramework.Entity.IEntity,System.Object)">
            <summary>
            解除所有子实体。
            </summary>
            <param name="parentEntity">被解除的父实体。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Entity.ShowEntityDependencyAssetEventArgs">
            <summary>
            显示实体时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.#ctor">
            <summary>
            初始化显示实体时加载依赖资源事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.EntityId">
            <summary>
            获取实体编号。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.EntityAssetName">
            <summary>
            获取实体资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.EntityGroupName">
            <summary>
            获取实体组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.Create(System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            创建显示实体时加载依赖资源事件。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的显示实体时加载依赖资源事件。</returns>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityDependencyAssetEventArgs.Clear">
            <summary>
            清理显示实体时加载依赖资源事件。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.ShowEntityFailureEventArgs">
            <summary>
            显示实体失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityFailureEventArgs.#ctor">
            <summary>
            初始化显示实体失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityFailureEventArgs.EntityId">
            <summary>
            获取实体编号。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityFailureEventArgs.EntityAssetName">
            <summary>
            获取实体资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityFailureEventArgs.EntityGroupName">
            <summary>
            获取实体组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityFailureEventArgs.Create(System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            创建显示实体失败事件。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的显示实体失败事件。</returns>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityFailureEventArgs.Clear">
            <summary>
            清理显示实体失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.ShowEntitySuccessEventArgs">
            <summary>
            显示实体成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntitySuccessEventArgs.#ctor">
            <summary>
            初始化显示实体成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntitySuccessEventArgs.Entity">
            <summary>
            获取显示成功的实体。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntitySuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntitySuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntitySuccessEventArgs.Create(GameFramework.Entity.IEntity,System.Single,System.Object)">
            <summary>
            创建显示实体成功事件。
            </summary>
            <param name="entity">加载成功的实体。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的显示实体成功事件。</returns>
        </member>
        <member name="M:GameFramework.Entity.ShowEntitySuccessEventArgs.Clear">
            <summary>
            清理显示实体成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.Entity.ShowEntityUpdateEventArgs">
            <summary>
            显示实体更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityUpdateEventArgs.#ctor">
            <summary>
            初始化显示实体更新事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityUpdateEventArgs.EntityId">
            <summary>
            获取实体编号。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityUpdateEventArgs.EntityAssetName">
            <summary>
            获取实体资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityUpdateEventArgs.EntityGroupName">
            <summary>
            获取实体组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityUpdateEventArgs.Progress">
            <summary>
            获取显示实体进度。
            </summary>
        </member>
        <member name="P:GameFramework.Entity.ShowEntityUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityUpdateEventArgs.Create(System.Int32,System.String,System.String,System.Single,System.Object)">
            <summary>
            创建显示实体更新事件。
            </summary>
            <param name="entityId">实体编号。</param>
            <param name="entityAssetName">实体资源名称。</param>
            <param name="entityGroupName">实体组名称。</param>
            <param name="progress">显示实体进度。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的显示实体更新事件。</returns>
        </member>
        <member name="M:GameFramework.Entity.ShowEntityUpdateEventArgs.Clear">
            <summary>
            清理显示实体更新事件。
            </summary>
        </member>
        <member name="T:GameFramework.Event.EventManager">
            <summary>
            事件管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Event.EventManager.#ctor">
            <summary>
            初始化事件管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Event.EventManager.EventHandlerCount">
            <summary>
            获取事件处理函数的数量。
            </summary>
        </member>
        <member name="P:GameFramework.Event.EventManager.EventCount">
            <summary>
            获取事件数量。
            </summary>
        </member>
        <member name="P:GameFramework.Event.EventManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="M:GameFramework.Event.EventManager.Update(System.Single,System.Single)">
            <summary>
            事件管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Event.EventManager.Shutdown">
            <summary>
            关闭并清理事件管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Event.EventManager.Count(System.Int32)">
            <summary>
            获取事件处理函数的数量。
            </summary>
            <param name="id">事件类型编号。</param>
            <returns>事件处理函数的数量。</returns>
        </member>
        <member name="M:GameFramework.Event.EventManager.Check(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            检查是否存在事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要检查的事件处理函数。</param>
            <returns>是否存在事件处理函数。</returns>
        </member>
        <member name="M:GameFramework.Event.EventManager.Subscribe(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Event.EventManager.Unsubscribe(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            取消订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要取消订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Event.EventManager.SetDefaultHandler(System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            设置默认事件处理函数。
            </summary>
            <param name="handler">要设置的默认事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Event.EventManager.Fire(System.Object,GameFramework.Event.GameEventArgs)">
            <summary>
            抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:GameFramework.Event.EventManager.FireNow(System.Object,GameFramework.Event.GameEventArgs)">
            <summary>
            抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:GameFramework.Event.GameEventArgs">
            <summary>
            游戏逻辑事件基类。
            </summary>
        </member>
        <member name="T:GameFramework.Event.IEventManager">
            <summary>
            事件管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Event.IEventManager.EventHandlerCount">
            <summary>
            获取事件处理函数的数量。
            </summary>
        </member>
        <member name="P:GameFramework.Event.IEventManager.EventCount">
            <summary>
            获取事件数量。
            </summary>
        </member>
        <member name="M:GameFramework.Event.IEventManager.Count(System.Int32)">
            <summary>
            获取事件处理函数的数量。
            </summary>
            <param name="id">事件类型编号。</param>
            <returns>事件处理函数的数量。</returns>
        </member>
        <member name="M:GameFramework.Event.IEventManager.Check(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            检查是否存在事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要检查的事件处理函数。</param>
            <returns>是否存在事件处理函数。</returns>
        </member>
        <member name="M:GameFramework.Event.IEventManager.Subscribe(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Event.IEventManager.Unsubscribe(System.Int32,System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            取消订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要取消订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Event.IEventManager.SetDefaultHandler(System.EventHandler{GameFramework.Event.GameEventArgs})">
            <summary>
            设置默认事件处理函数。
            </summary>
            <param name="handler">要设置的默认事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Event.IEventManager.Fire(System.Object,GameFramework.Event.GameEventArgs)">
            <summary>
            抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:GameFramework.Event.IEventManager.FireNow(System.Object,GameFramework.Event.GameEventArgs)">
            <summary>
            抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:GameFramework.Fsm.Fsm`1">
            <summary>
            有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.#ctor">
            <summary>
            初始化有限状态机的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.Owner">
            <summary>
            获取有限状态机持有者。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.OwnerType">
            <summary>
            获取有限状态机持有者类型。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.FsmStateCount">
            <summary>
            获取有限状态机中状态的数量。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.IsRunning">
            <summary>
            获取有限状态机是否正在运行。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.IsDestroyed">
            <summary>
            获取有限状态机是否被销毁。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.CurrentState">
            <summary>
            获取当前有限状态机状态。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.CurrentStateName">
            <summary>
            获取当前有限状态机状态名称。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.Fsm`1.CurrentStateTime">
            <summary>
            获取当前有限状态机状态持续时间。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Create(System.String,`0,GameFramework.Fsm.FsmState{`0}[])">
            <summary>
            创建有限状态机。
            </summary>
            <param name="name">有限状态机名称。</param>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Create(System.String,`0,System.Collections.Generic.List{GameFramework.Fsm.FsmState{`0}})">
            <summary>
            创建有限状态机。
            </summary>
            <param name="name">有限状态机名称。</param>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Clear">
            <summary>
            清理有限状态机。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Start``1">
            <summary>
            开始有限状态机。
            </summary>
            <typeparam name="TState">要开始的有限状态机状态类型。</typeparam>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Start(System.Type)">
            <summary>
            开始有限状态机。
            </summary>
            <param name="stateType">要开始的有限状态机状态类型。</param>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.HasState``1">
            <summary>
            是否存在有限状态机状态。
            </summary>
            <typeparam name="TState">要检查的有限状态机状态类型。</typeparam>
            <returns>是否存在有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.HasState(System.Type)">
            <summary>
            是否存在有限状态机状态。
            </summary>
            <param name="stateType">要检查的有限状态机状态类型。</param>
            <returns>是否存在有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.GetState``1">
            <summary>
            获取有限状态机状态。
            </summary>
            <typeparam name="TState">要获取的有限状态机状态类型。</typeparam>
            <returns>要获取的有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.GetState(System.Type)">
            <summary>
            获取有限状态机状态。
            </summary>
            <param name="stateType">要获取的有限状态机状态类型。</param>
            <returns>要获取的有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.GetAllStates">
            <summary>
            获取有限状态机的所有状态。
            </summary>
            <returns>有限状态机的所有状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.GetAllStates(System.Collections.Generic.List{GameFramework.Fsm.FsmState{`0}})">
            <summary>
            获取有限状态机的所有状态。
            </summary>
            <param name="results">有限状态机的所有状态。</param>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.HasData(System.String)">
            <summary>
            是否存在有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>有限状态机数据是否存在。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.GetData``1(System.String)">
            <summary>
            获取有限状态机数据。
            </summary>
            <typeparam name="TData">要获取的有限状态机数据的类型。</typeparam>
            <param name="name">有限状态机数据名称。</param>
            <returns>要获取的有限状态机数据。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.GetData(System.String)">
            <summary>
            获取有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>要获取的有限状态机数据。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.SetData``1(System.String,``0)">
            <summary>
            设置有限状态机数据。
            </summary>
            <typeparam name="TData">要设置的有限状态机数据的类型。</typeparam>
            <param name="name">有限状态机数据名称。</param>
            <param name="data">要设置的有限状态机数据。</param>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.SetData(System.String,GameFramework.Variable)">
            <summary>
            设置有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <param name="data">要设置的有限状态机数据。</param>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.RemoveData(System.String)">
            <summary>
            移除有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>是否移除有限状态机数据成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Update(System.Single,System.Single)">
            <summary>
            有限状态机轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.Shutdown">
            <summary>
            关闭并清理有限状态机。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.ChangeState``1">
            <summary>
            切换当前有限状态机状态。
            </summary>
            <typeparam name="TState">要切换到的有限状态机状态类型。</typeparam>
        </member>
        <member name="M:GameFramework.Fsm.Fsm`1.ChangeState(System.Type)">
            <summary>
            切换当前有限状态机状态。
            </summary>
            <param name="stateType">要切换到的有限状态机状态类型。</param>
        </member>
        <member name="T:GameFramework.Fsm.FsmBase">
            <summary>
            有限状态机基类。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmBase.#ctor">
            <summary>
            初始化有限状态机基类的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.Name">
            <summary>
            获取有限状态机名称。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.FullName">
            <summary>
            获取有限状态机完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.OwnerType">
            <summary>
            获取有限状态机持有者类型。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.FsmStateCount">
            <summary>
            获取有限状态机中状态的数量。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.IsRunning">
            <summary>
            获取有限状态机是否正在运行。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.IsDestroyed">
            <summary>
            获取有限状态机是否被销毁。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.CurrentStateName">
            <summary>
            获取当前有限状态机状态名称。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmBase.CurrentStateTime">
            <summary>
            获取当前有限状态机状态持续时间。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmBase.Update(System.Single,System.Single)">
            <summary>
            有限状态机轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">当前已流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmBase.Shutdown">
            <summary>
            关闭并清理有限状态机。
            </summary>
        </member>
        <member name="T:GameFramework.Fsm.FsmManager">
            <summary>
            有限状态机管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.#ctor">
            <summary>
            初始化有限状态机管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.FsmManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Fsm.FsmManager.Count">
            <summary>
            获取有限状态机数量。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.Update(System.Single,System.Single)">
            <summary>
            有限状态机管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.Shutdown">
            <summary>
            关闭并清理有限状态机管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.HasFsm``1">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.HasFsm(System.Type)">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.HasFsm``1(System.String)">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.HasFsm(System.Type,System.String)">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <param name="name">有限状态机名称。</param>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.GetFsm``1">
            <summary>
            获取有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.GetFsm(System.Type)">
            <summary>
            获取有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.GetFsm``1(System.String)">
            <summary>
            获取有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.GetFsm(System.Type,System.String)">
            <summary>
            获取有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <param name="name">有限状态机名称。</param>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.GetAllFsms">
            <summary>
            获取所有有限状态机。
            </summary>
            <returns>所有有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.GetAllFsms(System.Collections.Generic.List{GameFramework.Fsm.FsmBase})">
            <summary>
            获取所有有限状态机。
            </summary>
            <param name="results">所有有限状态机。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.CreateFsm``1(``0,GameFramework.Fsm.FsmState{``0}[])">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.CreateFsm``1(System.String,``0,GameFramework.Fsm.FsmState{``0}[])">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.CreateFsm``1(``0,System.Collections.Generic.List{GameFramework.Fsm.FsmState{``0}})">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.CreateFsm``1(System.String,``0,System.Collections.Generic.List{GameFramework.Fsm.FsmState{``0}})">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.DestroyFsm``1">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.DestroyFsm(System.Type)">
            <summary>
            销毁有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.DestroyFsm``1(System.String)">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">要销毁的有限状态机名称。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.DestroyFsm(System.Type,System.String)">
            <summary>
            销毁有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <param name="name">要销毁的有限状态机名称。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.DestroyFsm``1(GameFramework.Fsm.IFsm{``0})">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="fsm">要销毁的有限状态机。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.FsmManager.DestroyFsm(GameFramework.Fsm.FsmBase)">
            <summary>
            销毁有限状态机。
            </summary>
            <param name="fsm">要销毁的有限状态机。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="T:GameFramework.Fsm.FsmState`1">
            <summary>
            有限状态机状态基类。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.#ctor">
            <summary>
            初始化有限状态机状态基类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnInit(GameFramework.Fsm.IFsm{`0})">
            <summary>
            有限状态机状态初始化时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnEnter(GameFramework.Fsm.IFsm{`0})">
            <summary>
            有限状态机状态进入时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnUpdate(GameFramework.Fsm.IFsm{`0},System.Single,System.Single)">
            <summary>
            有限状态机状态轮询时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnLeave(GameFramework.Fsm.IFsm{`0},System.Boolean)">
            <summary>
            有限状态机状态离开时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
            <param name="isShutdown">是否是关闭有限状态机时触发。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.OnDestroy(GameFramework.Fsm.IFsm{`0})">
            <summary>
            有限状态机状态销毁时调用。
            </summary>
            <param name="fsm">有限状态机引用。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.ChangeState``1(GameFramework.Fsm.IFsm{`0})">
            <summary>
            切换当前有限状态机状态。
            </summary>
            <typeparam name="TState">要切换到的有限状态机状态类型。</typeparam>
            <param name="fsm">有限状态机引用。</param>
        </member>
        <member name="M:GameFramework.Fsm.FsmState`1.ChangeState(GameFramework.Fsm.IFsm{`0},System.Type)">
            <summary>
            切换当前有限状态机状态。
            </summary>
            <param name="fsm">有限状态机引用。</param>
            <param name="stateType">要切换到的有限状态机状态类型。</param>
        </member>
        <member name="T:GameFramework.Fsm.IFsm`1">
            <summary>
            有限状态机接口。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.Name">
            <summary>
            获取有限状态机名称。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.FullName">
            <summary>
            获取有限状态机完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.Owner">
            <summary>
            获取有限状态机持有者。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.FsmStateCount">
            <summary>
            获取有限状态机中状态的数量。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.IsRunning">
            <summary>
            获取有限状态机是否正在运行。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.IsDestroyed">
            <summary>
            获取有限状态机是否被销毁。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.CurrentState">
            <summary>
            获取当前有限状态机状态。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsm`1.CurrentStateTime">
            <summary>
            获取当前有限状态机状态持续时间。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.Start``1">
            <summary>
            开始有限状态机。
            </summary>
            <typeparam name="TState">要开始的有限状态机状态类型。</typeparam>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.Start(System.Type)">
            <summary>
            开始有限状态机。
            </summary>
            <param name="stateType">要开始的有限状态机状态类型。</param>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.HasState``1">
            <summary>
            是否存在有限状态机状态。
            </summary>
            <typeparam name="TState">要检查的有限状态机状态类型。</typeparam>
            <returns>是否存在有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.HasState(System.Type)">
            <summary>
            是否存在有限状态机状态。
            </summary>
            <param name="stateType">要检查的有限状态机状态类型。</param>
            <returns>是否存在有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.GetState``1">
            <summary>
            获取有限状态机状态。
            </summary>
            <typeparam name="TState">要获取的有限状态机状态类型。</typeparam>
            <returns>要获取的有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.GetState(System.Type)">
            <summary>
            获取有限状态机状态。
            </summary>
            <param name="stateType">要获取的有限状态机状态类型。</param>
            <returns>要获取的有限状态机状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.GetAllStates">
            <summary>
            获取有限状态机的所有状态。
            </summary>
            <returns>有限状态机的所有状态。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.GetAllStates(System.Collections.Generic.List{GameFramework.Fsm.FsmState{`0}})">
            <summary>
            获取有限状态机的所有状态。
            </summary>
            <param name="results">有限状态机的所有状态。</param>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.HasData(System.String)">
            <summary>
            是否存在有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>有限状态机数据是否存在。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.GetData``1(System.String)">
            <summary>
            获取有限状态机数据。
            </summary>
            <typeparam name="TData">要获取的有限状态机数据的类型。</typeparam>
            <param name="name">有限状态机数据名称。</param>
            <returns>要获取的有限状态机数据。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.GetData(System.String)">
            <summary>
            获取有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>要获取的有限状态机数据。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.SetData``1(System.String,``0)">
            <summary>
            设置有限状态机数据。
            </summary>
            <typeparam name="TData">要设置的有限状态机数据的类型。</typeparam>
            <param name="name">有限状态机数据名称。</param>
            <param name="data">要设置的有限状态机数据。</param>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.SetData(System.String,GameFramework.Variable)">
            <summary>
            设置有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <param name="data">要设置的有限状态机数据。</param>
        </member>
        <member name="M:GameFramework.Fsm.IFsm`1.RemoveData(System.String)">
            <summary>
            移除有限状态机数据。
            </summary>
            <param name="name">有限状态机数据名称。</param>
            <returns>是否移除有限状态机数据成功。</returns>
        </member>
        <member name="T:GameFramework.Fsm.IFsmManager">
            <summary>
            有限状态机管理器。
            </summary>
        </member>
        <member name="P:GameFramework.Fsm.IFsmManager.Count">
            <summary>
            获取有限状态机数量。
            </summary>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.HasFsm``1">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.HasFsm(System.Type)">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.HasFsm``1(System.String)">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.HasFsm(System.Type,System.String)">
            <summary>
            检查是否存在有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <param name="name">有限状态机名称。</param>
            <returns>是否存在有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.GetFsm``1">
            <summary>
            获取有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.GetFsm(System.Type)">
            <summary>
            获取有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.GetFsm``1(System.String)">
            <summary>
            获取有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.GetFsm(System.Type,System.String)">
            <summary>
            获取有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <param name="name">有限状态机名称。</param>
            <returns>要获取的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.GetAllFsms">
            <summary>
            获取所有有限状态机。
            </summary>
            <returns>所有有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.GetAllFsms(System.Collections.Generic.List{GameFramework.Fsm.FsmBase})">
            <summary>
            获取所有有限状态机。
            </summary>
            <param name="results">所有有限状态机。</param>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.CreateFsm``1(``0,GameFramework.Fsm.FsmState{``0}[])">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.CreateFsm``1(System.String,``0,GameFramework.Fsm.FsmState{``0}[])">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.CreateFsm``1(``0,System.Collections.Generic.List{GameFramework.Fsm.FsmState{``0}})">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.CreateFsm``1(System.String,``0,System.Collections.Generic.List{GameFramework.Fsm.FsmState{``0}})">
            <summary>
            创建有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">有限状态机名称。</param>
            <param name="owner">有限状态机持有者。</param>
            <param name="states">有限状态机状态集合。</param>
            <returns>要创建的有限状态机。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.DestroyFsm``1">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.DestroyFsm(System.Type)">
            <summary>
            销毁有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.DestroyFsm``1(System.String)">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="name">要销毁的有限状态机名称。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.DestroyFsm(System.Type,System.String)">
            <summary>
            销毁有限状态机。
            </summary>
            <param name="ownerType">有限状态机持有者类型。</param>
            <param name="name">要销毁的有限状态机名称。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.DestroyFsm``1(GameFramework.Fsm.IFsm{``0})">
            <summary>
            销毁有限状态机。
            </summary>
            <typeparam name="T">有限状态机持有者类型。</typeparam>
            <param name="fsm">要销毁的有限状态机。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="M:GameFramework.Fsm.IFsmManager.DestroyFsm(GameFramework.Fsm.FsmBase)">
            <summary>
            销毁有限状态机。
            </summary>
            <param name="fsm">要销毁的有限状态机。</param>
            <returns>是否销毁有限状态机成功。</returns>
        </member>
        <member name="T:GameFramework.Localization.ILocalizationHelper">
            <summary>
            本地化辅助器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.ILocalizationHelper.SystemLanguage">
            <summary>
            获取系统语言。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationHelper.LoadDictionary(System.String,System.Object,System.Object)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="dictionaryObject">字典对象。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否加载成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationHelper.ParseDictionary(System.Object,System.Object)">
            <summary>
            解析字典。
            </summary>
            <param name="dictionaryData">要解析的字典数据。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否解析字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationHelper.ReleaseDictionaryAsset(System.Object)">
            <summary>
            释放字典资源。
            </summary>
            <param name="dictionaryAsset">要释放的字典资源。</param>
        </member>
        <member name="T:GameFramework.Localization.ILocalizationManager">
            <summary>
            本地化管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.ILocalizationManager.Language">
            <summary>
            获取或设置本地化语言。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.ILocalizationManager.SystemLanguage">
            <summary>
            获取系统语言。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.ILocalizationManager.DictionaryCount">
            <summary>
            获取字典数量。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.ILocalizationManager.LoadDictionarySuccess">
            <summary>
            加载字典成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.ILocalizationManager.LoadDictionaryFailure">
            <summary>
            加载字典失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.ILocalizationManager.LoadDictionaryUpdate">
            <summary>
            加载字典更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.ILocalizationManager.LoadDictionaryDependencyAsset">
            <summary>
            加载字典时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.SetLocalizationHelper(GameFramework.Localization.ILocalizationHelper)">
            <summary>
            设置本地化辅助器。
            </summary>
            <param name="localizationHelper">本地化辅助器。</param>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.LoadDictionary(System.String)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.LoadDictionary(System.String,System.Int32)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="priority">加载字典资源的优先级。</param>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.LoadDictionary(System.String,System.Object)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.LoadDictionary(System.String,System.Int32,System.Object)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="priority">加载字典资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.ParseDictionary(System.Object)">
            <summary>
            解析字典。
            </summary>
            <param name="dictionaryData">要解析的字典数据。</param>
            <returns>是否解析字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.ParseDictionary(System.Object,System.Object)">
            <summary>
            解析字典。
            </summary>
            <param name="dictionaryData">要解析的字典数据。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否解析字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.GetString(System.String)">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.GetString(System.String,System.Object)">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <param name="arg0">字典参数 0。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.GetString(System.String,System.Object,System.Object)">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <param name="arg0">字典参数 0。</param>
            <param name="arg1">字典参数 1。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.GetString(System.String,System.Object,System.Object,System.Object)">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <param name="arg0">字典参数 0。</param>
            <param name="arg1">字典参数 1。</param>
            <param name="arg2">字典参数 2。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.GetString(System.String,System.Object[])">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <param name="args">字典参数。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.HasRawString(System.String)">
            <summary>
            是否存在字典。
            </summary>
            <param name="key">字典主键。</param>
            <returns>是否存在字典。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.GetRawString(System.String)">
            <summary>
            根据字典主键获取字典值。
            </summary>
            <param name="key">字典主键。</param>
            <returns>字典值。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.AddRawString(System.String,System.String)">
            <summary>
            增加字典。
            </summary>
            <param name="key">字典主键。</param>
            <param name="value">字典内容。</param>
            <returns>是否增加字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.RemoveRawString(System.String)">
            <summary>
            移除字典。
            </summary>
            <param name="key">字典主键。</param>
            <returns>是否移除字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.ILocalizationManager.RemoveAllRawStrings">
            <summary>
            清空所有字典。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.Language">
            <summary>
            本地化语言。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Unspecified">
            <summary>
            未指定。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Afrikaans">
            <summary>
            南非荷兰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Albanian">
            <summary>
            阿尔巴尼亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Arabic">
            <summary>
            阿拉伯语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Basque">
            <summary>
            巴斯克语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Belarusian">
            <summary>
            白俄罗斯语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Bulgarian">
            <summary>
            保加利亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Catalan">
            <summary>
            加泰罗尼亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.ChineseSimplified">
            <summary>
            简体中文。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.ChineseTraditional">
            <summary>
            繁体中文。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Croatian">
            <summary>
            克罗地亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Czech">
            <summary>
            捷克语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Danish">
            <summary>
            丹麦语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Dutch">
            <summary>
            荷兰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.English">
            <summary>
            英语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Estonian">
            <summary>
            爱沙尼亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Faroese">
            <summary>
            法罗语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Finnish">
            <summary>
            芬兰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.French">
            <summary>
            法语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Georgian">
            <summary>
            格鲁吉亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.German">
            <summary>
            德语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Greek">
            <summary>
            希腊语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Hebrew">
            <summary>
            希伯来语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Hungarian">
            <summary>
            匈牙利语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Icelandic">
            <summary>
            冰岛语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Indonesian">
            <summary>
            印尼语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Italian">
            <summary>
            意大利语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Japanese">
            <summary>
            日语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Korean">
            <summary>
            韩语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Latvian">
            <summary>
            拉脱维亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Lithuanian">
            <summary>
            立陶宛语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Macedonian">
            <summary>
            马其顿语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Malayalam">
            <summary>
            马拉雅拉姆语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Norwegian">
            <summary>
            挪威语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Persian">
            <summary>
            波斯语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Polish">
            <summary>
            波兰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.PortugueseBrazil">
            <summary>
            巴西葡萄牙语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.PortuguesePortugal">
            <summary>
            葡萄牙语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Romanian">
            <summary>
            罗马尼亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Russian">
            <summary>
            俄语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.SerboCroatian">
            <summary>
            塞尔维亚克罗地亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.SerbianCyrillic">
            <summary>
            塞尔维亚西里尔语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.SerbianLatin">
            <summary>
            塞尔维亚拉丁语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Slovak">
            <summary>
            斯洛伐克语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Slovenian">
            <summary>
            斯洛文尼亚语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Spanish">
            <summary>
            西班牙语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Swedish">
            <summary>
            瑞典语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Thai">
            <summary>
            泰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Turkish">
            <summary>
            土耳其语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Ukrainian">
            <summary>
            乌克兰语。
            </summary>
        </member>
        <member name="F:GameFramework.Localization.Language.Vietnamese">
            <summary>
            越南语。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs">
            <summary>
            加载字典时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.#ctor">
            <summary>
            初始化加载字典时加载依赖资源事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.DictionaryAssetName">
            <summary>
            获取字典资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.Create(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            创建加载字典时加载依赖资源事件。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载字典时加载依赖资源事件。</returns>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryDependencyAssetEventArgs.Clear">
            <summary>
            清理加载字典时加载依赖资源事件。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.LoadDictionaryFailureEventArgs">
            <summary>
            加载字典失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryFailureEventArgs.#ctor">
            <summary>
            初始化加载字典失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryFailureEventArgs.DictionaryAssetName">
            <summary>
            获取字典资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryFailureEventArgs.Create(System.String,System.String,System.Object)">
            <summary>
            创建加载字典失败事件。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载字典失败事件。</returns>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryFailureEventArgs.Clear">
            <summary>
            清理加载字典失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.LoadDictionarySuccessEventArgs">
            <summary>
            加载字典成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionarySuccessEventArgs.#ctor">
            <summary>
            初始化加载字典成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionarySuccessEventArgs.DictionaryAssetName">
            <summary>
            获取字典资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionarySuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionarySuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionarySuccessEventArgs.Create(System.String,System.Single,System.Object)">
            <summary>
            创建加载字典成功事件。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载字典成功事件。</returns>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionarySuccessEventArgs.Clear">
            <summary>
            清理加载字典成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.LoadDictionaryUpdateEventArgs">
            <summary>
            加载字典更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryUpdateEventArgs.#ctor">
            <summary>
            初始化加载字典更新事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryUpdateEventArgs.DictionaryAssetName">
            <summary>
            获取字典资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryUpdateEventArgs.Progress">
            <summary>
            获取加载字典进度。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LoadDictionaryUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryUpdateEventArgs.Create(System.String,System.Single,System.Object)">
            <summary>
            创建加载字典更新事件。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="progress">加载字典进度。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载字典更新事件。</returns>
        </member>
        <member name="M:GameFramework.Localization.LoadDictionaryUpdateEventArgs.Clear">
            <summary>
            清理加载字典更新事件。
            </summary>
        </member>
        <member name="T:GameFramework.Localization.LocalizationManager">
            <summary>
            本地化管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.#ctor">
            <summary>
            初始化本地化管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LocalizationManager.Language">
            <summary>
            获取或设置本地化语言。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LocalizationManager.SystemLanguage">
            <summary>
            获取系统语言。
            </summary>
        </member>
        <member name="P:GameFramework.Localization.LocalizationManager.DictionaryCount">
            <summary>
            获取字典数量。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.LocalizationManager.LoadDictionarySuccess">
            <summary>
            加载字典成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.LocalizationManager.LoadDictionaryFailure">
            <summary>
            加载字典失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.LocalizationManager.LoadDictionaryUpdate">
            <summary>
            加载字典更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Localization.LocalizationManager.LoadDictionaryDependencyAsset">
            <summary>
            加载字典时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.Update(System.Single,System.Single)">
            <summary>
            本地化管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.Shutdown">
            <summary>
            关闭并清理本地化管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.SetLocalizationHelper(GameFramework.Localization.ILocalizationHelper)">
            <summary>
            设置本地化辅助器。
            </summary>
            <param name="localizationHelper">本地化辅助器。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.LoadDictionary(System.String)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.LoadDictionary(System.String,System.Int32)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="priority">加载字典资源的优先级。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.LoadDictionary(System.String,System.Object)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.LoadDictionary(System.String,System.Int32,System.Object)">
            <summary>
            加载字典。
            </summary>
            <param name="dictionaryAssetName">字典资源名称。</param>
            <param name="priority">加载字典资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.ParseDictionary(System.Object)">
            <summary>
            解析字典。
            </summary>
            <param name="dictionaryData">要解析的字典数据。</param>
            <returns>是否解析字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.ParseDictionary(System.Object,System.Object)">
            <summary>
            解析字典。
            </summary>
            <param name="dictionaryData">要解析的字典数据。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>是否解析字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.GetString(System.String)">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.GetString(System.String,System.Object)">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <param name="arg0">字典参数 0。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.GetString(System.String,System.Object,System.Object)">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <param name="arg0">字典参数 0。</param>
            <param name="arg1">字典参数 1。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.GetString(System.String,System.Object,System.Object,System.Object)">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <param name="arg0">字典参数 0。</param>
            <param name="arg1">字典参数 1。</param>
            <param name="arg2">字典参数 2。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.GetString(System.String,System.Object[])">
            <summary>
            根据字典主键获取字典内容字符串。
            </summary>
            <param name="key">字典主键。</param>
            <param name="args">字典参数。</param>
            <returns>要获取的字典内容字符串。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.HasRawString(System.String)">
            <summary>
            是否存在字典。
            </summary>
            <param name="key">字典主键。</param>
            <returns>是否存在字典。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.GetRawString(System.String)">
            <summary>
            根据字典主键获取字典值。
            </summary>
            <param name="key">字典主键。</param>
            <returns>字典值。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.AddRawString(System.String,System.String)">
            <summary>
            增加字典。
            </summary>
            <param name="key">字典主键。</param>
            <param name="value">字典内容。</param>
            <returns>是否增加字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.RemoveRawString(System.String)">
            <summary>
            移除字典。
            </summary>
            <param name="key">字典主键。</param>
            <returns>是否移除字典成功。</returns>
        </member>
        <member name="M:GameFramework.Localization.LocalizationManager.RemoveAllRawStrings">
            <summary>
            清空所有字典。
            </summary>
        </member>
        <member name="T:GameFramework.Network.AddressFamily">
            <summary>
            网络地址类型。
            </summary>
        </member>
        <member name="F:GameFramework.Network.AddressFamily.Unknown">
            <summary>
            未知。
            </summary>
        </member>
        <member name="F:GameFramework.Network.AddressFamily.IPv4">
            <summary>
            IP 版本 4。
            </summary>
        </member>
        <member name="F:GameFramework.Network.AddressFamily.IPv6">
            <summary>
            IP 版本 6。
            </summary>
        </member>
        <member name="T:GameFramework.Network.INetworkChannel">
            <summary>
            网络频道接口。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.Name">
            <summary>
            获取网络频道名称。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.Socket">
            <summary>
            获取网络频道所使用的 Socket。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.Connected">
            <summary>
            获取是否已连接。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.ServiceType">
            <summary>
            获取网络服务类型。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.AddressFamily">
            <summary>
            获取网络地址类型。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.SendPacketCount">
            <summary>
            获取要发送的消息包数量。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.SentPacketCount">
            <summary>
            获取累计发送的消息包数量。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.ReceivePacketCount">
            <summary>
            获取已接收未处理的消息包数量。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.ReceivedPacketCount">
            <summary>
            获取累计已接收的消息包数量。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.ResetHeartBeatElapseSecondsWhenReceivePacket">
            <summary>
            获取或设置当收到消息包时是否重置心跳流逝时间。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.MissHeartBeatCount">
            <summary>
            获取丢失心跳的次数。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.HeartBeatInterval">
            <summary>
            获取或设置心跳间隔时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannel.HeartBeatElapseSeconds">
            <summary>
            获取心跳等待时长，以秒为单位。
            </summary>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.RegisterHandler(GameFramework.Network.IPacketHandler)">
            <summary>
            注册网络消息包处理函数。
            </summary>
            <param name="handler">要注册的网络消息包处理函数。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.SetDefaultHandler(System.EventHandler{GameFramework.Network.Packet})">
            <summary>
            设置默认事件处理函数。
            </summary>
            <param name="handler">要设置的默认事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Object)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Close">
            <summary>
            关闭网络频道。
            </summary>
        </member>
        <member name="M:GameFramework.Network.INetworkChannel.Send``1(``0)">
            <summary>
            向远程主机发送消息包。
            </summary>
            <typeparam name="T">消息包类型。</typeparam>
            <param name="packet">要发送的消息包。</param>
        </member>
        <member name="T:GameFramework.Network.INetworkChannelHelper">
            <summary>
            网络频道辅助器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkChannelHelper.PacketHeaderLength">
            <summary>
            获取消息包头长度。
            </summary>
        </member>
        <member name="M:GameFramework.Network.INetworkChannelHelper.Initialize(GameFramework.Network.INetworkChannel)">
            <summary>
            初始化网络频道辅助器。
            </summary>
            <param name="networkChannel">网络频道。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkChannelHelper.Shutdown">
            <summary>
            关闭并清理网络频道辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Network.INetworkChannelHelper.PrepareForConnecting">
            <summary>
            准备进行连接。
            </summary>
        </member>
        <member name="M:GameFramework.Network.INetworkChannelHelper.SendHeartBeat">
            <summary>
            发送心跳消息包。
            </summary>
            <returns>是否发送心跳消息包成功。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkChannelHelper.Serialize``1(``0,System.IO.Stream)">
            <summary>
            序列化消息包。
            </summary>
            <typeparam name="T">消息包类型。</typeparam>
            <param name="packet">要序列化的消息包。</param>
            <param name="destination">要序列化的目标流。</param>
            <returns>是否序列化成功。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkChannelHelper.DeserializePacketHeader(System.IO.Stream,System.Object@)">
            <summary>
            反序列消息包头。
            </summary>
            <param name="source">要反序列化的来源流。</param>
            <param name="customErrorData">用户自定义错误数据。</param>
            <returns>反序列化后的消息包头。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkChannelHelper.DeserializePacket(GameFramework.Network.IPacketHeader,System.IO.Stream,System.Object@)">
            <summary>
            反序列化消息包。
            </summary>
            <param name="packetHeader">消息包头。</param>
            <param name="source">要反序列化的来源流。</param>
            <param name="customErrorData">用户自定义错误数据。</param>
            <returns>反序列化后的消息包。</returns>
        </member>
        <member name="T:GameFramework.Network.INetworkManager">
            <summary>
            网络管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Network.INetworkManager.NetworkChannelCount">
            <summary>
            获取网络频道数量。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkConnected">
            <summary>
            网络连接成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkClosed">
            <summary>
            网络连接关闭事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkMissHeartBeat">
            <summary>
            网络心跳包丢失事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkError">
            <summary>
            网络错误事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.INetworkManager.NetworkCustomError">
            <summary>
            用户自定义网络错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.HasNetworkChannel(System.String)">
            <summary>
            检查是否存在网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>是否存在网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.GetNetworkChannel(System.String)">
            <summary>
            获取网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>要获取的网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.GetAllNetworkChannels">
            <summary>
            获取所有网络频道。
            </summary>
            <returns>所有网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.GetAllNetworkChannels(System.Collections.Generic.List{GameFramework.Network.INetworkChannel})">
            <summary>
            获取所有网络频道。
            </summary>
            <param name="results">所有网络频道。</param>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.CreateNetworkChannel(System.String,GameFramework.Network.ServiceType,GameFramework.Network.INetworkChannelHelper)">
            <summary>
            创建网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <param name="serviceType">网络服务类型。</param>
            <param name="networkChannelHelper">网络频道辅助器。</param>
            <returns>要创建的网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.INetworkManager.DestroyNetworkChannel(System.String)">
            <summary>
            销毁网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>是否销毁网络频道成功。</returns>
        </member>
        <member name="T:GameFramework.Network.IPacketHandler">
            <summary>
            网络消息包处理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Network.IPacketHandler.Id">
            <summary>
            获取网络消息包协议编号。
            </summary>
        </member>
        <member name="M:GameFramework.Network.IPacketHandler.Handle(System.Object,GameFramework.Network.Packet)">
            <summary>
            网络消息包处理函数。
            </summary>
            <param name="sender">网络消息包源。</param>
            <param name="packet">网络消息包内容。</param>
        </member>
        <member name="T:GameFramework.Network.IPacketHeader">
            <summary>
            网络消息包头接口。
            </summary>
        </member>
        <member name="P:GameFramework.Network.IPacketHeader.PacketLength">
            <summary>
            获取网络消息包长度。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkClosedEventArgs">
            <summary>
            网络连接关闭事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkClosedEventArgs.#ctor">
            <summary>
            初始化网络连接关闭事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkClosedEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkClosedEventArgs.Create(GameFramework.Network.INetworkChannel)">
            <summary>
            创建网络连接关闭事件。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <returns>创建的网络连接关闭事件。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkClosedEventArgs.Clear">
            <summary>
            清理网络连接关闭事件。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkConnectedEventArgs">
            <summary>
            网络连接成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkConnectedEventArgs.#ctor">
            <summary>
            初始化网络连接成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkConnectedEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkConnectedEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkConnectedEventArgs.Create(GameFramework.Network.INetworkChannel,System.Object)">
            <summary>
            创建网络连接成功事件。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的网络连接成功事件。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkConnectedEventArgs.Clear">
            <summary>
            清理网络连接成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkCustomErrorEventArgs">
            <summary>
            用户自定义网络错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkCustomErrorEventArgs.#ctor">
            <summary>
            初始化用户自定义网络错误事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkCustomErrorEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkCustomErrorEventArgs.CustomErrorData">
            <summary>
            获取用户自定义错误数据。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkCustomErrorEventArgs.Create(GameFramework.Network.INetworkChannel,System.Object)">
            <summary>
            创建用户自定义网络错误事件。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <param name="customErrorData">用户自定义错误数据。</param>
            <returns>创建的用户自定义网络错误事件。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkCustomErrorEventArgs.Clear">
            <summary>
            清理用户自定义网络错误事件。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkErrorCode">
            <summary>
            网络错误码。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.Unknown">
            <summary>
            未知错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.AddressFamilyError">
            <summary>
            地址族错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.SocketError">
            <summary>
            Socket 错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.ConnectError">
            <summary>
            连接错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.SendError">
            <summary>
            发送错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.ReceiveError">
            <summary>
            接收错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.SerializeError">
            <summary>
            序列化错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.DeserializePacketHeaderError">
            <summary>
            反序列化消息包头错误。
            </summary>
        </member>
        <member name="F:GameFramework.Network.NetworkErrorCode.DeserializePacketError">
            <summary>
            反序列化消息包错误。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkErrorEventArgs">
            <summary>
            网络错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkErrorEventArgs.#ctor">
            <summary>
            初始化网络错误事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkErrorEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkErrorEventArgs.ErrorCode">
            <summary>
            获取错误码。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkErrorEventArgs.SocketErrorCode">
            <summary>
            获取 Socket 错误码。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkErrorEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkErrorEventArgs.Create(GameFramework.Network.INetworkChannel,GameFramework.Network.NetworkErrorCode,System.Net.Sockets.SocketError,System.String)">
            <summary>
            创建网络错误事件。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <param name="errorCode">错误码。</param>
            <param name="socketErrorCode">Socket 错误码。</param>
            <param name="errorMessage">错误信息。</param>
            <returns>创建的网络错误事件。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkErrorEventArgs.Clear">
            <summary>
            清理网络错误事件。
            </summary>
        </member>
        <member name="T:GameFramework.Network.NetworkManager">
            <summary>
            网络管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.#ctor">
            <summary>
            初始化网络管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelCount">
            <summary>
            获取网络频道数量。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkConnected">
            <summary>
            网络连接成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkClosed">
            <summary>
            网络连接关闭事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkMissHeartBeat">
            <summary>
            网络心跳包丢失事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkError">
            <summary>
            网络错误事件。
            </summary>
        </member>
        <member name="E:GameFramework.Network.NetworkManager.NetworkCustomError">
            <summary>
            用户自定义网络错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.Update(System.Single,System.Single)">
            <summary>
            网络管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.Shutdown">
            <summary>
            关闭并清理网络管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.HasNetworkChannel(System.String)">
            <summary>
            检查是否存在网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>是否存在网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.GetNetworkChannel(System.String)">
            <summary>
            获取网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>要获取的网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.GetAllNetworkChannels">
            <summary>
            获取所有网络频道。
            </summary>
            <returns>所有网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.GetAllNetworkChannels(System.Collections.Generic.List{GameFramework.Network.INetworkChannel})">
            <summary>
            获取所有网络频道。
            </summary>
            <param name="results">所有网络频道。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.CreateNetworkChannel(System.String,GameFramework.Network.ServiceType,GameFramework.Network.INetworkChannelHelper)">
            <summary>
            创建网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <param name="serviceType">网络服务类型。</param>
            <param name="networkChannelHelper">网络频道辅助器。</param>
            <returns>要创建的网络频道。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.DestroyNetworkChannel(System.String)">
            <summary>
            销毁网络频道。
            </summary>
            <param name="name">网络频道名称。</param>
            <returns>是否销毁网络频道成功。</returns>
        </member>
        <member name="T:GameFramework.Network.NetworkManager.NetworkChannelBase">
            <summary>
            网络频道基类。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.#ctor(System.String,GameFramework.Network.INetworkChannelHelper)">
            <summary>
            初始化网络频道基类的新实例。
            </summary>
            <param name="name">网络频道名称。</param>
            <param name="networkChannelHelper">网络频道辅助器。</param>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.Name">
            <summary>
            获取网络频道名称。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.Socket">
            <summary>
            获取网络频道所使用的 Socket。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.Connected">
            <summary>
            获取是否已连接。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.ServiceType">
            <summary>
            获取网络服务类型。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.AddressFamily">
            <summary>
            获取网络地址类型。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.SendPacketCount">
            <summary>
            获取要发送的消息包数量。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.SentPacketCount">
            <summary>
            获取累计发送的消息包数量。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.ReceivePacketCount">
            <summary>
            获取已接收未处理的消息包数量。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.ReceivedPacketCount">
            <summary>
            获取累计已接收的消息包数量。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.ResetHeartBeatElapseSecondsWhenReceivePacket">
            <summary>
            获取或设置当收到消息包时是否重置心跳流逝时间。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.MissHeartBeatCount">
            <summary>
            获取丢失心跳的次数。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.HeartBeatInterval">
            <summary>
            获取或设置心跳间隔时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.NetworkChannelBase.HeartBeatElapseSeconds">
            <summary>
            获取心跳等待时长，以秒为单位。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.Update(System.Single,System.Single)">
            <summary>
            网络频道轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.Shutdown">
            <summary>
            关闭网络频道。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.RegisterHandler(GameFramework.Network.IPacketHandler)">
            <summary>
            注册网络消息包处理函数。
            </summary>
            <param name="handler">要注册的网络消息包处理函数。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.SetDefaultHandler(System.EventHandler{GameFramework.Network.Packet})">
            <summary>
            设置默认事件处理函数。
            </summary>
            <param name="handler">要设置的默认事件处理函数。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.Connect(System.Net.IPAddress,System.Int32,System.Object)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.Close">
            <summary>
            关闭连接并释放所有相关资源。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.Send``1(``0)">
            <summary>
            向远程主机发送消息包。
            </summary>
            <typeparam name="T">消息包类型。</typeparam>
            <param name="packet">要发送的消息包。</param>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.NetworkChannelBase.Dispose(System.Boolean)">
            <summary>
            释放资源。
            </summary>
            <param name="disposing">释放资源标记。</param>
        </member>
        <member name="T:GameFramework.Network.NetworkManager.TcpNetworkChannel">
            <summary>
            TCP 网络频道。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.TcpNetworkChannel.#ctor(System.String,GameFramework.Network.INetworkChannelHelper)">
            <summary>
            初始化网络频道的新实例。
            </summary>
            <param name="name">网络频道名称。</param>
            <param name="networkChannelHelper">网络频道辅助器。</param>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.TcpNetworkChannel.ServiceType">
            <summary>
            获取网络服务类型。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.TcpNetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Object)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Network.NetworkManager.TcpWithSyncReceiveNetworkChannel">
            <summary>
            使用同步接收的 TCP 网络频道。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.TcpWithSyncReceiveNetworkChannel.#ctor(System.String,GameFramework.Network.INetworkChannelHelper)">
            <summary>
            初始化网络频道的新实例。
            </summary>
            <param name="name">网络频道名称。</param>
            <param name="networkChannelHelper">网络频道辅助器。</param>
        </member>
        <member name="P:GameFramework.Network.NetworkManager.TcpWithSyncReceiveNetworkChannel.ServiceType">
            <summary>
            获取网络服务类型。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkManager.TcpWithSyncReceiveNetworkChannel.Connect(System.Net.IPAddress,System.Int32,System.Object)">
            <summary>
            连接到远程主机。
            </summary>
            <param name="ipAddress">远程主机的 IP 地址。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Network.NetworkMissHeartBeatEventArgs">
            <summary>
            网络心跳包丢失事件。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkMissHeartBeatEventArgs.#ctor">
            <summary>
            初始化网络心跳包丢失事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkMissHeartBeatEventArgs.NetworkChannel">
            <summary>
            获取网络频道。
            </summary>
        </member>
        <member name="P:GameFramework.Network.NetworkMissHeartBeatEventArgs.MissCount">
            <summary>
            获取心跳包已丢失次数。
            </summary>
        </member>
        <member name="M:GameFramework.Network.NetworkMissHeartBeatEventArgs.Create(GameFramework.Network.INetworkChannel,System.Int32)">
            <summary>
            创建网络心跳包丢失事件。
            </summary>
            <param name="networkChannel">网络频道。</param>
            <param name="missCount">心跳包已丢失次数。</param>
            <returns>创建的网络心跳包丢失事件。</returns>
        </member>
        <member name="M:GameFramework.Network.NetworkMissHeartBeatEventArgs.Clear">
            <summary>
            清理网络心跳包丢失事件。
            </summary>
        </member>
        <member name="T:GameFramework.Network.Packet">
            <summary>
            网络消息包基类。
            </summary>
        </member>
        <member name="T:GameFramework.Network.ServiceType">
            <summary>
            网络服务类型。
            </summary>
        </member>
        <member name="F:GameFramework.Network.ServiceType.Tcp">
            <summary>
            TCP 网络服务。
            </summary>
        </member>
        <member name="F:GameFramework.Network.ServiceType.TcpWithSyncReceive">
            <summary>
            使用同步接收的 TCP 网络服务。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.IObjectPool`1">
            <summary>
            对象池接口。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Name">
            <summary>
            获取对象池名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.FullName">
            <summary>
            获取对象池完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.ObjectType">
            <summary>
            获取对象池对象类型。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Count">
            <summary>
            获取对象池中对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.CanReleaseCount">
            <summary>
            获取对象池中能被释放的对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.AllowMultiSpawn">
            <summary>
            获取是否允许对象被多次获取。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.AutoReleaseInterval">
            <summary>
            获取或设置对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Capacity">
            <summary>
            获取或设置对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.ExpireTime">
            <summary>
            获取或设置对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Priority">
            <summary>
            获取或设置对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Register(`0,System.Boolean)">
            <summary>
            创建对象。
            </summary>
            <param name="obj">对象。</param>
            <param name="spawned">对象是否已被获取。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.CanSpawn">
            <summary>
            检查对象。
            </summary>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.CanSpawn(System.String)">
            <summary>
            检查对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Spawn">
            <summary>
            获取对象。
            </summary>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Spawn(System.String)">
            <summary>
            获取对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Unspawn(`0)">
            <summary>
            回收对象。
            </summary>
            <param name="obj">要回收的对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Unspawn(System.Object)">
            <summary>
            回收对象。
            </summary>
            <param name="target">要回收的对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetLocked(`0,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="obj">要设置被加锁的对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetLocked(System.Object,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="target">要设置被加锁的对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetPriority(`0,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="obj">要设置优先级的对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetPriority(System.Object,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="target">要设置优先级的对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release(System.Int32)">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release(GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release(System.Int32,GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.IObjectPoolManager">
            <summary>
            对象池管理器。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPoolManager.Count">
            <summary>
            获取对象池数量。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool``1">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool(System.Type)">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool``1(System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool(System.Type,System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool``1">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool(System.Type)">
            <summary>
            获取对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool``1(System.String)">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool(System.Type,System.String)">
            <summary>
            获取对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPools(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPools(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase},System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="results">要获取的对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetAllObjectPools">
            <summary>
            获取所有对象池。
            </summary>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetAllObjectPools(System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取所有对象池。
            </summary>
            <param name="results">所有对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetAllObjectPools(System.Boolean)">
            <summary>
            获取所有对象池。
            </summary>
            <param name="sort">是否根据对象池的优先级排序。</param>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetAllObjectPools(System.Boolean,System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取所有对象池。
            </summary>
            <param name="sort">是否根据对象池的优先级排序。</param>
            <param name="results">所有对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool``1">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool(System.Type)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool``1(System.String)">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">要销毁的对象池名称。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool(System.Type,System.String)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">要销毁的对象池名称。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool``1(GameFramework.ObjectPool.IObjectPool{``0})">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="objectPool">要销毁的对象池。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool(GameFramework.ObjectPool.ObjectPoolBase)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectPool">要销毁的对象池。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectBase">
            <summary>
            对象基类。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor">
            <summary>
            初始化对象基类的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Name">
            <summary>
            获取对象名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Target">
            <summary>
            获取对象。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Locked">
            <summary>
            获取或设置对象是否被加锁。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Priority">
            <summary>
            获取或设置对象的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.CustomCanReleaseFlag">
            <summary>
            获取自定义释放检查标记。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.LastUseTime">
            <summary>
            获取对象上次使用时间。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.Initialize(System.Object)">
            <summary>
            初始化对象基类。
            </summary>
            <param name="target">对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.Initialize(System.String,System.Object)">
            <summary>
            初始化对象基类。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.Initialize(System.String,System.Object,System.Boolean)">
            <summary>
            初始化对象基类。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
            <param name="locked">对象是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.Initialize(System.String,System.Object,System.Int32)">
            <summary>
            初始化对象基类。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
            <param name="priority">对象的优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.Initialize(System.String,System.Object,System.Boolean,System.Int32)">
            <summary>
            初始化对象基类。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
            <param name="locked">对象是否被加锁。</param>
            <param name="priority">对象的优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.Clear">
            <summary>
            清理对象基类。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.OnSpawn">
            <summary>
            获取对象时的事件。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.OnUnspawn">
            <summary>
            回收对象时的事件。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.Release(System.Boolean)">
            <summary>
            释放对象。
            </summary>
            <param name="isShutdown">是否是关闭对象池时触发。</param>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectInfo">
            <summary>
            对象信息。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectInfo.#ctor(System.String,System.Boolean,System.Boolean,System.Int32,System.DateTime,System.Int32)">
            <summary>
            初始化对象信息的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="locked">对象是否被加锁。</param>
            <param name="customCanReleaseFlag">对象自定义释放检查标记。</param>
            <param name="priority">对象的优先级。</param>
            <param name="lastUseTime">对象上次使用时间。</param>
            <param name="spawnCount">对象的获取计数。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.Name">
            <summary>
            获取对象名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.Locked">
            <summary>
            获取对象是否被加锁。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.CustomCanReleaseFlag">
            <summary>
            获取对象自定义释放检查标记。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.Priority">
            <summary>
            获取对象的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.LastUseTime">
            <summary>
            获取对象上次使用时间。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.IsInUse">
            <summary>
            获取对象是否正在使用。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.SpawnCount">
            <summary>
            获取对象的获取计数。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolBase">
            <summary>
            对象池基类。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.#ctor">
            <summary>
            初始化对象池基类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.#ctor(System.String)">
            <summary>
            初始化对象池基类的新实例。
            </summary>
            <param name="name">对象池名称。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Name">
            <summary>
            获取对象池名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.FullName">
            <summary>
            获取对象池完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.ObjectType">
            <summary>
            获取对象池对象类型。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Count">
            <summary>
            获取对象池中对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.CanReleaseCount">
            <summary>
            获取对象池中能被释放的对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.AllowMultiSpawn">
            <summary>
            获取是否允许对象被多次获取。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.AutoReleaseInterval">
            <summary>
            获取或设置对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Capacity">
            <summary>
            获取或设置对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.ExpireTime">
            <summary>
            获取或设置对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Priority">
            <summary>
            获取或设置对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.Release(System.Int32)">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.GetAllObjectInfos">
            <summary>
            获取所有对象信息。
            </summary>
            <returns>所有对象信息。</returns>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolManager">
            <summary>
            对象池管理器。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.#ctor">
            <summary>
            初始化对象池管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Count">
            <summary>
            获取对象池数量。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Update(System.Single,System.Single)">
            <summary>
            对象池管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Shutdown">
            <summary>
            关闭并清理对象池管理器。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool``1">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool(System.Type)">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool``1(System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool(System.Type,System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool``1">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool(System.Type)">
            <summary>
            获取对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool``1(System.String)">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool(System.Type,System.String)">
            <summary>
            获取对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPools(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPools(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase},System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="results">要获取的对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetAllObjectPools">
            <summary>
            获取所有对象池。
            </summary>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetAllObjectPools(System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取所有对象池。
            </summary>
            <param name="results">所有对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetAllObjectPools(System.Boolean)">
            <summary>
            获取所有对象池。
            </summary>
            <param name="sort">是否根据对象池的优先级排序。</param>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetAllObjectPools(System.Boolean,System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取所有对象池。
            </summary>
            <param name="sort">是否根据对象池的优先级排序。</param>
            <param name="results">所有对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool``1">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool(System.Type)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool``1(System.String)">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">要销毁的对象池名称。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool(System.Type,System.String)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">要销毁的对象池名称。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool``1(GameFramework.ObjectPool.IObjectPool{``0})">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="objectPool">要销毁的对象池。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool(GameFramework.ObjectPool.ObjectPoolBase)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectPool">要销毁的对象池。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolManager.Object`1">
            <summary>
            内部对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.#ctor">
            <summary>
            初始化内部对象的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Name">
            <summary>
            获取对象名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Locked">
            <summary>
            获取对象是否被加锁。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Priority">
            <summary>
            获取对象的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.CustomCanReleaseFlag">
            <summary>
            获取自定义释放检查标记。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.LastUseTime">
            <summary>
            获取对象上次使用时间。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.IsInUse">
            <summary>
            获取对象是否正在使用。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.SpawnCount">
            <summary>
            获取对象的获取计数。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Create(`0,System.Boolean)">
            <summary>
            创建内部对象。
            </summary>
            <param name="obj">对象。</param>
            <param name="spawned">对象是否已被获取。</param>
            <returns>创建的内部对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Clear">
            <summary>
            清理内部对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Peek">
            <summary>
            查看对象。
            </summary>
            <returns>对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Spawn">
            <summary>
            获取对象。
            </summary>
            <returns>对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Unspawn">
            <summary>
            回收对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Release(System.Boolean)">
            <summary>
            释放对象。
            </summary>
            <param name="isShutdown">是否是关闭对象池时触发。</param>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1">
            <summary>
            对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.#ctor(System.String,System.Boolean,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            初始化对象池的新实例。
            </summary>
            <param name="name">对象池名称。</param>
            <param name="allowMultiSpawn">是否允许对象被多次获取。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.ObjectType">
            <summary>
            获取对象池对象类型。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Count">
            <summary>
            获取对象池中对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.CanReleaseCount">
            <summary>
            获取对象池中能被释放的对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.AllowMultiSpawn">
            <summary>
            获取是否允许对象被多次获取。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.AutoReleaseInterval">
            <summary>
            获取或设置对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Capacity">
            <summary>
            获取或设置对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.ExpireTime">
            <summary>
            获取或设置对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Priority">
            <summary>
            获取或设置对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Register(`0,System.Boolean)">
            <summary>
            创建对象。
            </summary>
            <param name="obj">对象。</param>
            <param name="spawned">对象是否已被获取。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.CanSpawn">
            <summary>
            检查对象。
            </summary>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.CanSpawn(System.String)">
            <summary>
            检查对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Spawn">
            <summary>
            获取对象。
            </summary>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Spawn(System.String)">
            <summary>
            获取对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Unspawn(`0)">
            <summary>
            回收对象。
            </summary>
            <param name="obj">要回收的对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Unspawn(System.Object)">
            <summary>
            回收对象。
            </summary>
            <param name="target">要回收的对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetLocked(`0,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="obj">要设置被加锁的对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetLocked(System.Object,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="target">要设置被加锁的对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetPriority(`0,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="obj">要设置优先级的对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetPriority(System.Object,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="target">要设置优先级的对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release(System.Int32)">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release(GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release(System.Int32,GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.GetAllObjectInfos">
            <summary>
            获取所有对象信息。
            </summary>
            <returns>所有对象信息。</returns>
        </member>
        <member name="T:GameFramework.ObjectPool.ReleaseObjectFilterCallback`1">
            <summary>
            释放对象筛选函数。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="candidateObjects">要筛选的对象集合。</param>
            <param name="toReleaseCount">需要释放的对象数量。</param>
            <param name="expireTime">对象过期参考时间。</param>
            <returns>经筛选需要释放的对象集合。</returns>
        </member>
        <member name="T:GameFramework.Procedure.IProcedureManager">
            <summary>
            流程管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Procedure.IProcedureManager.CurrentProcedure">
            <summary>
            获取当前流程。
            </summary>
        </member>
        <member name="P:GameFramework.Procedure.IProcedureManager.CurrentProcedureTime">
            <summary>
            获取当前流程持续时间。
            </summary>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.Initialize(GameFramework.Fsm.IFsmManager,GameFramework.Procedure.ProcedureBase[])">
            <summary>
            初始化流程管理器。
            </summary>
            <param name="fsmManager">有限状态机管理器。</param>
            <param name="procedures">流程管理器包含的流程。</param>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.StartProcedure``1">
            <summary>
            开始流程。
            </summary>
            <typeparam name="T">要开始的流程类型。</typeparam>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.StartProcedure(System.Type)">
            <summary>
            开始流程。
            </summary>
            <param name="procedureType">要开始的流程类型。</param>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.HasProcedure``1">
            <summary>
            是否存在流程。
            </summary>
            <typeparam name="T">要检查的流程类型。</typeparam>
            <returns>是否存在流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.HasProcedure(System.Type)">
            <summary>
            是否存在流程。
            </summary>
            <param name="procedureType">要检查的流程类型。</param>
            <returns>是否存在流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.GetProcedure``1">
            <summary>
            获取流程。
            </summary>
            <typeparam name="T">要获取的流程类型。</typeparam>
            <returns>要获取的流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.IProcedureManager.GetProcedure(System.Type)">
            <summary>
            获取流程。
            </summary>
            <param name="procedureType">要获取的流程类型。</param>
            <returns>要获取的流程。</returns>
        </member>
        <member name="T:GameFramework.Procedure.ProcedureBase">
            <summary>
            流程基类。
            </summary>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureBase.OnInit(GameFramework.Fsm.IFsm{GameFramework.Procedure.IProcedureManager})">
            <summary>
            状态初始化时调用。
            </summary>
            <param name="procedureOwner">流程持有者。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureBase.OnEnter(GameFramework.Fsm.IFsm{GameFramework.Procedure.IProcedureManager})">
            <summary>
            进入状态时调用。
            </summary>
            <param name="procedureOwner">流程持有者。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureBase.OnUpdate(GameFramework.Fsm.IFsm{GameFramework.Procedure.IProcedureManager},System.Single,System.Single)">
            <summary>
            状态轮询时调用。
            </summary>
            <param name="procedureOwner">流程持有者。</param>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureBase.OnLeave(GameFramework.Fsm.IFsm{GameFramework.Procedure.IProcedureManager},System.Boolean)">
            <summary>
            离开状态时调用。
            </summary>
            <param name="procedureOwner">流程持有者。</param>
            <param name="isShutdown">是否是关闭状态机时触发。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureBase.OnDestroy(GameFramework.Fsm.IFsm{GameFramework.Procedure.IProcedureManager})">
            <summary>
            状态销毁时调用。
            </summary>
            <param name="procedureOwner">流程持有者。</param>
        </member>
        <member name="T:GameFramework.Procedure.ProcedureManager">
            <summary>
            流程管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.#ctor">
            <summary>
            初始化流程管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Procedure.ProcedureManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Procedure.ProcedureManager.CurrentProcedure">
            <summary>
            获取当前流程。
            </summary>
        </member>
        <member name="P:GameFramework.Procedure.ProcedureManager.CurrentProcedureTime">
            <summary>
            获取当前流程持续时间。
            </summary>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.Update(System.Single,System.Single)">
            <summary>
            流程管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.Shutdown">
            <summary>
            关闭并清理流程管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.Initialize(GameFramework.Fsm.IFsmManager,GameFramework.Procedure.ProcedureBase[])">
            <summary>
            初始化流程管理器。
            </summary>
            <param name="fsmManager">有限状态机管理器。</param>
            <param name="procedures">流程管理器包含的流程。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.StartProcedure``1">
            <summary>
            开始流程。
            </summary>
            <typeparam name="T">要开始的流程类型。</typeparam>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.StartProcedure(System.Type)">
            <summary>
            开始流程。
            </summary>
            <param name="procedureType">要开始的流程类型。</param>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.HasProcedure``1">
            <summary>
            是否存在流程。
            </summary>
            <typeparam name="T">要检查的流程类型。</typeparam>
            <returns>是否存在流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.HasProcedure(System.Type)">
            <summary>
            是否存在流程。
            </summary>
            <param name="procedureType">要检查的流程类型。</param>
            <returns>是否存在流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.GetProcedure``1">
            <summary>
            获取流程。
            </summary>
            <typeparam name="T">要获取的流程类型。</typeparam>
            <returns>要获取的流程。</returns>
        </member>
        <member name="M:GameFramework.Procedure.ProcedureManager.GetProcedure(System.Type)">
            <summary>
            获取流程。
            </summary>
            <param name="procedureType">要获取的流程类型。</param>
            <returns>要获取的流程。</returns>
        </member>
        <member name="T:GameFramework.Resource.ApplyResourcesCompleteCallback">
            <summary>
            使用可更新模式并应用资源包资源完成时的回调函数。
            </summary>
            <param name="resourcePackPath">应用的资源包路径。</param>
            <param name="result">应用资源包资源结果，全部成功为 true，否则为 false。</param>
        </member>
        <member name="T:GameFramework.Resource.CheckResourcesCompleteCallback">
            <summary>
            使用可更新模式并检查资源完成时的回调函数。
            </summary>
            <param name="removedCount">已移除的资源数量。</param>
            <param name="updateCount">可更新的资源数量。</param>
            <param name="updateTotalLength">可更新的资源总大小。</param>
            <param name="updateTotalZipLength">可更新的压缩后总大小。</param>
        </member>
        <member name="T:GameFramework.Resource.CheckVersionListResult">
            <summary>
            检查版本资源列表结果。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.CheckVersionListResult.Updated">
            <summary>
            已经是最新的。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.CheckVersionListResult.NeedUpdate">
            <summary>
            需要更新。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.Constant">
            <summary>
            资源相关常量。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.Constant.DefaultPriority">
            <summary>
            默认资源加载优先级。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.DecryptResourceCallback">
            <summary>
            解密资源回调函数。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">变体名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="storageInReadOnly">资源是否在只读区。</param>
            <param name="bytes">待解密的资源二进制流。</param>
            <returns>解密后的资源二进制流。</returns>
        </member>
        <member name="T:GameFramework.Resource.HasAssetResult">
            <summary>
            检查资源是否存在的结果。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.HasAssetResult.NotExist">
            <summary>
            资源不存在。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.HasAssetResult.NotReady">
            <summary>
            资源尚未准备完毕。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.HasAssetResult.Asset">
            <summary>
            存在资源。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.HasAssetResult.Binary">
            <summary>
            存在二进制资源。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ILoadResourceAgentHelper">
            <summary>
            加载资源代理辅助器接口。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperUpdate">
            <summary>
            加载资源代理辅助器异步加载资源更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperReadFileComplete">
            <summary>
            加载资源代理辅助器异步读取资源文件完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperReadBytesComplete">
            <summary>
            加载资源代理辅助器异步读取资源二进制流完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperParseBytesComplete">
            <summary>
            加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperLoadComplete">
            <summary>
            加载资源代理辅助器异步加载资源完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperError">
            <summary>
            加载资源代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.ReadFile(System.String)">
            <summary>
            通过加载资源代理辅助器开始异步读取资源文件。
            </summary>
            <param name="fullPath">要加载资源的完整路径名。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.ReadBytes(System.String)">
            <summary>
            通过加载资源代理辅助器开始异步读取资源二进制流。
            </summary>
            <param name="fullPath">要加载资源的完整路径名。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.ParseBytes(System.Byte[])">
            <summary>
            通过加载资源代理辅助器开始异步将资源二进制流转换为加载对象。
            </summary>
            <param name="bytes">要加载资源的二进制流。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.LoadAsset(System.Object,System.String,System.Type,System.Boolean)">
            <summary>
            通过加载资源代理辅助器开始异步加载资源。
            </summary>
            <param name="resource">资源。</param>
            <param name="assetName">要加载的资源名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="isScene">要加载的资源是否是场景。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.Reset">
            <summary>
            重置加载资源代理辅助器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.InitResourcesCompleteCallback">
            <summary>
            使用单机模式并初始化资源完成时的回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.IResourceGroup">
            <summary>
            资源组接口。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceGroup.Name">
            <summary>
            获取资源组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceGroup.Ready">
            <summary>
            获取资源组是否准备完毕。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceGroup.TotalCount">
            <summary>
            获取资源组包含资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceGroup.ReadyCount">
            <summary>
            获取资源组中已准备完成资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceGroup.TotalLength">
            <summary>
            获取资源组包含资源的总大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceGroup.TotalZipLength">
            <summary>
            获取资源组包含资源压缩后的总大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceGroup.ReadyLength">
            <summary>
            获取资源组中已准备完成资源的总大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceGroup.Progress">
            <summary>
            获取资源组的完成进度。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.IResourceGroup.GetResourceNames">
            <summary>
            获取资源组包含的资源名称列表。
            </summary>
            <returns>资源组包含的资源名称列表。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceGroup.GetResourceNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取资源组包含的资源名称列表。
            </summary>
            <param name="results">资源组包含的资源名称列表。</param>
        </member>
        <member name="T:GameFramework.Resource.IResourceHelper">
            <summary>
            资源辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.IResourceHelper.LoadBytes(System.String,GameFramework.Resource.LoadBytesCallbacks,System.Object)">
            <summary>
            直接从指定文件路径加载数据流。
            </summary>
            <param name="fileUri">文件路径。</param>
            <param name="loadBytesCallbacks">加载数据流回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceHelper.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceHelper.Release(System.Object)">
            <summary>
            释放资源。
            </summary>
            <param name="objectToRelease">要释放的资源。</param>
        </member>
        <member name="T:GameFramework.Resource.IResourceManager">
            <summary>
            资源管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ReadOnlyPath">
            <summary>
            获取资源只读区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ReadWritePath">
            <summary>
            获取资源读写区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceMode">
            <summary>
            获取资源模式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.CurrentVariant">
            <summary>
            获取当前变体。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.PackageVersionListSerializer">
            <summary>
            获取单机模式版本资源列表序列化器。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdatableVersionListSerializer">
            <summary>
            获取可更新模式版本资源列表序列化器。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ReadOnlyVersionListSerializer">
            <summary>
            获取本地只读区版本资源列表序列化器。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ReadWriteVersionListSerializer">
            <summary>
            获取本地读写区版本资源列表序列化器。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourcePackVersionListSerializer">
            <summary>
            获取资源包版本资源列表序列化器。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ApplicableGameVersion">
            <summary>
            获取当前资源适用的游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.InternalResourceVersion">
            <summary>
            获取当前内部资源版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceGroupCount">
            <summary>
            获取资源组数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdatePrefixUri">
            <summary>
            获取或设置资源更新下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.GenerateReadWriteVersionListLength">
            <summary>
            获取或设置每更新多少字节的资源，重新生成一次版本资源列表。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ApplyingResourcePackPath">
            <summary>
            获取正在应用的资源包路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ApplyWaitingCount">
            <summary>
            获取等待应用资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdateRetryCount">
            <summary>
            获取或设置资源更新重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdatingResourceGroup">
            <summary>
            获取正在更新的资源组。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdateWaitingCount">
            <summary>
            获取等待更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdateCandidateCount">
            <summary>
            获取候选更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdatingCount">
            <summary>
            获取正在更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadTotalAgentCount">
            <summary>
            获取加载资源代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadFreeAgentCount">
            <summary>
            获取可用加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadWorkingAgentCount">
            <summary>
            获取工作中加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadWaitingTaskCount">
            <summary>
            获取等待加载资源任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetPriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourcePriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceApplySuccess">
            <summary>
            资源应用成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceApplyFailure">
            <summary>
            资源应用失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateStart">
            <summary>
            资源更新开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateChanged">
            <summary>
            资源更新改变事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateSuccess">
            <summary>
            资源更新成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateFailure">
            <summary>
            资源更新失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetReadOnlyPath(System.String)">
            <summary>
            设置资源只读区路径。
            </summary>
            <param name="readOnlyPath">资源只读区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetReadWritePath(System.String)">
            <summary>
            设置资源读写区路径。
            </summary>
            <param name="readWritePath">资源读写区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetResourceMode(GameFramework.Resource.ResourceMode)">
            <summary>
            设置资源模式。
            </summary>
            <param name="resourceMode">资源模式。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetCurrentVariant(System.String)">
            <summary>
            设置当前变体。
            </summary>
            <param name="currentVariant">当前变体。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetDecryptResourceCallback(GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            设置解密资源回调函数。
            </summary>
            <param name="decryptResourceCallback">要设置的解密资源回调函数。</param>
            <remarks>如果不设置，将使用默认的解密资源回调函数。</remarks>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetResourceHelper(GameFramework.Resource.IResourceHelper)">
            <summary>
            设置资源辅助器。
            </summary>
            <param name="resourceHelper">资源辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.AddLoadResourceAgentHelper(GameFramework.Resource.ILoadResourceAgentHelper)">
            <summary>
            增加加载资源代理辅助器。
            </summary>
            <param name="loadResourceAgentHelper">要增加的加载资源代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.InitResources(GameFramework.Resource.InitResourcesCompleteCallback)">
            <summary>
            使用单机模式并初始化资源。
            </summary>
            <param name="initResourcesCompleteCallback">使用单机模式并初始化资源完成时的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.CheckVersionList(System.Int32)">
            <summary>
            使用可更新模式并检查版本资源列表。
            </summary>
            <param name="latestInternalResourceVersion">最新的内部资源版本号。</param>
            <returns>检查版本资源列表结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UpdateVersionList(System.Int32,System.Int32,System.Int32,System.Int32,GameFramework.Resource.UpdateVersionListCallbacks)">
            <summary>
            使用可更新模式并更新版本资源列表。
            </summary>
            <param name="versionListLength">版本资源列表大小。</param>
            <param name="versionListHashCode">版本资源列表哈希值。</param>
            <param name="versionListZipLength">版本资源列表压缩后大小。</param>
            <param name="versionListZipHashCode">版本资源列表压缩后哈希值。</param>
            <param name="updateVersionListCallbacks">版本资源列表更新回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.CheckResources(GameFramework.Resource.CheckResourcesCompleteCallback)">
            <summary>
            使用可更新模式并检查资源。
            </summary>
            <param name="checkResourcesCompleteCallback">使用可更新模式并检查资源完成时的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.ApplyResources(System.String,GameFramework.Resource.ApplyResourcesCompleteCallback)">
            <summary>
            使用可更新模式并应用资源包资源。
            </summary>
            <param name="resourcePackPath">要应用的资源包路径。</param>
            <param name="applyResourcesCompleteCallback">使用可更新模式并应用资源包资源完成时的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UpdateResources(GameFramework.Resource.UpdateResourcesCompleteCallback)">
            <summary>
            使用可更新模式并更新全部资源。
            </summary>
            <param name="updateResourcesCompleteCallback">使用可更新模式并更新默认资源组完成时的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UpdateResources(System.String,GameFramework.Resource.UpdateResourcesCompleteCallback)">
            <summary>
            使用可更新模式并更新指定资源组的资源。
            </summary>
            <param name="resourceGroupName">要更新的资源组名称。</param>
            <param name="updateResourcesCompleteCallback">使用可更新模式并更新指定资源组完成时的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.VerifyResourcePack(System.String)">
            <summary>
            校验资源包。
            </summary>
            <param name="resourcePackPath">要校验的资源包路径。</param>
            <returns>是否校验资源包成功。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.HasAsset(System.String)">
            <summary>
            检查资源是否存在。
            </summary>
            <param name="assetName">要检查资源的名称。</param>
            <returns>检查资源是否存在的结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Type,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Int32,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Type,System.Int32,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Type,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Int32,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Type,System.Int32,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UnloadAsset(System.Object)">
            <summary>
            卸载资源。
            </summary>
            <param name="asset">要卸载的资源。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadScene(System.String,System.Int32,GameFramework.Resource.LoadSceneCallbacks)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadScene(System.String,System.Int32,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetBinaryPath(System.String)">
            <summary>
            获取二进制资源的实际路径。
            </summary>
            <param name="binaryAssetName">要获取实际路径的二进制资源的名称。</param>
            <returns>二进制资源的实际路径。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetBinaryPath(System.String,System.Boolean@,System.String@)">
            <summary>
            获取二进制资源的实际路径。
            </summary>
            <param name="binaryAssetName">要获取实际路径的二进制资源的名称。</param>
            <param name="storageInReadOnly">资源是否在只读区。</param>
            <param name="relativePath">二进制资源相对于只读区或者读写区的相对路径。</param>
            <returns>获取二进制资源的实际路径是否成功。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadBinary(System.String,GameFramework.Resource.LoadBinaryCallbacks)">
            <summary>
            异步加载二进制资源。
            </summary>
            <param name="binaryAssetName">要加载二进制资源的名称。</param>
            <param name="loadBinaryCallbacks">加载二进制资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadBinary(System.String,GameFramework.Resource.LoadBinaryCallbacks,System.Object)">
            <summary>
            异步加载二进制资源。
            </summary>
            <param name="binaryAssetName">要加载二进制资源的名称。</param>
            <param name="loadBinaryCallbacks">加载二进制资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.HasResourceGroup(System.String)">
            <summary>
            检查资源组是否存在。
            </summary>
            <param name="resourceGroupName">要检查资源组的名称。</param>
            <returns>资源组是否存在。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetResourceGroup">
            <summary>
            获取默认资源组。
            </summary>
            <returns>默认资源组。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetResourceGroup(System.String)">
            <summary>
            获取资源组。
            </summary>
            <param name="resourceGroupName">要获取的资源组名称。</param>
            <returns>要获取的资源组。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.GetAllLoadAssetInfos">
            <summary>
            获取所有加载资源任务的信息。
            </summary>
            <returns>所有加载资源任务的信息。</returns>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetCallbacks">
            <summary>
            加载资源回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetUpdateCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetUpdateCallback">加载资源更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetDependencyAssetCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetDependencyAssetCallback">加载资源时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback,GameFramework.Resource.LoadAssetUpdateCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
            <param name="loadAssetUpdateCallback">加载资源更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback,GameFramework.Resource.LoadAssetDependencyAssetCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
            <param name="loadAssetDependencyAssetCallback">加载资源时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback,GameFramework.Resource.LoadAssetUpdateCallback,GameFramework.Resource.LoadAssetDependencyAssetCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
            <param name="loadAssetUpdateCallback">加载资源更新回调函数。</param>
            <param name="loadAssetDependencyAssetCallback">加载资源时加载依赖资源回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetSuccessCallback">
            <summary>
            获取加载资源成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetFailureCallback">
            <summary>
            获取加载资源失败回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetUpdateCallback">
            <summary>
            获取加载资源更新回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetDependencyAssetCallback">
            <summary>
            获取加载资源时加载依赖资源回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetDependencyAssetCallback">
            <summary>
            加载资源时加载依赖资源回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetFailureCallback">
            <summary>
            加载资源失败回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="status">加载资源状态。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetSuccessCallback">
            <summary>
            加载资源成功回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="asset">已加载的资源。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetUpdateCallback">
            <summary>
            加载资源更新回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="progress">加载资源进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadBinaryCallbacks">
            <summary>
            加载二进制资源回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadBinaryCallbacks.#ctor(GameFramework.Resource.LoadBinarySuccessCallback)">
            <summary>
            初始化加载二进制资源回调函数集的新实例。
            </summary>
            <param name="loadBinarySuccessCallback">加载二进制资源成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadBinaryCallbacks.#ctor(GameFramework.Resource.LoadBinarySuccessCallback,GameFramework.Resource.LoadBinaryFailureCallback)">
            <summary>
            初始化加载二进制资源回调函数集的新实例。
            </summary>
            <param name="loadBinarySuccessCallback">加载二进制资源成功回调函数。</param>
            <param name="loadBinaryFailureCallback">加载二进制资源失败回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadBinaryCallbacks.LoadBinarySuccessCallback">
            <summary>
            获取加载二进制资源成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadBinaryCallbacks.LoadBinaryFailureCallback">
            <summary>
            获取加载二进制资源失败回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadBinaryFailureCallback">
            <summary>
            加载二进制资源失败回调函数。
            </summary>
            <param name="binaryAssetName">要加载的二进制资源名称。</param>
            <param name="status">加载二进制资源状态。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadBinarySuccessCallback">
            <summary>
            加载二进制资源成功回调函数。
            </summary>
            <param name="binaryAssetName">要加载的二进制资源名称。</param>
            <param name="binaryBytes">已加载的二进制资源。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadBytesCallbacks">
            <summary>
            加载数据流回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadBytesCallbacks.#ctor(GameFramework.Resource.LoadBytesSuccessCallback)">
            <summary>
            初始化加载数据流回调函数集的新实例。
            </summary>
            <param name="loadBinarySuccessCallback">加载数据流成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadBytesCallbacks.#ctor(GameFramework.Resource.LoadBytesSuccessCallback,GameFramework.Resource.LoadBytesFailureCallback)">
            <summary>
            初始化加载数据流回调函数集的新实例。
            </summary>
            <param name="loadBytesSuccessCallback">加载数据流成功回调函数。</param>
            <param name="loadBytesFailureCallback">加载数据流失败回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadBytesCallbacks.LoadBytesSuccessCallback">
            <summary>
            获取加载数据流成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadBytesCallbacks.LoadBytesFailureCallback">
            <summary>
            获取加载数据流失败回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadBytesFailureCallback">
            <summary>
            加载数据流失败回调函数。
            </summary>
            <param name="fileUri">文件路径。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadBytesSuccessCallback">
            <summary>
            加载数据流成功回调函数。
            </summary>
            <param name="fileUri">文件路径。</param>
            <param name="bytes">数据流。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs">
            <summary>
            加载资源代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.#ctor">
            <summary>
            初始化加载资源代理辅助器错误事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.Status">
            <summary>
            获取加载资源状态。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.Create(GameFramework.Resource.LoadResourceStatus,System.String)">
            <summary>
            创建加载资源代理辅助器错误事件。
            </summary>
            <param name="status">加载资源状态。</param>
            <param name="errorMessage">错误信息。</param>
            <returns>创建的加载资源代理辅助器错误事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.Clear">
            <summary>
            清理加载资源代理辅助器错误事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步加载资源完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs.#ctor">
            <summary>
            初始化加载资源代理辅助器异步加载资源完成事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs.Asset">
            <summary>
            获取加载的资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs.Create(System.Object)">
            <summary>
            创建加载资源代理辅助器异步加载资源完成事件。
            </summary>
            <param name="asset">加载的资源。</param>
            <returns>创建的加载资源代理辅助器异步加载资源完成事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs.Clear">
            <summary>
            清理加载资源代理辅助器异步加载资源完成事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs.#ctor">
            <summary>
            初始化加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs.Resource">
            <summary>
            获取加载对象。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs.Create(System.Object)">
            <summary>
            创建加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件。
            </summary>
            <param name="resource">资源对象。</param>
            <returns>创建的加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs.Clear">
            <summary>
            清理加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步读取资源二进制流完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs.#ctor">
            <summary>
            初始化加载资源代理辅助器异步读取资源二进制流完成事件的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs.Create(System.Byte[])">
            <summary>
            创建加载资源代理辅助器异步读取资源二进制流完成事件。
            </summary>
            <param name="bytes">资源的二进制流。</param>
            <returns>创建的加载资源代理辅助器异步读取资源二进制流完成事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs.Clear">
            <summary>
            清理加载资源代理辅助器异步读取资源二进制流完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs.GetBytes">
            <summary>
            获取资源的二进制流。
            </summary>
            <returns>资源的二进制流。</returns>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步将资源文件转换为加载对象完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs.#ctor">
            <summary>
            初始化加载资源代理辅助器异步将资源文件转换为加载对象完成事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs.Resource">
            <summary>
            获取加载对象。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs.Create(System.Object)">
            <summary>
            创建加载资源代理辅助器异步将资源文件转换为加载对象完成事件。
            </summary>
            <param name="resource">资源对象。</param>
            <returns>创建的加载资源代理辅助器异步将资源文件转换为加载对象完成事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs.Clear">
            <summary>
            清理加载资源代理辅助器异步将资源文件转换为加载对象完成事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs">
            <summary>
            加载资源代理辅助器更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.#ctor">
            <summary>
            初始化加载资源代理辅助器更新事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.Type">
            <summary>
            获取进度类型。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.Progress">
            <summary>
            获取进度。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.Create(GameFramework.Resource.LoadResourceProgress,System.Single)">
            <summary>
            创建加载资源代理辅助器更新事件。
            </summary>
            <param name="type">进度类型。</param>
            <param name="progress">进度。</param>
            <returns>创建的加载资源代理辅助器更新事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.Clear">
            <summary>
            清理加载资源代理辅助器更新事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceProgress">
            <summary>
            加载资源进度类型。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.Unknown">
            <summary>
            未知类型。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.ReadResource">
            <summary>
            读取资源包。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.LoadResource">
            <summary>
            加载资源包。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.LoadAsset">
            <summary>
            加载资源。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.LoadScene">
            <summary>
            加载场景。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceStatus">
            <summary>
            加载资源状态。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.Success">
            <summary>
            加载资源完成。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.NotExist">
            <summary>
            资源不存在。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.NotReady">
            <summary>
            资源尚未准备完毕。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.DependencyError">
            <summary>
            依赖资源错误。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.TypeError">
            <summary>
            资源类型错误。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.AssetError">
            <summary>
            加载资源错误。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneCallbacks">
            <summary>
            加载场景回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneUpdateCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneUpdateCallback">加载场景更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneDependencyAssetCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneDependencyAssetCallback">加载场景时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback,GameFramework.Resource.LoadSceneUpdateCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
            <param name="loadSceneUpdateCallback">加载场景更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback,GameFramework.Resource.LoadSceneDependencyAssetCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
            <param name="loadSceneDependencyAssetCallback">加载场景时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback,GameFramework.Resource.LoadSceneUpdateCallback,GameFramework.Resource.LoadSceneDependencyAssetCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
            <param name="loadSceneUpdateCallback">加载场景更新回调函数。</param>
            <param name="loadSceneDependencyAssetCallback">加载场景时加载依赖资源回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneSuccessCallback">
            <summary>
            获取加载场景成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneFailureCallback">
            <summary>
            获取加载场景失败回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneUpdateCallback">
            <summary>
            获取加载场景更新回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneDependencyAssetCallback">
            <summary>
            获取加载场景时加载依赖资源回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneDependencyAssetCallback">
            <summary>
            加载场景时加载依赖资源回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneFailureCallback">
            <summary>
            加载场景失败回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="status">加载场景状态。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneSuccessCallback">
            <summary>
            加载场景成功回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneUpdateCallback">
            <summary>
            加载场景更新回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="progress">加载场景进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LocalVersionList">
            <summary>
            本地版本资源列表。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LocalVersionList.#ctor(GameFramework.Resource.LocalVersionList.Resource[])">
            <summary>
            初始化本地版本资源列表的新实例。
            </summary>
            <param name="resources">包含的资源集合。</param>
        </member>
        <member name="P:GameFramework.Resource.LocalVersionList.IsValid">
            <summary>
            获取本地版本资源列表是否有效。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LocalVersionList.GetResources">
            <summary>
            获取资源集合。
            </summary>
            <returns></returns>
        </member>
        <member name="T:GameFramework.Resource.LocalVersionList.Resource">
            <summary>
            资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LocalVersionList.Resource.#ctor(System.String,System.String,System.String,System.Byte,System.Int32,System.Int32)">
            <summary>
            初始化资源的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">资源变体名称。</param>
            <param name="extension">资源扩展名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源长度。</param>
            <param name="hashCode">资源哈希值。</param>
        </member>
        <member name="P:GameFramework.Resource.LocalVersionList.Resource.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LocalVersionList.Resource.Variant">
            <summary>
            获取资源变体名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LocalVersionList.Resource.Extension">
            <summary>
            获取资源扩展名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LocalVersionList.Resource.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LocalVersionList.Resource.Length">
            <summary>
            获取资源长度。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LocalVersionList.Resource.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.PackageVersionList">
            <summary>
            单机模式版本资源列表。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.PackageVersionList.Asset">
            <summary>
            资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionList.Asset.#ctor(System.String,System.Int32[])">
            <summary>
            初始化资源的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="dependencyAssetIndexes">资源包含的依赖资源索引集合。</param>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.Asset.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionList.Asset.GetDependencyAssetIndexes">
            <summary>
            获取资源包含的依赖资源索引集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionList.#ctor(System.String,System.Int32,GameFramework.Resource.PackageVersionList.Asset[],GameFramework.Resource.PackageVersionList.Resource[],GameFramework.Resource.PackageVersionList.ResourceGroup[])">
            <summary>
            初始化单机模式版本资源列表的新实例。
            </summary>
            <param name="applicableGameVersion">适配的游戏版本号。</param>
            <param name="internalResourceVersion">内部资源版本号。</param>
            <param name="assets">包含的资源集合。</param>
            <param name="resources">包含的资源集合。</param>
            <param name="resourceGroups">包含的资源组集合。</param>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.IsValid">
            <summary>
            获取单机模式版本资源列表是否有效。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.ApplicableGameVersion">
            <summary>
            获取适配的游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.InternalResourceVersion">
            <summary>
            获取内部资源版本号。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionList.GetAssets">
            <summary>
            获取包含的资源集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionList.GetResources">
            <summary>
            获取包含的资源集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionList.GetResourceGroups">
            <summary>
            获取包含的资源组集合。
            </summary>
            <returns></returns>
        </member>
        <member name="T:GameFramework.Resource.PackageVersionList.Resource">
            <summary>
            资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionList.Resource.#ctor(System.String,System.String,System.String,System.Byte,System.Int32,System.Int32,System.Int32[])">
            <summary>
            初始化资源的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">资源变体名称。</param>
            <param name="extension">资源扩展名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源长度。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="assetIndexes">资源包含的资源索引集合。</param>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.Resource.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.Resource.Variant">
            <summary>
            获取资源变体名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.Resource.Extension">
            <summary>
            获取资源扩展名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.Resource.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.Resource.Length">
            <summary>
            获取资源长度。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.Resource.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionList.Resource.GetAssetIndexes">
            <summary>
            获取资源包含的资源索引集合。
            </summary>
            <returns></returns>
        </member>
        <member name="T:GameFramework.Resource.PackageVersionList.ResourceGroup">
            <summary>
            资源组。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionList.ResourceGroup.#ctor(System.String,System.Int32[])">
            <summary>
            初始化资源组的新实例。
            </summary>
            <param name="name">资源组名称。</param>
            <param name="resourceIndexes">资源组包含的资源索引集合。</param>
        </member>
        <member name="P:GameFramework.Resource.PackageVersionList.ResourceGroup.Name">
            <summary>
            获取资源组名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionList.ResourceGroup.GetResourceIndexes">
            <summary>
            获取资源组包含的资源索引集合。
            </summary>
            <returns>资源组包含的资源索引集合。</returns>
        </member>
        <member name="T:GameFramework.Resource.PackageVersionListSerializer">
            <summary>
            单机模式版本资源列表序列化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionListSerializer.#ctor">
            <summary>
            初始化单机模式版本资源列表序列化器的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.PackageVersionListSerializer.GetHeader">
            <summary>
            获取单机模式版本资源列表头标识。
            </summary>
            <returns>单机模式版本资源列表头标识。</returns>
        </member>
        <member name="T:GameFramework.Resource.ReadOnlyVersionListSerializer">
            <summary>
            本地只读区版本资源列表序列化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ReadOnlyVersionListSerializer.#ctor">
            <summary>
            初始化本地只读区版本资源列表序列化器的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ReadOnlyVersionListSerializer.GetHeader">
            <summary>
            获取本地只读区版本资源列表头标识。
            </summary>
            <returns>本地只读区版本资源列表头标识。</returns>
        </member>
        <member name="T:GameFramework.Resource.ReadWriteVersionListSerializer">
            <summary>
            本地读写区版本资源列表序列化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ReadWriteVersionListSerializer.#ctor">
            <summary>
            初始化本地读写区版本资源列表序列化器的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ReadWriteVersionListSerializer.GetHeader">
            <summary>
            获取本地读写区版本资源列表头标识。
            </summary>
            <returns>本地读写区版本资源列表头标识。</returns>
        </member>
        <member name="T:GameFramework.Resource.ResourceApplyFailureEventArgs">
            <summary>
            资源应用失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceApplyFailureEventArgs.#ctor">
            <summary>
            初始化资源应用失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceApplyFailureEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceApplyFailureEventArgs.ResourcePackPath">
            <summary>
            获取资源包路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceApplyFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceApplyFailureEventArgs.Create(System.String,System.String,System.String)">
            <summary>
            创建资源应用失败事件。
            </summary>
            <param name="name">资源名称。</param>
            <param name="resourcePackPath">资源包路径。</param>
            <param name="errorMessage">错误信息。</param>
            <returns>创建的资源应用失败事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceApplyFailureEventArgs.Clear">
            <summary>
            清理资源应用失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceApplySuccessEventArgs">
            <summary>
            资源应用成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceApplySuccessEventArgs.#ctor">
            <summary>
            初始化资源应用成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceApplySuccessEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceApplySuccessEventArgs.ApplyPath">
            <summary>
            获取资源应用后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceApplySuccessEventArgs.ResourcePackPath">
            <summary>
            获取资源包路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceApplySuccessEventArgs.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceApplySuccessEventArgs.ZipLength">
            <summary>
            获取压缩后大小。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceApplySuccessEventArgs.Create(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            创建资源应用成功事件。
            </summary>
            <param name="name">资源名称。</param>
            <param name="applyPath">资源应用后存放路径。</param>
            <param name="resourcePackPath">资源包路径。</param>
            <param name="length">资源大小。</param>
            <param name="zipLength">压缩后大小。</param>
            <returns>创建的资源应用成功事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceApplySuccessEventArgs.Clear">
            <summary>
            清理资源应用成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager">
            <summary>
            资源管理器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.AssetInfo">
            <summary>
            资源信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AssetInfo.#ctor(System.String,GameFramework.Resource.ResourceManager.ResourceName,System.String[])">
            <summary>
            初始化资源信息的新实例。
            </summary>
            <param name="assetName">资源名称。</param>
            <param name="resourceName">所在资源名称。</param>
            <param name="dependencyAssetNames">依赖资源名称。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetInfo.AssetName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetInfo.ResourceName">
            <summary>
            获取所在资源名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AssetInfo.GetDependencyAssetNames">
            <summary>
            获取依赖资源名称。
            </summary>
            <returns>依赖资源名称。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.#ctor">
            <summary>
            初始化资源管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ReadOnlyPath">
            <summary>
            获取资源只读区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ReadWritePath">
            <summary>
            获取资源读写区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceMode">
            <summary>
            获取资源模式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.CurrentVariant">
            <summary>
            获取当前变体。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.PackageVersionListSerializer">
            <summary>
            获取单机模式版本资源列表序列化器。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdatableVersionListSerializer">
            <summary>
            获取可更新模式版本资源列表序列化器。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ReadOnlyVersionListSerializer">
            <summary>
            获取本地只读区版本资源列表序列化器。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ReadWriteVersionListSerializer">
            <summary>
            获取本地读写区版本资源列表序列化器。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourcePackVersionListSerializer">
            <summary>
            获取资源包版本资源列表序列化器。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ApplicableGameVersion">
            <summary>
            获取当前资源适用的游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.InternalResourceVersion">
            <summary>
            获取当前内部资源版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroupCount">
            <summary>
            获取资源组数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdatePrefixUri">
            <summary>
            获取或设置资源更新下载地址前缀。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.GenerateReadWriteVersionListLength">
            <summary>
            获取或设置每更新多少字节的资源，重新生成一次版本资源列表。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ApplyingResourcePackPath">
            <summary>
            获取正在应用的资源包路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ApplyWaitingCount">
            <summary>
            获取等待应用资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdateRetryCount">
            <summary>
            获取或设置资源更新重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdatingResourceGroup">
            <summary>
            获取正在更新的资源组。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdateWaitingCount">
            <summary>
            获取等待更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdateCandidateCount">
            <summary>
            获取候选更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdatingCount">
            <summary>
            获取正在更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadTotalAgentCount">
            <summary>
            获取加载资源代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadFreeAgentCount">
            <summary>
            获取可用加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadWorkingAgentCount">
            <summary>
            获取工作中加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadWaitingTaskCount">
            <summary>
            获取等待加载资源任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetPriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourcePriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceApplySuccess">
            <summary>
            资源应用成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceApplyFailure">
            <summary>
            资源应用失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateStart">
            <summary>
            资源更新开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateChanged">
            <summary>
            资源更新改变事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateSuccess">
            <summary>
            资源更新成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateFailure">
            <summary>
            资源更新失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.Update(System.Single,System.Single)">
            <summary>
            资源管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.Shutdown">
            <summary>
            关闭并清理资源管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetReadOnlyPath(System.String)">
            <summary>
            设置资源只读区路径。
            </summary>
            <param name="readOnlyPath">资源只读区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetReadWritePath(System.String)">
            <summary>
            设置资源读写区路径。
            </summary>
            <param name="readWritePath">资源读写区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetResourceMode(GameFramework.Resource.ResourceMode)">
            <summary>
            设置资源模式。
            </summary>
            <param name="resourceMode">资源模式。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetCurrentVariant(System.String)">
            <summary>
            设置当前变体。
            </summary>
            <param name="currentVariant">当前变体。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetDecryptResourceCallback(GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            设置解密资源回调函数。
            </summary>
            <param name="decryptResourceCallback">要设置的解密资源回调函数。</param>
            <remarks>如果不设置，将使用默认的解密资源回调函数。</remarks>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetResourceHelper(GameFramework.Resource.IResourceHelper)">
            <summary>
            设置资源辅助器。
            </summary>
            <param name="resourceHelper">资源辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AddLoadResourceAgentHelper(GameFramework.Resource.ILoadResourceAgentHelper)">
            <summary>
            增加加载资源代理辅助器。
            </summary>
            <param name="loadResourceAgentHelper">要增加的加载资源代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.InitResources(GameFramework.Resource.InitResourcesCompleteCallback)">
            <summary>
            使用单机模式并初始化资源。
            </summary>
            <param name="initResourcesCompleteCallback">使用单机模式并初始化资源完成时的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.CheckVersionList(System.Int32)">
            <summary>
            使用可更新模式并检查版本资源列表。
            </summary>
            <param name="latestInternalResourceVersion">最新的内部资源版本号。</param>
            <returns>检查版本资源列表结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UpdateVersionList(System.Int32,System.Int32,System.Int32,System.Int32,GameFramework.Resource.UpdateVersionListCallbacks)">
            <summary>
            使用可更新模式并更新版本资源列表。
            </summary>
            <param name="versionListLength">版本资源列表大小。</param>
            <param name="versionListHashCode">版本资源列表哈希值。</param>
            <param name="versionListZipLength">版本资源列表压缩后大小。</param>
            <param name="versionListZipHashCode">版本资源列表压缩后哈希值。</param>
            <param name="updateVersionListCallbacks">版本资源列表更新回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.CheckResources(GameFramework.Resource.CheckResourcesCompleteCallback)">
            <summary>
            使用可更新模式并检查资源。
            </summary>
            <param name="checkResourcesCompleteCallback">使用可更新模式并检查资源完成时的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ApplyResources(System.String,GameFramework.Resource.ApplyResourcesCompleteCallback)">
            <summary>
            使用可更新模式并应用资源包资源。
            </summary>
            <param name="resourcePackPath">要应用的资源包路径。</param>
            <param name="applyResourcesCompleteCallback">使用可更新模式并应用资源包资源完成时的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UpdateResources(GameFramework.Resource.UpdateResourcesCompleteCallback)">
            <summary>
            使用可更新模式并更新全部资源。
            </summary>
            <param name="updateResourcesCompleteCallback">使用可更新模式并更新默认资源组完成时的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UpdateResources(System.String,GameFramework.Resource.UpdateResourcesCompleteCallback)">
            <summary>
            使用可更新模式并更新指定资源组的资源。
            </summary>
            <param name="resourceGroupName">要更新的资源组名称。</param>
            <param name="updateResourcesCompleteCallback">使用可更新模式并更新指定资源组完成时的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VerifyResourcePack(System.String)">
            <summary>
            校验资源包。
            </summary>
            <param name="resourcePackPath">要校验的资源包路径。</param>
            <returns></returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.HasAsset(System.String)">
            <summary>
            检查资源是否存在。
            </summary>
            <param name="assetName">要检查资源的名称。</param>
            <returns>检查资源是否存在的结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Type,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Int32,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Type,System.Int32,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Type,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Int32,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Type,System.Int32,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UnloadAsset(System.Object)">
            <summary>
            卸载资源。
            </summary>
            <param name="asset">要卸载的资源。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadScene(System.String,System.Int32,GameFramework.Resource.LoadSceneCallbacks)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadScene(System.String,System.Int32,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetBinaryPath(System.String)">
            <summary>
            获取二进制资源的实际路径。
            </summary>
            <param name="binaryAssetName">要获取实际路径的二进制资源的名称。</param>
            <returns>二进制资源的实际路径。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetBinaryPath(System.String,System.Boolean@,System.String@)">
            <summary>
            获取二进制资源的实际路径。
            </summary>
            <param name="binaryAssetName">要获取实际路径的二进制资源的名称。</param>
            <param name="storageInReadOnly">资源是否在只读区。</param>
            <param name="relativePath">二进制资源相对于只读区或者读写区的相对路径。</param>
            <returns>获取二进制资源的实际路径是否成功。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadBinary(System.String,GameFramework.Resource.LoadBinaryCallbacks)">
            <summary>
            异步加载二进制资源。
            </summary>
            <param name="binaryAssetName">要加载二进制资源的名称。</param>
            <param name="loadBinaryCallbacks">加载二进制资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadBinary(System.String,GameFramework.Resource.LoadBinaryCallbacks,System.Object)">
            <summary>
            异步加载二进制资源。
            </summary>
            <param name="binaryAssetName">要加载二进制资源的名称。</param>
            <param name="loadBinaryCallbacks">加载二进制资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.HasResourceGroup(System.String)">
            <summary>
            检查资源组是否存在。
            </summary>
            <param name="resourceGroupName">要检查资源组的名称。</param>
            <returns>资源组是否存在。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetResourceGroup">
            <summary>
            获取默认资源组。
            </summary>
            <returns>默认资源组。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetResourceGroup(System.String)">
            <summary>
            获取资源组。
            </summary>
            <param name="resourceGroupName">要获取的资源组名称。</param>
            <returns>要获取的资源组。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.GetAllLoadAssetInfos">
            <summary>
            获取所有加载资源任务的信息。
            </summary>
            <returns>所有加载资源任务的信息。</returns>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.LoadType">
            <summary>
            资源加载方式类型。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromFile">
            <summary>
            使用文件方式加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromMemory">
            <summary>
            使用内存方式加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromMemoryAndQuickDecrypt">
            <summary>
            使用内存快速解密方式加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromMemoryAndDecrypt">
            <summary>
            使用内存解密方式加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromBinary">
            <summary>
            使用二进制方式加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromBinaryAndQuickDecrypt">
            <summary>
            使用二进制快速解密方式加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromBinaryAndDecrypt">
            <summary>
            使用二进制解密方式加载。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker">
            <summary>
            资源检查器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo">
            <summary>
            资源检查信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus">
            <summary>
            资源检查状态。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.Unknown">
            <summary>
            状态未知。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.NeedUpdate">
            <summary>
            需要更新。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.StorageInReadOnly">
            <summary>
            存在最新且已存放于只读区中。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.StorageInReadWrite">
            <summary>
            存在最新且已存放于读写区中。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.Unavailable">
            <summary>
            不适用于当前变体。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.Disuse">
            <summary>
            已废弃。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.#ctor(GameFramework.Resource.ResourceManager.ResourceName)">
            <summary>
            初始化资源检查信息的新实例。
            </summary>
            <param name="resourceName">资源名称。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.ResourceName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.ZipLength">
            <summary>
            获取压缩后大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.ZipHashCode">
            <summary>
            获取压缩后哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.Status">
            <summary>
            获取资源检查状态。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.NeedRemove">
            <summary>
            获取资源是否可以从读写区移除。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.SetVersionInfo(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置资源在版本中的信息。
            </summary>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">压缩后大小。</param>
            <param name="zipHashCode">压缩后哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.SetReadOnlyInfo(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32)">
            <summary>
            设置资源在只读区中的信息。
            </summary>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.SetReadWriteInfo(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32)">
            <summary>
            设置资源在读写区中的信息。
            </summary>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.RefreshStatus(System.String)">
            <summary>
            刷新资源信息状态。
            </summary>
            <param name="currentVariant">当前变体。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.LocalVersionInfo">
            <summary>
            本地资源状态信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.RemoteVersionInfo">
            <summary>
            远程资源状态信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化资源检查器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.Shutdown">
            <summary>
            关闭并清理资源检查器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.TryRecoverReadWriteVersionList">
            <summary>
            尝试恢复读写区版本资源列表。
            </summary>
            <returns>是否恢复成功。</returns>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceGroup">
            <summary>
            资源组。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceGroup.#ctor(System.String,System.Collections.Generic.Dictionary{GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.ResourceInfo})">
            <summary>
            初始化资源组的新实例。
            </summary>
            <param name="name">资源组名称。</param>
            <param name="resourceInfos">资源信息引用。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.Name">
            <summary>
            获取资源组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.Ready">
            <summary>
            获取资源组是否准备完毕。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.TotalCount">
            <summary>
            获取资源组包含资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.ReadyCount">
            <summary>
            获取资源组中已准备完成资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.TotalLength">
            <summary>
            获取资源组包含资源的总大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.TotalZipLength">
            <summary>
            获取资源组包含资源压缩后的总大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.ReadyLength">
            <summary>
            获取资源组中已准备完成资源的总大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceGroup.Progress">
            <summary>
            获取资源组的完成进度。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceGroup.GetResourceNames">
            <summary>
            获取资源组包含的资源名称列表。
            </summary>
            <returns>资源组包含的资源名称列表。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceGroup.GetResourceNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取资源组包含的资源名称列表。
            </summary>
            <param name="results">资源组包含的资源名称列表。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceGroup.InternalGetResourceNames">
            <summary>
            获取资源组包含的资源名称列表。
            </summary>
            <returns>资源组包含的资源名称列表。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceGroup.InternalGetResourceNames(System.Collections.Generic.List{GameFramework.Resource.ResourceManager.ResourceName})">
            <summary>
            获取资源组包含的资源名称列表。
            </summary>
            <param name="results">资源组包含的资源名称列表。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceGroup.HasResource(GameFramework.Resource.ResourceManager.ResourceName)">
            <summary>
            检查指定资源是否属于资源组。
            </summary>
            <param name="resourceName">要检查的资源的名称。</param>
            <returns>指定资源是否属于资源组。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceGroup.AddResource(GameFramework.Resource.ResourceManager.ResourceName,System.Int32,System.Int32)">
            <summary>
            向资源组中增加资源。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="length">资源大小。</param>
            <param name="zipLength">资源压缩后的大小。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceInfo">
            <summary>
            资源信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceInfo.#ctor(GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            初始化资源信息的新实例。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="storageInReadOnly">资源是否在只读区。</param>
            <param name="ready">资源是否准备完毕。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.ResourceName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.StorageInReadOnly">
            <summary>
            获取资源是否在只读区。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.Ready">
            <summary>
            获取资源是否准备完毕。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceInfo.MarkReady">
            <summary>
            标记资源准备完毕。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceIniter">
            <summary>
            资源初始化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化资源初始化器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.Shutdown">
            <summary>
            关闭并清理资源初始化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.InitResources(System.String)">
            <summary>
            初始化资源。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader">
            <summary>
            加载资源器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader.AssetObject">
            <summary>
            资源对象。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化加载资源器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.TotalAgentCount">
            <summary>
            获取加载资源代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.FreeAgentCount">
            <summary>
            获取可用加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.WorkingAgentCount">
            <summary>
            获取工作中加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.WaitingTaskCount">
            <summary>
            获取等待加载资源任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetPriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourcePriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.Update(System.Single,System.Single)">
            <summary>
            加载资源器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.Shutdown">
            <summary>
            关闭并清理加载资源器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.AddLoadResourceAgentHelper(GameFramework.Resource.ILoadResourceAgentHelper,GameFramework.Resource.IResourceHelper,System.String,System.String,GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            增加加载资源代理辅助器。
            </summary>
            <param name="loadResourceAgentHelper">要增加的加载资源代理辅助器。</param>
            <param name="resourceHelper">资源辅助器。</param>
            <param name="readOnlyPath">资源只读区路径。</param>
            <param name="readWritePath">资源读写区路径。</param>
            <param name="decryptResourceCallback">要设置的解密资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.HasAsset(System.String)">
            <summary>
            检查资源是否存在。
            </summary>
            <param name="assetName">要检查资源的名称。</param>
            <returns>检查资源是否存在的结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadAsset(System.String,System.Type,System.Int32,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.UnloadAsset(System.Object)">
            <summary>
            卸载资源。
            </summary>
            <param name="asset">要卸载的资源。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadScene(System.String,System.Int32,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.GetBinaryPath(System.String)">
            <summary>
            获取二进制资源的实际路径。
            </summary>
            <param name="binaryAssetName">要获取实际路径的二进制资源的名称。</param>
            <returns>二进制资源的实际路径。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.GetBinaryPath(System.String,System.Boolean@,System.String@)">
            <summary>
            获取二进制资源的实际路径。
            </summary>
            <param name="binaryAssetName">要获取实际路径的二进制资源的名称。</param>
            <param name="storageInReadOnly">资源是否在只读区。</param>
            <param name="relativePath">二进制资源相对于只读区或者读写区的相对路径。</param>
            <returns>获取二进制资源的实际路径是否成功。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadBinary(System.String,GameFramework.Resource.LoadBinaryCallbacks,System.Object)">
            <summary>
            异步加载二进制资源。
            </summary>
            <param name="binaryAssetName">要加载二进制资源的名称。</param>
            <param name="loadBinaryCallbacks">加载二进制资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.GetAllLoadAssetInfos">
            <summary>
            获取所有加载资源任务的信息。
            </summary>
            <returns>所有加载资源任务的信息。</returns>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent">
            <summary>
            加载资源代理。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.#ctor(GameFramework.Resource.ILoadResourceAgentHelper,GameFramework.Resource.IResourceHelper,GameFramework.Resource.ResourceManager.ResourceLoader,System.String,System.String,GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            初始化加载资源代理的新实例。
            </summary>
            <param name="loadResourceAgentHelper">加载资源代理辅助器。</param>
            <param name="resourceHelper">资源辅助器。</param>
            <param name="resourceLoader">加载资源器。</param>
            <param name="readOnlyPath">资源只读区路径。</param>
            <param name="readWritePath">资源读写区路径。</param>
            <param name="decryptResourceCallback">解密资源回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Task">
            <summary>
            获取加载资源任务。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Initialize">
            <summary>
            初始化加载资源代理。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Update(System.Single,System.Single)">
            <summary>
            加载资源代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Shutdown">
            <summary>
            关闭并清理加载资源代理。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Start(GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceTaskBase)">
            <summary>
            开始处理加载资源任务。
            </summary>
            <param name="task">要处理的加载资源任务。</param>
            <returns>开始处理任务的状态。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Reset">
            <summary>
            重置加载资源代理。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceObject">
            <summary>
            资源对象。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceName">
            <summary>
            资源名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceName.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化资源名称的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">变体名称。</param>
            <param name="extension">扩展名称。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceName.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceName.Variant">
            <summary>
            获取变体名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceName.Extension">
            <summary>
            获取扩展名称。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceNameComparer">
            <summary>
            资源名称比较器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceUpdater">
            <summary>
            资源更新器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyInfo">
            <summary>
            应用信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyInfo.#ctor(GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.LoadType,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            初始化应用信息的新实例。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="offset">资源偏移。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">压缩后大小。</param>
            <param name="zipHashCode">压缩后哈希值。</param>
            <param name="resourcePath">资源路径。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyInfo.ResourceName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyInfo.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyInfo.Offset">
            <summary>
            获取资源偏移。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyInfo.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyInfo.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyInfo.ZipLength">
            <summary>
            获取压缩后大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyInfo.ZipHashCode">
            <summary>
            获取压缩后哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyInfo.ResourcePath">
            <summary>
            获取资源路径。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化资源更新器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.GenerateReadWriteVersionListLength">
            <summary>
            获取或设置每更新多少字节的资源，重新生成一次版本资源列表。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyingResourcePackPath">
            <summary>
            获取正在应用的资源包路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyWaitingCount">
            <summary>
            获取等待应用资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateRetryCount">
            <summary>
            获取或设置资源更新重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdatingResourceGroup">
            <summary>
            获取正在更新的资源组。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateWaitingCount">
            <summary>
            获取等待更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateCandidateCount">
            <summary>
            获取候选更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdatingCount">
            <summary>
            获取正在更新资源数量。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.Update(System.Single,System.Single)">
            <summary>
            资源更新器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.Shutdown">
            <summary>
            关闭并清理资源更新器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.AddResourceUpdate(GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            增加资源更新。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">压缩后大小。</param>
            <param name="zipHashCode">压缩后哈希值。</param>
            <param name="resourcePath">资源路径。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.CheckResourceComplete(System.Boolean)">
            <summary>
            检查资源完成。
            </summary>
            <param name="needGenerateReadWriteVersionList">是否需要生成读写区版本资源列表。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.ApplyResources(System.String)">
            <summary>
            应用指定资源包的资源。
            </summary>
            <param name="resourcePackPath">要应用的资源包路径。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateResources(GameFramework.Resource.ResourceManager.ResourceGroup)">
            <summary>
            更新指定资源组的资源。
            </summary>
            <param name="resourceGroup">要更新的资源组。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo">
            <summary>
            更新信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.#ctor(GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            初始化更新信息的新实例。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">压缩后大小。</param>
            <param name="zipHashCode">压缩后哈希值。</param>
            <param name="resourcePath">资源路径。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.ResourceName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.ZipLength">
            <summary>
            获取压缩后大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.ZipHashCode">
            <summary>
            获取压缩后哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.ResourcePath">
            <summary>
            获取资源路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.RetryCount">
            <summary>
            获取或设置已重试次数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.VersionListProcessor">
            <summary>
            版本资源列表处理器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化版本资源列表处理器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.Shutdown">
            <summary>
            关闭并清理版本资源列表处理器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.CheckVersionList(System.Int32)">
            <summary>
            检查版本资源列表。
            </summary>
            <param name="latestInternalResourceVersion">最新的内部资源版本号。</param>
            <returns>检查版本资源列表结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.UpdateVersionList(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            更新版本资源列表。
            </summary>
            <param name="versionListLength">版本资源列表大小。</param>
            <param name="versionListHashCode">版本资源列表哈希值。</param>
            <param name="versionListZipLength">版本资源列表压缩后大小。</param>
            <param name="versionListZipHashCode">版本资源列表压缩后哈希值。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceMode">
            <summary>
            资源模式。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceMode.Unspecified">
            <summary>
            未指定。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceMode.Package">
            <summary>
            单机模式。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceMode.Updatable">
            <summary>
            预下载的可更新模式。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceMode.UpdatableWhilePlaying">
            <summary>
            使用时下载的可更新模式。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourcePackVersionList">
            <summary>
            资源包版本资源列表。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourcePackVersionList.#ctor(System.Int32,System.Int64,System.Int32,GameFramework.Resource.ResourcePackVersionList.Resource[])">
            <summary>
            初始化资源包版本资源列表的新实例。
            </summary>
            <param name="offset">资源数据偏移。</param>
            <param name="length">资源数据长度。</param>
            <param name="hashCode">资源数据哈希值。</param>
            <param name="resources">包含的资源集合。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.IsValid">
            <summary>
            获取资源包版本资源列表是否有效。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Offset">
            <summary>
            获取资源数据偏移。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Length">
            <summary>
            获取资源数据长度。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.HashCode">
            <summary>
            获取资源数据哈希值。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourcePackVersionList.GetResources">
            <summary>
            获取资源集合。
            </summary>
            <returns></returns>
        </member>
        <member name="T:GameFramework.Resource.ResourcePackVersionList.Resource">
            <summary>
            资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourcePackVersionList.Resource.#ctor(System.String,System.String,System.String,System.Byte,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化资源的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">资源变体名称。</param>
            <param name="extension">资源扩展名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="offset">资源偏移。</param>
            <param name="length">资源长度。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">资源压缩后长度。</param>
            <param name="zipHashCode">资源压缩后哈希值。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Resource.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Resource.Variant">
            <summary>
            获取资源变体名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Resource.Extension">
            <summary>
            获取资源扩展名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Resource.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Resource.Offset">
            <summary>
            获取资源偏移。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Resource.Length">
            <summary>
            获取资源长度。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Resource.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Resource.ZipLength">
            <summary>
            获取资源压缩后长度。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourcePackVersionList.Resource.ZipHashCode">
            <summary>
            获取资源压缩后哈希值。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourcePackVersionListSerializer">
            <summary>
            资源包版本资源列表序列化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourcePackVersionListSerializer.#ctor">
            <summary>
            初始化资源包版本资源列表序列化器的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourcePackVersionListSerializer.GetHeader">
            <summary>
            获取资源包版本资源列表头标识。
            </summary>
            <returns>资源包版本资源列表头标识。</returns>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateChangedEventArgs">
            <summary>
            资源更新改变事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateChangedEventArgs.#ctor">
            <summary>
            初始化资源更新改变事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.DownloadPath">
            <summary>
            获取资源下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.CurrentLength">
            <summary>
            获取当前下载大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.ZipLength">
            <summary>
            获取压缩后大小。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateChangedEventArgs.Create(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            创建资源更新改变事件。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadPath">资源下载后存放路径。</param>
            <param name="downloadUri">资源下载地址。</param>
            <param name="currentLength">当前下载大小。</param>
            <param name="zipLength">压缩后大小。</param>
            <returns>创建的资源更新改变事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateChangedEventArgs.Clear">
            <summary>
            清理资源更新改变事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateFailureEventArgs">
            <summary>
            资源更新失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateFailureEventArgs.#ctor">
            <summary>
            初始化资源更新失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.RetryCount">
            <summary>
            获取已重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.TotalRetryCount">
            <summary>
            获取设定的重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateFailureEventArgs.Create(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            创建资源更新失败事件。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="retryCount">已重试次数。</param>
            <param name="totalRetryCount">设定的重试次数。</param>
            <param name="errorMessage">错误信息。</param>
            <returns>创建的资源更新失败事件。</returns>
            <remarks>当已重试次数达到设定的重试次数时，将不再重试。</remarks>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateFailureEventArgs.Clear">
            <summary>
            清理资源更新失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateStartEventArgs">
            <summary>
            资源更新开始事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateStartEventArgs.#ctor">
            <summary>
            初始化资源更新开始事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.DownloadPath">
            <summary>
            获取资源下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.CurrentLength">
            <summary>
            获取当前下载大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.ZipLength">
            <summary>
            获取压缩后大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.RetryCount">
            <summary>
            获取已重试下载次数。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateStartEventArgs.Create(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建资源更新开始事件。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadPath">资源下载后存放路径。</param>
            <param name="downloadUri">资源下载地址。</param>
            <param name="currentLength">当前下载大小。</param>
            <param name="zipLength">压缩后大小。</param>
            <param name="retryCount">已重试下载次数。</param>
            <returns>创建的资源更新开始事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateStartEventArgs.Clear">
            <summary>
            清理资源更新开始事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateSuccessEventArgs">
            <summary>
            资源更新成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateSuccessEventArgs.#ctor">
            <summary>
            初始化资源更新成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.DownloadPath">
            <summary>
            获取资源下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.ZipLength">
            <summary>
            获取压缩后大小。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateSuccessEventArgs.Create(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            创建资源更新成功事件。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadPath">资源下载后存放路径。</param>
            <param name="downloadUri">资源下载地址。</param>
            <param name="length">资源大小。</param>
            <param name="zipLength">压缩后大小。</param>
            <returns>创建的资源更新成功事件。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateSuccessEventArgs.Clear">
            <summary>
            清理资源更新成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.UnloadSceneCallbacks">
            <summary>
            卸载场景回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UnloadSceneCallbacks.#ctor(GameFramework.Resource.UnloadSceneSuccessCallback)">
            <summary>
            初始化卸载场景回调函数集的新实例。
            </summary>
            <param name="unloadSceneSuccessCallback">卸载场景成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.UnloadSceneCallbacks.#ctor(GameFramework.Resource.UnloadSceneSuccessCallback,GameFramework.Resource.UnloadSceneFailureCallback)">
            <summary>
            初始化卸载场景回调函数集的新实例。
            </summary>
            <param name="unloadSceneSuccessCallback">卸载场景成功回调函数。</param>
            <param name="unloadSceneFailureCallback">卸载场景失败回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.UnloadSceneCallbacks.UnloadSceneSuccessCallback">
            <summary>
            获取卸载场景成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UnloadSceneCallbacks.UnloadSceneFailureCallback">
            <summary>
            获取卸载场景失败回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.UnloadSceneFailureCallback">
            <summary>
            卸载场景失败回调函数。
            </summary>
            <param name="sceneAssetName">要卸载的场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.UnloadSceneSuccessCallback">
            <summary>
            卸载场景成功回调函数。
            </summary>
            <param name="sceneAssetName">要卸载的场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.UpdatableVersionList">
            <summary>
            可更新模式版本资源列表。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.UpdatableVersionList.Asset">
            <summary>
            资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionList.Asset.#ctor(System.String,System.Int32[])">
            <summary>
            初始化资源的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="dependencyAssetIndexes">资源包含的依赖资源索引集合。</param>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.Asset.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionList.Asset.GetDependencyAssetIndexes">
            <summary>
            获取资源包含的依赖资源索引集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionList.#ctor(System.String,System.Int32,GameFramework.Resource.UpdatableVersionList.Asset[],GameFramework.Resource.UpdatableVersionList.Resource[],GameFramework.Resource.UpdatableVersionList.ResourceGroup[])">
            <summary>
            初始化可更新模式版本资源列表的新实例。
            </summary>
            <param name="applicableGameVersion">适配的游戏版本号。</param>
            <param name="internalResourceVersion">内部资源版本号。</param>
            <param name="assets">包含的资源集合。</param>
            <param name="resources">包含的资源集合。</param>
            <param name="resourceGroups">包含的资源组集合。</param>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.IsValid">
            <summary>
            获取可更新模式版本资源列表是否有效。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.ApplicableGameVersion">
            <summary>
            获取适配的游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.InternalResourceVersion">
            <summary>
            获取内部资源版本号。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionList.GetAssets">
            <summary>
            获取包含的资源集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionList.GetResources">
            <summary>
            获取包含的资源集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionList.GetResourceGroups">
            <summary>
            获取包含的资源组集合。
            </summary>
            <returns></returns>
        </member>
        <member name="T:GameFramework.Resource.UpdatableVersionList.Resource">
            <summary>
            资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionList.Resource.#ctor(System.String,System.String,System.String,System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            初始化资源的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">资源变体名称。</param>
            <param name="extension">资源扩展名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源长度。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">资源压缩后长度。</param>
            <param name="zipHashCode">资源压缩后哈希值。</param>
            <param name="assetIndexes">资源包含的资源索引集合。</param>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.Resource.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.Resource.Variant">
            <summary>
            获取资源变体名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.Resource.Extension">
            <summary>
            获取资源扩展名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.Resource.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.Resource.Length">
            <summary>
            获取资源长度。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.Resource.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.Resource.ZipLength">
            <summary>
            获取资源压缩后长度。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.Resource.ZipHashCode">
            <summary>
            获取资源压缩后哈希值。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionList.Resource.GetAssetIndexes">
            <summary>
            获取资源包含的资源索引集合。
            </summary>
            <returns></returns>
        </member>
        <member name="T:GameFramework.Resource.UpdatableVersionList.ResourceGroup">
            <summary>
            资源组。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionList.ResourceGroup.#ctor(System.String,System.Int32[])">
            <summary>
            初始化资源组的新实例。
            </summary>
            <param name="name">资源组名称。</param>
            <param name="resourceIndexes">资源组包含的资源索引集合。</param>
        </member>
        <member name="P:GameFramework.Resource.UpdatableVersionList.ResourceGroup.Name">
            <summary>
            获取资源组名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionList.ResourceGroup.GetResourceIndexes">
            <summary>
            获取资源组包含的资源索引集合。
            </summary>
            <returns>资源组包含的资源索引集合。</returns>
        </member>
        <member name="T:GameFramework.Resource.UpdatableVersionListSerializer">
            <summary>
            可更新模式版本资源列表序列化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionListSerializer.#ctor">
            <summary>
            初始化可更新模式版本资源列表序列化器的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdatableVersionListSerializer.GetHeader">
            <summary>
            获取可更新模式版本资源列表头标识。
            </summary>
            <returns>可更新模式版本资源列表头标识。</returns>
        </member>
        <member name="T:GameFramework.Resource.UpdateResourcesCompleteCallback">
            <summary>
            使用可更新模式并更新指定资源组完成时的回调函数。
            </summary>
            <param name="resourceGroup">更新的资源组。</param>
            <param name="result">更新资源结果，全部成功为 true，否则为 false。</param>
        </member>
        <member name="T:GameFramework.Resource.UpdateVersionListCallbacks">
            <summary>
            版本资源列表更新回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdateVersionListCallbacks.#ctor(GameFramework.Resource.UpdateVersionListSuccessCallback)">
            <summary>
            初始化版本资源列表更新回调函数集的新实例。
            </summary>
            <param name="updateVersionListSuccessCallback">版本资源列表更新成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.UpdateVersionListCallbacks.#ctor(GameFramework.Resource.UpdateVersionListSuccessCallback,GameFramework.Resource.UpdateVersionListFailureCallback)">
            <summary>
            初始化版本资源列表更新回调函数集的新实例。
            </summary>
            <param name="updateVersionListSuccessCallback">版本资源列表更新成功回调函数。</param>
            <param name="updateVersionListFailureCallback">版本资源列表更新失败回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.UpdateVersionListCallbacks.UpdateVersionListSuccessCallback">
            <summary>
            获取版本资源列表更新成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdateVersionListCallbacks.UpdateVersionListFailureCallback">
            <summary>
            获取版本资源列表更新失败回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.UpdateVersionListFailureCallback">
            <summary>
            版本资源列表更新失败回调函数。
            </summary>
            <param name="downloadUri">版本资源列表更新地址。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="T:GameFramework.Resource.UpdateVersionListSuccessCallback">
            <summary>
            版本资源列表更新成功回调函数。
            </summary>
            <param name="downloadPath">版本资源列表更新后存放路径。</param>
            <param name="downloadUri">版本资源列表更新地址。</param>
        </member>
        <member name="T:GameFramework.Scene.ISceneManager">
            <summary>
            场景管理器接口。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.LoadSceneSuccess">
            <summary>
            加载场景成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.LoadSceneFailure">
            <summary>
            加载场景失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.LoadSceneUpdate">
            <summary>
            加载场景更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.LoadSceneDependencyAsset">
            <summary>
            加载场景时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.UnloadSceneSuccess">
            <summary>
            卸载场景成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.ISceneManager.UnloadSceneFailure">
            <summary>
            卸载场景失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.SceneIsLoaded(System.String)">
            <summary>
            获取场景是否已加载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否已加载。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.GetLoadedSceneAssetNames">
            <summary>
            获取已加载场景的资源名称。
            </summary>
            <returns>已加载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.GetLoadedSceneAssetNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取已加载场景的资源名称。
            </summary>
            <param name="results">已加载场景的资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.SceneIsLoading(System.String)">
            <summary>
            获取场景是否正在加载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否正在加载。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.GetLoadingSceneAssetNames">
            <summary>
            获取正在加载场景的资源名称。
            </summary>
            <returns>正在加载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.GetLoadingSceneAssetNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取正在加载场景的资源名称。
            </summary>
            <param name="results">正在加载场景的资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.SceneIsUnloading(System.String)">
            <summary>
            获取场景是否正在卸载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否正在卸载。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.GetUnloadingSceneAssetNames">
            <summary>
            获取正在卸载场景的资源名称。
            </summary>
            <returns>正在卸载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.GetUnloadingSceneAssetNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取正在卸载场景的资源名称。
            </summary>
            <param name="results">正在卸载场景的资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.HasScene(System.String)">
            <summary>
            检查场景资源是否存在。
            </summary>
            <param name="sceneAssetName">要检查场景资源的名称。</param>
            <returns>场景资源是否存在。</returns>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.LoadScene(System.String)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.LoadScene(System.String,System.Int32)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.LoadScene(System.String,System.Object)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.LoadScene(System.String,System.Int32,System.Object)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.UnloadScene(System.String)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.ISceneManager.UnloadScene(System.String,System.Object)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Scene.LoadSceneDependencyAssetEventArgs">
            <summary>
            加载场景时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.#ctor">
            <summary>
            初始化加载场景时加载依赖资源事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.Create(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            创建场景时加载依赖资源事件。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的场景时加载依赖资源事件。</returns>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneDependencyAssetEventArgs.Clear">
            <summary>
            清理场景时加载依赖资源事件。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.LoadSceneFailureEventArgs">
            <summary>
            加载场景失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneFailureEventArgs.#ctor">
            <summary>
            初始化加载场景失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneFailureEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneFailureEventArgs.Create(System.String,System.String,System.Object)">
            <summary>
            创建加载场景失败事件。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载场景失败事件。</returns>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneFailureEventArgs.Clear">
            <summary>
            清理加载场景失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.LoadSceneSuccessEventArgs">
            <summary>
            加载场景成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneSuccessEventArgs.#ctor">
            <summary>
            初始化加载场景成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneSuccessEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneSuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneSuccessEventArgs.Create(System.String,System.Single,System.Object)">
            <summary>
            创建加载场景成功事件。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载场景成功事件。</returns>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneSuccessEventArgs.Clear">
            <summary>
            清理加载场景成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.LoadSceneUpdateEventArgs">
            <summary>
            加载场景更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneUpdateEventArgs.#ctor">
            <summary>
            初始化加载场景更新事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneUpdateEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneUpdateEventArgs.Progress">
            <summary>
            获取加载场景进度。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.LoadSceneUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneUpdateEventArgs.Create(System.String,System.Single,System.Object)">
            <summary>
            创建加载场景更新事件。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="progress">加载场景进度。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的加载场景更新事件。</returns>
        </member>
        <member name="M:GameFramework.Scene.LoadSceneUpdateEventArgs.Clear">
            <summary>
            清理加载场景更新事件。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.SceneManager">
            <summary>
            场景管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.#ctor">
            <summary>
            初始化场景管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.SceneManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.LoadSceneSuccess">
            <summary>
            加载场景成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.LoadSceneFailure">
            <summary>
            加载场景失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.LoadSceneUpdate">
            <summary>
            加载场景更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.LoadSceneDependencyAsset">
            <summary>
            加载场景时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.UnloadSceneSuccess">
            <summary>
            卸载场景成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Scene.SceneManager.UnloadSceneFailure">
            <summary>
            卸载场景失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.Update(System.Single,System.Single)">
            <summary>
            场景管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.Shutdown">
            <summary>
            关闭并清理场景管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.SceneIsLoaded(System.String)">
            <summary>
            获取场景是否已加载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否已加载。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.GetLoadedSceneAssetNames">
            <summary>
            获取已加载场景的资源名称。
            </summary>
            <returns>已加载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.GetLoadedSceneAssetNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取已加载场景的资源名称。
            </summary>
            <param name="results">已加载场景的资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.SceneIsLoading(System.String)">
            <summary>
            获取场景是否正在加载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否正在加载。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.GetLoadingSceneAssetNames">
            <summary>
            获取正在加载场景的资源名称。
            </summary>
            <returns>正在加载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.GetLoadingSceneAssetNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取正在加载场景的资源名称。
            </summary>
            <param name="results">正在加载场景的资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.SceneIsUnloading(System.String)">
            <summary>
            获取场景是否正在卸载。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <returns>场景是否正在卸载。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.GetUnloadingSceneAssetNames">
            <summary>
            获取正在卸载场景的资源名称。
            </summary>
            <returns>正在卸载场景的资源名称。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.GetUnloadingSceneAssetNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取正在卸载场景的资源名称。
            </summary>
            <param name="results">正在卸载场景的资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.HasScene(System.String)">
            <summary>
            检查场景资源是否存在。
            </summary>
            <param name="sceneAssetName">要检查场景资源的名称。</param>
            <returns>场景资源是否存在。</returns>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.LoadScene(System.String)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.LoadScene(System.String,System.Int32)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.LoadScene(System.String,System.Object)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.LoadScene(System.String,System.Int32,System.Object)">
            <summary>
            加载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.UnloadScene(System.String)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
        </member>
        <member name="M:GameFramework.Scene.SceneManager.UnloadScene(System.String,System.Object)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Scene.UnloadSceneFailureEventArgs">
            <summary>
            卸载场景失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.UnloadSceneFailureEventArgs.#ctor">
            <summary>
            初始化卸载场景失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.UnloadSceneFailureEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.UnloadSceneFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.UnloadSceneFailureEventArgs.Create(System.String,System.Object)">
            <summary>
            创建卸载场景失败事件。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的卸载场景失败事件。</returns>
        </member>
        <member name="M:GameFramework.Scene.UnloadSceneFailureEventArgs.Clear">
            <summary>
            清理卸载场景失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.Scene.UnloadSceneSuccessEventArgs">
            <summary>
            卸载场景成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.UnloadSceneSuccessEventArgs.#ctor">
            <summary>
            初始化卸载场景成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.UnloadSceneSuccessEventArgs.SceneAssetName">
            <summary>
            获取场景资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Scene.UnloadSceneSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Scene.UnloadSceneSuccessEventArgs.Create(System.String,System.Object)">
            <summary>
            创建卸载场景成功事件。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的卸载场景成功事件。</returns>
        </member>
        <member name="M:GameFramework.Scene.UnloadSceneSuccessEventArgs.Clear">
            <summary>
            清理卸载场景成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.Setting.ISettingHelper">
            <summary>
            游戏配置辅助器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Setting.ISettingHelper.Count">
            <summary>
            获取游戏配置项数量。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.Load">
            <summary>
            加载游戏配置。
            </summary>
            <returns>是否加载游戏配置成功。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.Save">
            <summary>
            保存游戏配置。
            </summary>
            <returns>是否保存游戏配置成功。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetAllSettingNames">
            <summary>
            获取所有游戏配置项的名称。
            </summary>
            <returns>所有游戏配置项的名称。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetAllSettingNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取所有游戏配置项的名称。
            </summary>
            <param name="results">所有游戏配置项的名称。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.HasSetting(System.String)">
            <summary>
            检查是否存在指定游戏配置项。
            </summary>
            <param name="settingName">要检查游戏配置项的名称。</param>
            <returns>指定的游戏配置项是否存在。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.RemoveSetting(System.String)">
            <summary>
            移除指定游戏配置项。
            </summary>
            <param name="settingName">要移除游戏配置项的名称。</param>
            <returns>是否移除指定游戏配置项成功。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.RemoveAllSettings">
            <summary>
            清空所有游戏配置项。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetBool(System.String)">
            <summary>
            从指定游戏配置项中读取布尔值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetBool(System.String,System.Boolean)">
            <summary>
            从指定游戏配置项中读取布尔值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetBool(System.String,System.Boolean)">
            <summary>
            向指定游戏配置项写入布尔值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的布尔值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetInt(System.String)">
            <summary>
            从指定游戏配置项中读取整数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetInt(System.String,System.Int32)">
            <summary>
            从指定游戏配置项中读取整数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetInt(System.String,System.Int32)">
            <summary>
            向指定游戏配置项写入整数值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的整数值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetFloat(System.String)">
            <summary>
            从指定游戏配置项中读取浮点数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetFloat(System.String,System.Single)">
            <summary>
            从指定游戏配置项中读取浮点数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetFloat(System.String,System.Single)">
            <summary>
            向指定游戏配置项写入浮点数值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的浮点数值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetString(System.String)">
            <summary>
            从指定游戏配置项中读取字符串值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetString(System.String,System.String)">
            <summary>
            从指定游戏配置项中读取字符串值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetString(System.String,System.String)">
            <summary>
            向指定游戏配置项写入字符串值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的字符串值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetObject``1(System.String)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetObject(System.Type,System.String)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <param name="objectType">要读取对象的类型。</param>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetObject``1(System.String,``0)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultObj">当指定的游戏配置项不存在时，返回此默认对象。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.GetObject(System.Type,System.String,System.Object)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <param name="objectType">要读取对象的类型。</param>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultObj">当指定的游戏配置项不存在时，返回此默认对象。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetObject``1(System.String,``0)">
            <summary>
            向指定游戏配置项写入对象。
            </summary>
            <typeparam name="T">要写入对象的类型。</typeparam>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="obj">要写入的对象。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingHelper.SetObject(System.String,System.Object)">
            <summary>
            向指定游戏配置项写入对象。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="obj">要写入的对象。</param>
        </member>
        <member name="T:GameFramework.Setting.ISettingManager">
            <summary>
            游戏配置管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Setting.ISettingManager.Count">
            <summary>
            获取游戏配置项数量。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetSettingHelper(GameFramework.Setting.ISettingHelper)">
            <summary>
            设置游戏配置辅助器。
            </summary>
            <param name="settingHelper">游戏配置辅助器。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.Load">
            <summary>
            加载游戏配置。
            </summary>
            <returns>是否加载游戏配置成功。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.Save">
            <summary>
            保存游戏配置。
            </summary>
            <returns>是否保存游戏配置成功。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetAllSettingNames">
            <summary>
            获取所有游戏配置项的名称。
            </summary>
            <returns>所有游戏配置项的名称。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetAllSettingNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取所有游戏配置项的名称。
            </summary>
            <param name="results">所有游戏配置项的名称。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.HasSetting(System.String)">
            <summary>
            检查是否存在指定游戏配置项。
            </summary>
            <param name="settingName">要检查游戏配置项的名称。</param>
            <returns>指定的游戏配置项是否存在。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.RemoveSetting(System.String)">
            <summary>
            移除指定游戏配置项。
            </summary>
            <param name="settingName">要移除游戏配置项的名称。</param>
            <returns>是否移除指定游戏配置项成功。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.RemoveAllSettings">
            <summary>
            清空所有游戏配置项。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetBool(System.String)">
            <summary>
            从指定游戏配置项中读取布尔值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetBool(System.String,System.Boolean)">
            <summary>
            从指定游戏配置项中读取布尔值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetBool(System.String,System.Boolean)">
            <summary>
            向指定游戏配置项写入布尔值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的布尔值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetInt(System.String)">
            <summary>
            从指定游戏配置项中读取整数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetInt(System.String,System.Int32)">
            <summary>
            从指定游戏配置项中读取整数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetInt(System.String,System.Int32)">
            <summary>
            向指定游戏配置项写入整数值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的整数值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetFloat(System.String)">
            <summary>
            从指定游戏配置项中读取浮点数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetFloat(System.String,System.Single)">
            <summary>
            从指定游戏配置项中读取浮点数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetFloat(System.String,System.Single)">
            <summary>
            向指定游戏配置项写入浮点数值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的浮点数值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetString(System.String)">
            <summary>
            从指定游戏配置项中读取字符串值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetString(System.String,System.String)">
            <summary>
            从指定游戏配置项中读取字符串值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetString(System.String,System.String)">
            <summary>
            向指定游戏配置项写入字符串值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的字符串值。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetObject``1(System.String)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetObject(System.Type,System.String)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <param name="objectType">要读取对象的类型。</param>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetObject``1(System.String,``0)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultObj">当指定的游戏配置项不存在时，返回此默认对象。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.GetObject(System.Type,System.String,System.Object)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <param name="objectType">要读取对象的类型。</param>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultObj">当指定的游戏配置项不存在时，返回此默认对象。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetObject``1(System.String,``0)">
            <summary>
            向指定游戏配置项写入对象。
            </summary>
            <typeparam name="T">要写入对象的类型。</typeparam>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="obj">要写入的对象。</param>
        </member>
        <member name="M:GameFramework.Setting.ISettingManager.SetObject(System.String,System.Object)">
            <summary>
            向指定游戏配置项写入对象。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="obj">要写入的对象。</param>
        </member>
        <member name="T:GameFramework.Setting.SettingManager">
            <summary>
            游戏配置管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.#ctor">
            <summary>
            初始化游戏配置管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Setting.SettingManager.Count">
            <summary>
            获取游戏配置项数量。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.Update(System.Single,System.Single)">
            <summary>
            游戏配置管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.Shutdown">
            <summary>
            关闭并清理游戏配置管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetSettingHelper(GameFramework.Setting.ISettingHelper)">
            <summary>
            设置游戏配置辅助器。
            </summary>
            <param name="settingHelper">游戏配置辅助器。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.Load">
            <summary>
            加载游戏配置。
            </summary>
            <returns>是否加载游戏配置成功。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.Save">
            <summary>
            保存游戏配置。
            </summary>
            <returns>是否保存游戏配置成功。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetAllSettingNames">
            <summary>
            获取所有游戏配置项的名称。
            </summary>
            <returns>所有游戏配置项的名称。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetAllSettingNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取所有游戏配置项的名称。
            </summary>
            <param name="results">所有游戏配置项的名称。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.HasSetting(System.String)">
            <summary>
            检查是否存在指定游戏配置项。
            </summary>
            <param name="settingName">要检查游戏配置项的名称。</param>
            <returns>指定的游戏配置项是否存在。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.RemoveSetting(System.String)">
            <summary>
            移除指定游戏配置项。
            </summary>
            <param name="settingName">要移除游戏配置项的名称。</param>
            <returns>是否移除指定游戏配置项成功。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.RemoveAllSettings">
            <summary>
            清空所有游戏配置项。
            </summary>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetBool(System.String)">
            <summary>
            从指定游戏配置项中读取布尔值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetBool(System.String,System.Boolean)">
            <summary>
            从指定游戏配置项中读取布尔值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的布尔值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetBool(System.String,System.Boolean)">
            <summary>
            向指定游戏配置项写入布尔值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的布尔值。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetInt(System.String)">
            <summary>
            从指定游戏配置项中读取整数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetInt(System.String,System.Int32)">
            <summary>
            从指定游戏配置项中读取整数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的整数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetInt(System.String,System.Int32)">
            <summary>
            向指定游戏配置项写入整数值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的整数值。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetFloat(System.String)">
            <summary>
            从指定游戏配置项中读取浮点数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetFloat(System.String,System.Single)">
            <summary>
            从指定游戏配置项中读取浮点数值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的浮点数值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetFloat(System.String,System.Single)">
            <summary>
            向指定游戏配置项写入浮点数值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的浮点数值。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetString(System.String)">
            <summary>
            从指定游戏配置项中读取字符串值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetString(System.String,System.String)">
            <summary>
            从指定游戏配置项中读取字符串值。
            </summary>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultValue">当指定的游戏配置项不存在时，返回此默认值。</param>
            <returns>读取的字符串值。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetString(System.String,System.String)">
            <summary>
            向指定游戏配置项写入字符串值。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="value">要写入的字符串值。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetObject``1(System.String)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetObject(System.Type,System.String)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <param name="objectType">要读取对象的类型。</param>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetObject``1(System.String,``0)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <typeparam name="T">要读取对象的类型。</typeparam>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultObj">当指定的游戏配置项不存在时，返回此默认对象。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.GetObject(System.Type,System.String,System.Object)">
            <summary>
            从指定游戏配置项中读取对象。
            </summary>
            <param name="objectType">要读取对象的类型。</param>
            <param name="settingName">要获取游戏配置项的名称。</param>
            <param name="defaultObj">当指定的游戏配置项不存在时，返回此默认对象。</param>
            <returns>读取的对象。</returns>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetObject``1(System.String,``0)">
            <summary>
            向指定游戏配置项写入对象。
            </summary>
            <typeparam name="T">要写入对象的类型。</typeparam>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="obj">要写入的对象。</param>
        </member>
        <member name="M:GameFramework.Setting.SettingManager.SetObject(System.String,System.Object)">
            <summary>
            向指定游戏配置项写入对象。
            </summary>
            <param name="settingName">要写入游戏配置项的名称。</param>
            <param name="obj">要写入的对象。</param>
        </member>
        <member name="T:GameFramework.Sound.Constant">
            <summary>
            声音相关常量。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.ISoundAgent">
            <summary>
            声音代理接口。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.SoundGroup">
            <summary>
            获取所在的声音组。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.SerialId">
            <summary>
            获取声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.IsPlaying">
            <summary>
            获取当前是否正在播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Length">
            <summary>
            获取声音长度。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Time">
            <summary>
            获取或设置播放位置。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Mute">
            <summary>
            获取或设置是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.MuteInSoundGroup">
            <summary>
            获取或设置在声音组内是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Loop">
            <summary>
            获取或设置是否循环播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Priority">
            <summary>
            获取或设置声音优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Volume">
            <summary>
            获取音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.VolumeInSoundGroup">
            <summary>
            获取或设置在声音组内音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Pitch">
            <summary>
            获取或设置声音音调。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.PanStereo">
            <summary>
            获取或设置声音立体声声相。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.SpatialBlend">
            <summary>
            获取或设置声音空间混合量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.MaxDistance">
            <summary>
            获取或设置声音最大距离。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.DopplerLevel">
            <summary>
            获取或设置声音多普勒等级。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgent.Helper">
            <summary>
            获取声音代理辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Play">
            <summary>
            播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Play(System.Single)">
            <summary>
            播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Stop">
            <summary>
            停止播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Stop(System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Pause">
            <summary>
            暂停播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Pause(System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Resume">
            <summary>
            恢复播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Resume(System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgent.Reset">
            <summary>
            重置声音代理。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.ISoundAgentHelper">
            <summary>
            声音代理辅助器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.IsPlaying">
            <summary>
            获取当前是否正在播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Length">
            <summary>
            获取声音长度。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Time">
            <summary>
            获取或设置播放位置。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Mute">
            <summary>
            获取或设置是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Loop">
            <summary>
            获取或设置是否循环播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Priority">
            <summary>
            获取或设置声音优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Volume">
            <summary>
            获取或设置音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.Pitch">
            <summary>
            获取或设置声音音调。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.PanStereo">
            <summary>
            获取或设置声音立体声声相。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.SpatialBlend">
            <summary>
            获取或设置声音空间混合量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.MaxDistance">
            <summary>
            获取或设置声音最大距离。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundAgentHelper.DopplerLevel">
            <summary>
            获取或设置声音多普勒等级。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.ISoundAgentHelper.ResetSoundAgent">
            <summary>
            重置声音代理事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.Play(System.Single)">
            <summary>
            播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.Stop(System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.Pause(System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.Resume(System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.Reset">
            <summary>
            重置声音代理辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundAgentHelper.SetSoundAsset(System.Object)">
            <summary>
            设置声音资源。
            </summary>
            <param name="soundAsset">声音资源。</param>
            <returns>是否设置声音资源成功。</returns>
        </member>
        <member name="T:GameFramework.Sound.ISoundGroup">
            <summary>
            声音组接口。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.Name">
            <summary>
            获取声音组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.SoundAgentCount">
            <summary>
            获取声音代理数。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.AvoidBeingReplacedBySamePriority">
            <summary>
            获取或设置声音组中的声音是否避免被同优先级声音替换。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.Mute">
            <summary>
            获取或设置声音组静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.Volume">
            <summary>
            获取或设置声音组音量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundGroup.Helper">
            <summary>
            获取声音组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundGroup.StopAllLoadedSounds">
            <summary>
            停止所有已加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundGroup.StopAllLoadedSounds(System.Single)">
            <summary>
            停止所有已加载的声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="T:GameFramework.Sound.ISoundGroupHelper">
            <summary>
            声音组辅助器接口。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.ISoundHelper">
            <summary>
            声音辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundHelper.ReleaseSoundAsset(System.Object)">
            <summary>
            释放声音资源。
            </summary>
            <param name="soundAsset">要释放的声音资源。</param>
        </member>
        <member name="T:GameFramework.Sound.ISoundManager">
            <summary>
            声音管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.ISoundManager.SoundGroupCount">
            <summary>
            获取声音组数量。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.ISoundManager.PlaySoundSuccess">
            <summary>
            播放声音成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.ISoundManager.PlaySoundFailure">
            <summary>
            播放声音失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.ISoundManager.PlaySoundUpdate">
            <summary>
            播放声音更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.ISoundManager.PlaySoundDependencyAsset">
            <summary>
            播放声音时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.SetSoundHelper(GameFramework.Sound.ISoundHelper)">
            <summary>
            设置声音辅助器。
            </summary>
            <param name="soundHelper">声音辅助器。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.HasSoundGroup(System.String)">
            <summary>
            是否存在指定声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <returns>指定声音组是否存在。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.GetSoundGroup(System.String)">
            <summary>
            获取指定声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <returns>要获取的声音组。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.GetAllSoundGroups">
            <summary>
            获取所有声音组。
            </summary>
            <returns>所有声音组。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.GetAllSoundGroups(System.Collections.Generic.List{GameFramework.Sound.ISoundGroup})">
            <summary>
            获取所有声音组。
            </summary>
            <param name="results">所有声音组。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.AddSoundGroup(System.String,GameFramework.Sound.ISoundGroupHelper)">
            <summary>
            增加声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundGroupHelper">声音组辅助器。</param>
            <returns>是否增加声音组成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.AddSoundGroup(System.String,System.Boolean,System.Boolean,System.Single,GameFramework.Sound.ISoundGroupHelper)">
            <summary>
            增加声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundGroupAvoidBeingReplacedBySamePriority">声音组中的声音是否避免被同优先级声音替换。</param>
            <param name="soundGroupMute">声音组是否静音。</param>
            <param name="soundGroupVolume">声音组音量。</param>
            <param name="soundGroupHelper">声音组辅助器。</param>
            <returns>是否增加声音组成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.AddSoundAgentHelper(System.String,GameFramework.Sound.ISoundAgentHelper)">
            <summary>
            增加声音代理辅助器。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundAgentHelper">要增加的声音代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.GetAllLoadingSoundSerialIds">
            <summary>
            获取所有正在加载声音的序列编号。
            </summary>
            <returns>所有正在加载声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.GetAllLoadingSoundSerialIds(System.Collections.Generic.List{System.Int32})">
            <summary>
            获取所有正在加载声音的序列编号。
            </summary>
            <param name="results">所有正在加载声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.IsLoadingSound(System.Int32)">
            <summary>
            是否正在加载声音。
            </summary>
            <param name="serialId">声音序列编号。</param>
            <returns>是否正在加载声音。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String,System.Int32)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="priority">加载声音资源的优先级。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String,GameFramework.Sound.PlaySoundParams)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String,System.Int32,GameFramework.Sound.PlaySoundParams)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="priority">加载声音资源的优先级。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String,System.Int32,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="priority">加载声音资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String,GameFramework.Sound.PlaySoundParams,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PlaySound(System.String,System.String,System.Int32,GameFramework.Sound.PlaySoundParams,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="priority">加载声音资源的优先级。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.StopSound(System.Int32)">
            <summary>
            停止播放声音。
            </summary>
            <param name="serialId">要停止播放声音的序列编号。</param>
            <returns>是否停止播放声音成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.StopSound(System.Int32,System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="serialId">要停止播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
            <returns>是否停止播放声音成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.StopAllLoadedSounds">
            <summary>
            停止所有已加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.StopAllLoadedSounds(System.Single)">
            <summary>
            停止所有已加载的声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.StopAllLoadingSounds">
            <summary>
            停止所有正在加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PauseSound(System.Int32)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="serialId">要暂停播放声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.PauseSound(System.Int32,System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="serialId">要暂停播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.ResumeSound(System.Int32)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="serialId">要恢复播放声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.ISoundManager.ResumeSound(System.Int32,System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="serialId">要恢复播放声音的序列编号。</param>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundDependencyAssetEventArgs">
            <summary>
            播放声音时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.#ctor">
            <summary>
            初始化播放声音时加载依赖资源事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.SerialId">
            <summary>
            获取声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.SoundAssetName">
            <summary>
            获取声音资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.SoundGroupName">
            <summary>
            获取声音组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.PlaySoundParams">
            <summary>
            获取播放声音参数。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.Create(System.Int32,System.String,System.String,GameFramework.Sound.PlaySoundParams,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            创建播放声音时加载依赖资源事件。
            </summary>
            <param name="serialId">声音的序列编号。</param>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的播放声音时加载依赖资源事件。</returns>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundDependencyAssetEventArgs.Clear">
            <summary>
            清理播放声音时加载依赖资源事件。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundErrorCode">
            <summary>
            播放声音错误码。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.Unknown">
            <summary>
            未知错误。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.SoundGroupNotExist">
            <summary>
            声音组不存在。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.SoundGroupHasNoAgent">
            <summary>
            声音组没有声音代理。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.LoadAssetFailure">
            <summary>
            加载资源失败。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.IgnoredDueToLowPriority">
            <summary>
            播放声音因优先级低被忽略。
            </summary>
        </member>
        <member name="F:GameFramework.Sound.PlaySoundErrorCode.SetSoundAssetFailure">
            <summary>
            设置声音资源失败。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundFailureEventArgs">
            <summary>
            播放声音失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundFailureEventArgs.#ctor">
            <summary>
            初始化播放声音失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.SerialId">
            <summary>
            获取声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.SoundAssetName">
            <summary>
            获取声音资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.SoundGroupName">
            <summary>
            获取声音组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.PlaySoundParams">
            <summary>
            获取播放声音参数。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.ErrorCode">
            <summary>
            获取错误码。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundFailureEventArgs.Create(System.Int32,System.String,System.String,GameFramework.Sound.PlaySoundParams,GameFramework.Sound.PlaySoundErrorCode,System.String,System.Object)">
            <summary>
            创建播放声音失败事件。
            </summary>
            <param name="serialId">声音的序列编号。</param>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="errorCode">错误码。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的播放声音失败事件。</returns>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundFailureEventArgs.Clear">
            <summary>
            清理播放声音失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundParams">
            <summary>
            播放声音参数。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundParams.#ctor">
            <summary>
            初始化播放声音参数的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.Time">
            <summary>
            获取或设置播放位置。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.MuteInSoundGroup">
            <summary>
            获取或设置在声音组内是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.Loop">
            <summary>
            获取或设置是否循环播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.Priority">
            <summary>
            获取或设置声音优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.VolumeInSoundGroup">
            <summary>
            获取或设置在声音组内音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.FadeInSeconds">
            <summary>
            获取或设置声音淡入时间，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.Pitch">
            <summary>
            获取或设置声音音调。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.PanStereo">
            <summary>
            获取或设置声音立体声声相。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.SpatialBlend">
            <summary>
            获取或设置声音空间混合量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.MaxDistance">
            <summary>
            获取或设置声音最大距离。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundParams.DopplerLevel">
            <summary>
            获取或设置声音多普勒等级。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundParams.Create">
            <summary>
            创建播放声音参数。
            </summary>
            <returns>创建的播放声音参数。</returns>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundParams.Clear">
            <summary>
            清理播放声音参数。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundSuccessEventArgs">
            <summary>
            播放声音成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundSuccessEventArgs.#ctor">
            <summary>
            初始化播放声音成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundSuccessEventArgs.SerialId">
            <summary>
            获取声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundSuccessEventArgs.SoundAssetName">
            <summary>
            获取声音资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundSuccessEventArgs.SoundAgent">
            <summary>
            获取用于播放的声音代理。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundSuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundSuccessEventArgs.Create(System.Int32,System.String,GameFramework.Sound.ISoundAgent,System.Single,System.Object)">
            <summary>
            创建播放声音成功事件。
            </summary>
            <param name="serialId">声音的序列编号。</param>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundAgent">用于播放的声音代理。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的播放声音成功事件。</returns>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundSuccessEventArgs.Clear">
            <summary>
            清理播放声音成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.PlaySoundUpdateEventArgs">
            <summary>
            播放声音更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundUpdateEventArgs.#ctor">
            <summary>
            初始化播放声音更新事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.SerialId">
            <summary>
            获取声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.SoundAssetName">
            <summary>
            获取声音资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.SoundGroupName">
            <summary>
            获取声音组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.PlaySoundParams">
            <summary>
            获取播放声音参数。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.Progress">
            <summary>
            获取加载声音进度。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.PlaySoundUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundUpdateEventArgs.Create(System.Int32,System.String,System.String,GameFramework.Sound.PlaySoundParams,System.Single,System.Object)">
            <summary>
            创建播放声音更新事件。
            </summary>
            <param name="serialId">声音的序列编号。</param>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="progress">加载声音进度。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的播放声音更新事件。</returns>
        </member>
        <member name="M:GameFramework.Sound.PlaySoundUpdateEventArgs.Clear">
            <summary>
            清理播放声音更新事件。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.ResetSoundAgentEventArgs">
            <summary>
            重置声音代理事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ResetSoundAgentEventArgs.#ctor">
            <summary>
            初始化重置声音代理事件的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.ResetSoundAgentEventArgs.Create">
            <summary>
            创建重置声音代理事件。
            </summary>
            <returns>创建的重置声音代理事件。</returns>
        </member>
        <member name="M:GameFramework.Sound.ResetSoundAgentEventArgs.Clear">
            <summary>
            清理重置声音代理事件。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.SoundManager">
            <summary>
            声音管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.#ctor">
            <summary>
            初始化声音管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroupCount">
            <summary>
            获取声音组数量。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.SoundManager.PlaySoundSuccess">
            <summary>
            播放声音成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.SoundManager.PlaySoundFailure">
            <summary>
            播放声音失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.SoundManager.PlaySoundUpdate">
            <summary>
            播放声音更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Sound.SoundManager.PlaySoundDependencyAsset">
            <summary>
            播放声音时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.Update(System.Single,System.Single)">
            <summary>
            声音管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.Shutdown">
            <summary>
            关闭并清理声音管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SetSoundHelper(GameFramework.Sound.ISoundHelper)">
            <summary>
            设置声音辅助器。
            </summary>
            <param name="soundHelper">声音辅助器。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.HasSoundGroup(System.String)">
            <summary>
            是否存在指定声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <returns>指定声音组是否存在。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.GetSoundGroup(System.String)">
            <summary>
            获取指定声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <returns>要获取的声音组。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.GetAllSoundGroups">
            <summary>
            获取所有声音组。
            </summary>
            <returns>所有声音组。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.GetAllSoundGroups(System.Collections.Generic.List{GameFramework.Sound.ISoundGroup})">
            <summary>
            获取所有声音组。
            </summary>
            <param name="results">所有声音组。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.AddSoundGroup(System.String,GameFramework.Sound.ISoundGroupHelper)">
            <summary>
            增加声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundGroupHelper">声音组辅助器。</param>
            <returns>是否增加声音组成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.AddSoundGroup(System.String,System.Boolean,System.Boolean,System.Single,GameFramework.Sound.ISoundGroupHelper)">
            <summary>
            增加声音组。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundGroupAvoidBeingReplacedBySamePriority">声音组中的声音是否避免被同优先级声音替换。</param>
            <param name="soundGroupMute">声音组是否静音。</param>
            <param name="soundGroupVolume">声音组音量。</param>
            <param name="soundGroupHelper">声音组辅助器。</param>
            <returns>是否增加声音组成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.AddSoundAgentHelper(System.String,GameFramework.Sound.ISoundAgentHelper)">
            <summary>
            增加声音代理辅助器。
            </summary>
            <param name="soundGroupName">声音组名称。</param>
            <param name="soundAgentHelper">要增加的声音代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.GetAllLoadingSoundSerialIds">
            <summary>
            获取所有正在加载声音的序列编号。
            </summary>
            <returns>所有正在加载声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.GetAllLoadingSoundSerialIds(System.Collections.Generic.List{System.Int32})">
            <summary>
            获取所有正在加载声音的序列编号。
            </summary>
            <param name="results">所有正在加载声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.IsLoadingSound(System.Int32)">
            <summary>
            是否正在加载声音。
            </summary>
            <param name="serialId">声音序列编号。</param>
            <returns>是否正在加载声音。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String,System.Int32)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="priority">加载声音资源的优先级。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String,GameFramework.Sound.PlaySoundParams)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String,System.Int32,GameFramework.Sound.PlaySoundParams)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="priority">加载声音资源的优先级。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String,System.Int32,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="priority">加载声音资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String,GameFramework.Sound.PlaySoundParams,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PlaySound(System.String,System.String,System.Int32,GameFramework.Sound.PlaySoundParams,System.Object)">
            <summary>
            播放声音。
            </summary>
            <param name="soundAssetName">声音资源名称。</param>
            <param name="soundGroupName">声音组名称。</param>
            <param name="priority">加载声音资源的优先级。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>声音的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.StopSound(System.Int32)">
            <summary>
            停止播放声音。
            </summary>
            <param name="serialId">要停止播放声音的序列编号。</param>
            <returns>是否停止播放声音成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.StopSound(System.Int32,System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="serialId">要停止播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
            <returns>是否停止播放声音成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.StopAllLoadedSounds">
            <summary>
            停止所有已加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.StopAllLoadedSounds(System.Single)">
            <summary>
            停止所有已加载的声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.StopAllLoadingSounds">
            <summary>
            停止所有正在加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PauseSound(System.Int32)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="serialId">要暂停播放声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.PauseSound(System.Int32,System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="serialId">要暂停播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.ResumeSound(System.Int32)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="serialId">要恢复播放声音的序列编号。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.ResumeSound(System.Int32,System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="serialId">要恢复播放声音的序列编号。</param>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="T:GameFramework.Sound.SoundManager.SoundAgent">
            <summary>
            声音代理。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.#ctor(GameFramework.Sound.SoundManager.SoundGroup,GameFramework.Sound.ISoundHelper,GameFramework.Sound.ISoundAgentHelper)">
            <summary>
            初始化声音代理的新实例。
            </summary>
            <param name="soundGroup">所在的声音组。</param>
            <param name="soundHelper">声音辅助器接口。</param>
            <param name="soundAgentHelper">声音代理辅助器接口。</param>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.SoundGroup">
            <summary>
            获取所在的声音组。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.SerialId">
            <summary>
            获取或设置声音的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.IsPlaying">
            <summary>
            获取当前是否正在播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Length">
            <summary>
            获取声音长度。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Time">
            <summary>
            获取或设置播放位置。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Mute">
            <summary>
            获取是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.MuteInSoundGroup">
            <summary>
            获取或设置在声音组内是否静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Loop">
            <summary>
            获取或设置是否循环播放。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Priority">
            <summary>
            获取或设置声音优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Volume">
            <summary>
            获取音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.VolumeInSoundGroup">
            <summary>
            获取或设置在声音组内音量大小。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Pitch">
            <summary>
            获取或设置声音音调。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.PanStereo">
            <summary>
            获取或设置声音立体声声相。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.SpatialBlend">
            <summary>
            获取或设置声音空间混合量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.MaxDistance">
            <summary>
            获取或设置声音最大距离。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.DopplerLevel">
            <summary>
            获取或设置声音多普勒等级。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.Helper">
            <summary>
            获取声音代理辅助器。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundAgent.SetSoundAssetTime">
            <summary>
            获取声音创建时间。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Play">
            <summary>
            播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Play(System.Single)">
            <summary>
            播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Stop">
            <summary>
            停止播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Stop(System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Pause">
            <summary>
            暂停播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Pause(System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Resume">
            <summary>
            恢复播放声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Resume(System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundAgent.Reset">
            <summary>
            重置声音代理。
            </summary>
        </member>
        <member name="T:GameFramework.Sound.SoundManager.SoundGroup">
            <summary>
            声音组。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.#ctor(System.String,GameFramework.Sound.ISoundGroupHelper)">
            <summary>
            初始化声音组的新实例。
            </summary>
            <param name="name">声音组名称。</param>
            <param name="soundGroupHelper">声音组辅助器。</param>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.Name">
            <summary>
            获取声音组名称。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.SoundAgentCount">
            <summary>
            获取声音代理数。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.AvoidBeingReplacedBySamePriority">
            <summary>
            获取或设置声音组中的声音是否避免被同优先级声音替换。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.Mute">
            <summary>
            获取或设置声音组静音。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.Volume">
            <summary>
            获取或设置声音组音量。
            </summary>
        </member>
        <member name="P:GameFramework.Sound.SoundManager.SoundGroup.Helper">
            <summary>
            获取声音组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.AddSoundAgentHelper(GameFramework.Sound.ISoundHelper,GameFramework.Sound.ISoundAgentHelper)">
            <summary>
            增加声音代理辅助器。
            </summary>
            <param name="soundHelper">声音辅助器接口。</param>
            <param name="soundAgentHelper">要增加的声音代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.PlaySound(System.Int32,System.Object,GameFramework.Sound.PlaySoundParams,System.Nullable{GameFramework.Sound.PlaySoundErrorCode}@)">
            <summary>
            播放声音。
            </summary>
            <param name="serialId">声音的序列编号。</param>
            <param name="soundAsset">声音资源。</param>
            <param name="playSoundParams">播放声音参数。</param>
            <param name="errorCode">错误码。</param>
            <returns>用于播放的声音代理。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.StopSound(System.Int32,System.Single)">
            <summary>
            停止播放声音。
            </summary>
            <param name="serialId">要停止播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
            <returns>是否停止播放声音成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.PauseSound(System.Int32,System.Single)">
            <summary>
            暂停播放声音。
            </summary>
            <param name="serialId">要暂停播放声音的序列编号。</param>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
            <returns>是否暂停播放声音成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.ResumeSound(System.Int32,System.Single)">
            <summary>
            恢复播放声音。
            </summary>
            <param name="serialId">要恢复播放声音的序列编号。</param>
            <param name="fadeInSeconds">声音淡入时间，以秒为单位。</param>
            <returns>是否恢复播放声音成功。</returns>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.StopAllLoadedSounds">
            <summary>
            停止所有已加载的声音。
            </summary>
        </member>
        <member name="M:GameFramework.Sound.SoundManager.SoundGroup.StopAllLoadedSounds(System.Single)">
            <summary>
            停止所有已加载的声音。
            </summary>
            <param name="fadeOutSeconds">声音淡出时间，以秒为单位。</param>
        </member>
        <member name="T:GameFramework.Task.ConditionalTask">
            <summary>
            条件任务。
            </summary>
        </member>
        <member name="M:GameFramework.Task.ConditionalTask.#ctor">
            <summary>
            初始化条件任务的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Task.ConditionalTask.SetCondition(System.Predicate{GameFramework.Task.ConditionalTask})">
            <summary>
            设置任务完成的条件。
            </summary>
            <param name="condition">任务完成的条件。</param>
        </member>
        <member name="M:GameFramework.Task.ConditionalTask.SetCompleteAction(GameFramework.GameFrameworkAction{GameFramework.Task.ConditionalTask,System.String})">
            <summary>
            设置任务完成时的行为。
            </summary>
            <param name="completeAction">任务完成时的行为。</param>
        </member>
        <member name="M:GameFramework.Task.ConditionalTask.SetFailureAction(GameFramework.GameFrameworkAction{GameFramework.Task.ConditionalTask,System.String})">
            <summary>
            设置任务失败时的行为。
            </summary>
            <param name="failureAction">任务失败时的行为。</param>
        </member>
        <member name="M:GameFramework.Task.ConditionalTask.SetCancelAction(GameFramework.GameFrameworkAction{GameFramework.Task.ConditionalTask,System.String})">
            <summary>
            设置任务取消时的行为。
            </summary>
            <param name="cancelAction">任务取消时的行为。</param>
        </member>
        <member name="M:GameFramework.Task.ConditionalTask.OnStart">
            <summary>
            任务开始时调用。
            </summary>
        </member>
        <member name="M:GameFramework.Task.ConditionalTask.OnUpdate(System.Single,System.Single)">
            <summary>
            任务轮询时调用。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Task.ConditionalTask.OnComplete(System.String)">
            <summary>
            任务完成时调用。
            </summary>
            <param name="reason">任务完成的原因。</param>
        </member>
        <member name="M:GameFramework.Task.ConditionalTask.OnFailure(System.String)">
            <summary>
            任务失败时调用。
            </summary>
            <param name="reason">任务失败的原因。</param>
        </member>
        <member name="M:GameFramework.Task.ConditionalTask.OnCancel(System.String)">
            <summary>
            任务取消时调用。
            </summary>
            <param name="reason">任务取消的原因。</param>
        </member>
        <member name="T:GameFramework.Task.ITaskManager">
            <summary>
            任务管理器。
            </summary>
        </member>
        <member name="P:GameFramework.Task.ITaskManager.Count">
            <summary>
            获取任务数量。
            </summary>
        </member>
        <member name="M:GameFramework.Task.ITaskManager.GenerateTask``1">
            <summary>
            生成任务。
            </summary>
            <typeparam name="T">任务的类型。</typeparam>
            <returns>生成的指定类型的任务。</returns>
        </member>
        <member name="M:GameFramework.Task.ITaskManager.GenerateTask``1(System.Int32)">
            <summary>
            生成任务。
            </summary>
            <typeparam name="T">任务的类型。</typeparam>
            <param name="priority">任务的优先级。</param>
            <returns>生成的指定类型的任务。</returns>
        </member>
        <member name="M:GameFramework.Task.ITaskManager.CancelTask(System.Int32)">
            <summary>
            取消任务。
            </summary>
            <param name="serialId">要取消的任务的序列编号。</param>
            <returns>是否取消任务成功。</returns>
        </member>
        <member name="M:GameFramework.Task.ITaskManager.CancelTask(System.Int32,System.String)">
            <summary>
            取消任务。
            </summary>
            <param name="serialId">要取消的任务的序列编号。</param>
            <param name="reason">任务取消的原因。</param>
            <returns>是否取消任务成功。</returns>
        </member>
        <member name="M:GameFramework.Task.ITaskManager.CancelTask(GameFramework.Task.TaskBase)">
            <summary>
            取消任务。
            </summary>
            <param name="task">要取消的任务。</param>
            <returns>是否取消任务成功。</returns>
        </member>
        <member name="M:GameFramework.Task.ITaskManager.CancelTask(GameFramework.Task.TaskBase,System.String)">
            <summary>
            取消任务。
            </summary>
            <param name="task">要取消的任务。</param>
            <param name="reason">任务取消的原因。</param>
            <returns>是否取消任务成功。</returns>
        </member>
        <member name="M:GameFramework.Task.ITaskManager.CancelAllTasks(System.String)">
            <summary>
            取消所有任务。
            </summary>
            <param name="reason">任务取消的原因。</param>
        </member>
        <member name="T:GameFramework.Task.TaskBase">
            <summary>
            任务基类。
            </summary>
        </member>
        <member name="F:GameFramework.Task.TaskBase.DefaultPriority">
            <summary>
            任务默认优先级。
            </summary>
        </member>
        <member name="M:GameFramework.Task.TaskBase.#ctor">
            <summary>
            初始化任务基类的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Task.TaskBase.SerialId">
            <summary>
            获取任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Task.TaskBase.Priority">
            <summary>
            获取任务的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Task.TaskBase.Status">
            <summary>
            获取任务的状态。
            </summary>
        </member>
        <member name="P:GameFramework.Task.TaskBase.UserData">
            <summary>
            获取或设置用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.Task.TaskBase.Initialize(System.Int32,System.Int32)">
            <summary>
            初始化任务基类。
            </summary>
            <param name="serialId">任务的序列编号。</param>
            <param name="priority">任务的优先级。</param>
        </member>
        <member name="M:GameFramework.Task.TaskBase.Clear">
            <summary>
            清理任务基类。
            </summary>
        </member>
        <member name="M:GameFramework.Task.TaskBase.OnGenerate">
            <summary>
            任务生成时调用。
            </summary>
        </member>
        <member name="M:GameFramework.Task.TaskBase.OnStart">
            <summary>
            任务开始时调用。
            </summary>
        </member>
        <member name="M:GameFramework.Task.TaskBase.OnUpdate(System.Single,System.Single)">
            <summary>
            任务轮询时调用。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Task.TaskBase.OnComplete(System.String)">
            <summary>
            任务完成时调用。
            </summary>
            <param name="reason">任务完成的原因。</param>
        </member>
        <member name="M:GameFramework.Task.TaskBase.OnFailure(System.String)">
            <summary>
            任务失败时调用。
            </summary>
            <param name="reason">任务失败的原因。</param>
        </member>
        <member name="M:GameFramework.Task.TaskBase.OnCancel(System.String)">
            <summary>
            任务取消时调用。
            </summary>
            <param name="reason">任务取消的原因。</param>
        </member>
        <member name="T:GameFramework.Task.TaskManager">
            <summary>
            任务管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Task.TaskManager.#ctor">
            <summary>
            初始化任务管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Task.TaskManager.Count">
            <summary>
            获取任务数量。
            </summary>
        </member>
        <member name="M:GameFramework.Task.TaskManager.Update(System.Single,System.Single)">
            <summary>
            任务管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Task.TaskManager.Shutdown">
            <summary>
            关闭并清理任务管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Task.TaskManager.GenerateTask``1">
            <summary>
            生成任务。
            </summary>
            <typeparam name="T">任务的类型。</typeparam>
            <returns>生成的指定类型的任务。</returns>
        </member>
        <member name="M:GameFramework.Task.TaskManager.GenerateTask``1(System.Int32)">
            <summary>
            生成任务。
            </summary>
            <typeparam name="T">任务的类型。</typeparam>
            <param name="priority">任务的优先级。</param>
            <returns>生成的指定类型的任务。</returns>
        </member>
        <member name="M:GameFramework.Task.TaskManager.CancelTask(System.Int32)">
            <summary>
            取消任务。
            </summary>
            <param name="serialId">要取消的任务的序列编号。</param>
            <returns>是否取消任务成功。</returns>
        </member>
        <member name="M:GameFramework.Task.TaskManager.CancelTask(System.Int32,System.String)">
            <summary>
            取消任务。
            </summary>
            <param name="serialId">要取消的任务的序列编号。</param>
            <param name="reason">任务取消的原因。</param>
            <returns>是否取消任务成功。</returns>
        </member>
        <member name="M:GameFramework.Task.TaskManager.CancelTask(GameFramework.Task.TaskBase)">
            <summary>
            取消任务。
            </summary>
            <param name="task">要取消的任务。</param>
            <returns>是否取消任务成功。</returns>
        </member>
        <member name="M:GameFramework.Task.TaskManager.CancelTask(GameFramework.Task.TaskBase,System.String)">
            <summary>
            取消任务。
            </summary>
            <param name="task">要取消的任务。</param>
            <param name="reason">任务取消的原因。</param>
            <returns>是否取消任务成功。</returns>
        </member>
        <member name="M:GameFramework.Task.TaskManager.CancelAllTasks(System.String)">
            <summary>
            取消所有任务。
            </summary>
            <param name="reason">任务取消的原因。</param>
        </member>
        <member name="T:GameFramework.Task.TaskStatus">
            <summary>
            任务状态。
            </summary>
        </member>
        <member name="F:GameFramework.Task.TaskStatus.Free">
            <summary>
            空闲。
            </summary>
        </member>
        <member name="F:GameFramework.Task.TaskStatus.Waiting">
            <summary>
            等待中。
            </summary>
        </member>
        <member name="F:GameFramework.Task.TaskStatus.Running">
            <summary>
            运行中。
            </summary>
        </member>
        <member name="F:GameFramework.Task.TaskStatus.Completed">
            <summary>
            已完成。
            </summary>
        </member>
        <member name="F:GameFramework.Task.TaskStatus.Failed">
            <summary>
            已失败。
            </summary>
        </member>
        <member name="F:GameFramework.Task.TaskStatus.Canceled">
            <summary>
            已取消。
            </summary>
        </member>
        <member name="T:GameFramework.UI.CloseUIFormCompleteEventArgs">
            <summary>
            关闭界面完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.CloseUIFormCompleteEventArgs.#ctor">
            <summary>
            初始化关闭界面完成事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.UI.CloseUIFormCompleteEventArgs.SerialId">
            <summary>
            获取界面序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.UI.CloseUIFormCompleteEventArgs.UIFormAssetName">
            <summary>
            获取界面资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.CloseUIFormCompleteEventArgs.UIGroup">
            <summary>
            获取界面所属的界面组。
            </summary>
        </member>
        <member name="P:GameFramework.UI.CloseUIFormCompleteEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.UI.CloseUIFormCompleteEventArgs.Create(System.Int32,System.String,GameFramework.UI.IUIGroup,System.Object)">
            <summary>
            创建关闭界面完成事件。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroup">界面所属的界面组。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的关闭界面完成事件。</returns>
        </member>
        <member name="M:GameFramework.UI.CloseUIFormCompleteEventArgs.Clear">
            <summary>
            清理关闭界面完成事件。
            </summary>
        </member>
        <member name="T:GameFramework.UI.IUIForm">
            <summary>
            界面接口。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.SerialId">
            <summary>
            获取界面序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.UIFormAssetName">
            <summary>
            获取界面资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.Handle">
            <summary>
            获取界面实例。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.UIGroup">
            <summary>
            获取界面所属的界面组。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.DepthInUIGroup">
            <summary>
            获取界面在界面组中的深度。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIForm.PauseCoveredUIForm">
            <summary>
            获取是否暂停被覆盖的界面。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnInit(System.Int32,System.String,GameFramework.UI.IUIGroup,System.Boolean,System.Boolean,System.Object)">
            <summary>
            初始化界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroup">界面所属的界面组。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="isNewInstance">是否是新实例。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnRecycle">
            <summary>
            界面回收。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnOpen(System.Object)">
            <summary>
            界面打开。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnClose(System.Boolean,System.Object)">
            <summary>
            界面关闭。
            </summary>
            <param name="isShutdown">是否是关闭界面管理器时触发。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnPause">
            <summary>
            界面暂停。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnResume">
            <summary>
            界面暂停恢复。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnCover">
            <summary>
            界面遮挡。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnReveal">
            <summary>
            界面遮挡恢复。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnRefocus(System.Object)">
            <summary>
            界面激活。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnUpdate(System.Single,System.Single)">
            <summary>
            界面轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.UI.IUIForm.OnDepthChanged(System.Int32,System.Int32)">
            <summary>
            界面深度改变。
            </summary>
            <param name="uiGroupDepth">界面组深度。</param>
            <param name="depthInUIGroup">界面在界面组中的深度。</param>
        </member>
        <member name="T:GameFramework.UI.IUIFormHelper">
            <summary>
            界面辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIFormHelper.InstantiateUIForm(System.Object)">
            <summary>
            实例化界面。
            </summary>
            <param name="uiFormAsset">要实例化的界面资源。</param>
            <returns>实例化后的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIFormHelper.CreateUIForm(System.Object,GameFramework.UI.IUIGroup,System.Object)">
            <summary>
            创建界面。
            </summary>
            <param name="uiFormInstance">界面实例。</param>
            <param name="uiGroup">界面所属的界面组。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIFormHelper.ReleaseUIForm(System.Object,System.Object)">
            <summary>
            释放界面。
            </summary>
            <param name="uiFormAsset">要释放的界面资源。</param>
            <param name="uiFormInstance">要释放的界面实例。</param>
        </member>
        <member name="T:GameFramework.UI.IUIGroup">
            <summary>
            界面组接口。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.Name">
            <summary>
            获取界面组名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.Depth">
            <summary>
            获取或设置界面组深度。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.Pause">
            <summary>
            获取或设置界面组是否暂停。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.UIFormCount">
            <summary>
            获取界面组中界面数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.CurrentUIForm">
            <summary>
            获取当前界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIGroup.Helper">
            <summary>
            获取界面组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.HasUIForm(System.Int32)">
            <summary>
            界面组中是否存在界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>界面组中是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.HasUIForm(System.String)">
            <summary>
            界面组中是否存在界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>界面组中是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.GetUIForm(System.Int32)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.GetUIForm(System.String)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.GetUIForms(System.String)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.GetUIForms(System.String,System.Collections.Generic.List{GameFramework.UI.IUIForm})">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="results">要获取的界面。</param>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.GetAllUIForms">
            <summary>
            从界面组中获取所有界面。
            </summary>
            <returns>界面组中的所有界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIGroup.GetAllUIForms(System.Collections.Generic.List{GameFramework.UI.IUIForm})">
            <summary>
            从界面组中获取所有界面。
            </summary>
            <param name="results">界面组中的所有界面。</param>
        </member>
        <member name="T:GameFramework.UI.IUIGroupHelper">
            <summary>
            界面组辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIGroupHelper.SetDepth(System.Int32)">
            <summary>
            设置界面组深度。
            </summary>
            <param name="depth">界面组深度。</param>
        </member>
        <member name="T:GameFramework.UI.IUIManager">
            <summary>
            界面管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIManager.UIGroupCount">
            <summary>
            获取界面组数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIManager.InstanceAutoReleaseInterval">
            <summary>
            获取或设置界面实例对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIManager.InstanceCapacity">
            <summary>
            获取或设置界面实例对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIManager.InstanceExpireTime">
            <summary>
            获取或设置界面实例对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.UI.IUIManager.InstancePriority">
            <summary>
            获取或设置界面实例对象池的优先级。
            </summary>
        </member>
        <member name="E:GameFramework.UI.IUIManager.OpenUIFormSuccess">
            <summary>
            打开界面成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.IUIManager.OpenUIFormFailure">
            <summary>
            打开界面失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.IUIManager.OpenUIFormUpdate">
            <summary>
            打开界面更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.IUIManager.OpenUIFormDependencyAsset">
            <summary>
            打开界面时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.IUIManager.CloseUIFormComplete">
            <summary>
            关闭界面完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.SetUIFormHelper(GameFramework.UI.IUIFormHelper)">
            <summary>
            设置界面辅助器。
            </summary>
            <param name="uiFormHelper">界面辅助器。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.HasUIGroup(System.String)">
            <summary>
            是否存在界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <returns>是否存在界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetUIGroup(System.String)">
            <summary>
            获取界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <returns>要获取的界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetAllUIGroups">
            <summary>
            获取所有界面组。
            </summary>
            <returns>所有界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetAllUIGroups(System.Collections.Generic.List{GameFramework.UI.IUIGroup})">
            <summary>
            获取所有界面组。
            </summary>
            <param name="results">所有界面组。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.AddUIGroup(System.String,GameFramework.UI.IUIGroupHelper)">
            <summary>
            增加界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <param name="uiGroupHelper">界面组辅助器。</param>
            <returns>是否增加界面组成功。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.AddUIGroup(System.String,System.Int32,GameFramework.UI.IUIGroupHelper)">
            <summary>
            增加界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <param name="uiGroupDepth">界面组深度。</param>
            <param name="uiGroupHelper">界面组辅助器。</param>
            <returns>是否增加界面组成功。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.HasUIForm(System.Int32)">
            <summary>
            是否存在界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.HasUIForm(System.String)">
            <summary>
            是否存在界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetUIForm(System.Int32)">
            <summary>
            获取界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetUIForm(System.String)">
            <summary>
            获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetUIForms(System.String)">
            <summary>
            获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetUIForms(System.String,System.Collections.Generic.List{GameFramework.UI.IUIForm})">
            <summary>
            获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="results">要获取的界面。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetAllLoadedUIForms">
            <summary>
            获取所有已加载的界面。
            </summary>
            <returns>所有已加载的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetAllLoadedUIForms(System.Collections.Generic.List{GameFramework.UI.IUIForm})">
            <summary>
            获取所有已加载的界面。
            </summary>
            <param name="results">所有已加载的界面。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetAllLoadingUIFormSerialIds">
            <summary>
            获取所有正在加载界面的序列编号。
            </summary>
            <returns>所有正在加载界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.GetAllLoadingUIFormSerialIds(System.Collections.Generic.List{System.Int32})">
            <summary>
            获取所有正在加载界面的序列编号。
            </summary>
            <param name="results">所有正在加载界面的序列编号。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.IsLoadingUIForm(System.Int32)">
            <summary>
            是否正在加载界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>是否正在加载界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.IsLoadingUIForm(System.String)">
            <summary>
            是否正在加载界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>是否正在加载界面。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.IsValidUIForm(GameFramework.UI.IUIForm)">
            <summary>
            是否是合法的界面。
            </summary>
            <param name="uiForm">界面。</param>
            <returns>界面是否合法。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String,System.Int32)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="priority">加载界面资源的优先级。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String,System.Boolean)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="priority">加载界面资源的优先级。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String,System.Int32,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="priority">加载界面资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.OpenUIForm(System.String,System.String,System.Int32,System.Boolean,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="priority">加载界面资源的优先级。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseUIForm(System.Int32)">
            <summary>
            关闭界面。
            </summary>
            <param name="serialId">要关闭界面的序列编号。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseUIForm(System.Int32,System.Object)">
            <summary>
            关闭界面。
            </summary>
            <param name="serialId">要关闭界面的序列编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseUIForm(GameFramework.UI.IUIForm)">
            <summary>
            关闭界面。
            </summary>
            <param name="uiForm">要关闭的界面。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseUIForm(GameFramework.UI.IUIForm,System.Object)">
            <summary>
            关闭界面。
            </summary>
            <param name="uiForm">要关闭的界面。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseAllLoadedUIForms">
            <summary>
            关闭所有已加载的界面。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseAllLoadedUIForms(System.Object)">
            <summary>
            关闭所有已加载的界面。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.CloseAllLoadingUIForms">
            <summary>
            关闭所有正在加载的界面。
            </summary>
        </member>
        <member name="M:GameFramework.UI.IUIManager.RefocusUIForm(GameFramework.UI.IUIForm)">
            <summary>
            激活界面。
            </summary>
            <param name="uiForm">要激活的界面。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.RefocusUIForm(GameFramework.UI.IUIForm,System.Object)">
            <summary>
            激活界面。
            </summary>
            <param name="uiForm">要激活的界面。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.SetUIFormInstanceLocked(System.Object,System.Boolean)">
            <summary>
            设置界面实例是否被加锁。
            </summary>
            <param name="uiFormInstance">要设置是否被加锁的界面实例。</param>
            <param name="locked">界面实例是否被加锁。</param>
        </member>
        <member name="M:GameFramework.UI.IUIManager.SetUIFormInstancePriority(System.Object,System.Int32)">
            <summary>
            设置界面实例的优先级。
            </summary>
            <param name="uiFormInstance">要设置优先级的界面实例。</param>
            <param name="priority">界面实例优先级。</param>
        </member>
        <member name="T:GameFramework.UI.OpenUIFormDependencyAssetEventArgs">
            <summary>
            打开界面时加载依赖资源事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.#ctor">
            <summary>
            初始化打开界面时加载依赖资源事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.SerialId">
            <summary>
            获取界面序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.UIFormAssetName">
            <summary>
            获取界面资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.UIGroupName">
            <summary>
            获取界面组名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.PauseCoveredUIForm">
            <summary>
            获取是否暂停被覆盖的界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.DependencyAssetName">
            <summary>
            获取被加载的依赖资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.LoadedCount">
            <summary>
            获取当前已加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.TotalCount">
            <summary>
            获取总共加载依赖资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.Create(System.Int32,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            创建打开界面时加载依赖资源事件。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的打开界面时加载依赖资源事件。</returns>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormDependencyAssetEventArgs.Clear">
            <summary>
            清理打开界面时加载依赖资源事件。
            </summary>
        </member>
        <member name="T:GameFramework.UI.OpenUIFormFailureEventArgs">
            <summary>
            打开界面失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormFailureEventArgs.#ctor">
            <summary>
            初始化打开界面失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.SerialId">
            <summary>
            获取界面序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.UIFormAssetName">
            <summary>
            获取界面资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.UIGroupName">
            <summary>
            获取界面组名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.PauseCoveredUIForm">
            <summary>
            获取是否暂停被覆盖的界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormFailureEventArgs.Create(System.Int32,System.String,System.String,System.Boolean,System.String,System.Object)">
            <summary>
            创建打开界面失败事件。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的打开界面失败事件。</returns>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormFailureEventArgs.Clear">
            <summary>
            清理打开界面失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.UI.OpenUIFormSuccessEventArgs">
            <summary>
            打开界面成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormSuccessEventArgs.#ctor">
            <summary>
            初始化打开界面成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormSuccessEventArgs.UIForm">
            <summary>
            获取打开成功的界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormSuccessEventArgs.Duration">
            <summary>
            获取加载持续时间。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormSuccessEventArgs.Create(GameFramework.UI.IUIForm,System.Single,System.Object)">
            <summary>
            创建打开界面成功事件。
            </summary>
            <param name="uiForm">加载成功的界面。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的打开界面成功事件。</returns>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormSuccessEventArgs.Clear">
            <summary>
            清理打开界面成功事件。
            </summary>
        </member>
        <member name="T:GameFramework.UI.OpenUIFormUpdateEventArgs">
            <summary>
            打开界面更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormUpdateEventArgs.#ctor">
            <summary>
            初始化打开界面更新事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.SerialId">
            <summary>
            获取界面序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.UIFormAssetName">
            <summary>
            获取界面资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.UIGroupName">
            <summary>
            获取界面组名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.PauseCoveredUIForm">
            <summary>
            获取是否暂停被覆盖的界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.Progress">
            <summary>
            获取打开界面进度。
            </summary>
        </member>
        <member name="P:GameFramework.UI.OpenUIFormUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormUpdateEventArgs.Create(System.Int32,System.String,System.String,System.Boolean,System.Single,System.Object)">
            <summary>
            创建打开界面更新事件。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="progress">打开界面进度。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的打开界面更新事件。</returns>
        </member>
        <member name="M:GameFramework.UI.OpenUIFormUpdateEventArgs.Clear">
            <summary>
            清理打开界面更新事件。
            </summary>
        </member>
        <member name="T:GameFramework.UI.UIManager">
            <summary>
            界面管理器。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.#ctor">
            <summary>
            初始化界面管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroupCount">
            <summary>
            获取界面组数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.InstanceAutoReleaseInterval">
            <summary>
            获取或设置界面实例对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.InstanceCapacity">
            <summary>
            获取或设置界面实例对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.InstanceExpireTime">
            <summary>
            获取或设置界面实例对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.InstancePriority">
            <summary>
            获取或设置界面实例对象池的优先级。
            </summary>
        </member>
        <member name="E:GameFramework.UI.UIManager.OpenUIFormSuccess">
            <summary>
            打开界面成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.UIManager.OpenUIFormFailure">
            <summary>
            打开界面失败事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.UIManager.OpenUIFormUpdate">
            <summary>
            打开界面更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.UIManager.OpenUIFormDependencyAsset">
            <summary>
            打开界面时加载依赖资源事件。
            </summary>
        </member>
        <member name="E:GameFramework.UI.UIManager.CloseUIFormComplete">
            <summary>
            关闭界面完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.Update(System.Single,System.Single)">
            <summary>
            界面管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.Shutdown">
            <summary>
            关闭并清理界面管理器。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.SetResourceManager(GameFramework.Resource.IResourceManager)">
            <summary>
            设置资源管理器。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.SetUIFormHelper(GameFramework.UI.IUIFormHelper)">
            <summary>
            设置界面辅助器。
            </summary>
            <param name="uiFormHelper">界面辅助器。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.HasUIGroup(System.String)">
            <summary>
            是否存在界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <returns>是否存在界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetUIGroup(System.String)">
            <summary>
            获取界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <returns>要获取的界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetAllUIGroups">
            <summary>
            获取所有界面组。
            </summary>
            <returns>所有界面组。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetAllUIGroups(System.Collections.Generic.List{GameFramework.UI.IUIGroup})">
            <summary>
            获取所有界面组。
            </summary>
            <param name="results">所有界面组。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.AddUIGroup(System.String,GameFramework.UI.IUIGroupHelper)">
            <summary>
            增加界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <param name="uiGroupHelper">界面组辅助器。</param>
            <returns>是否增加界面组成功。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.AddUIGroup(System.String,System.Int32,GameFramework.UI.IUIGroupHelper)">
            <summary>
            增加界面组。
            </summary>
            <param name="uiGroupName">界面组名称。</param>
            <param name="uiGroupDepth">界面组深度。</param>
            <param name="uiGroupHelper">界面组辅助器。</param>
            <returns>是否增加界面组成功。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.HasUIForm(System.Int32)">
            <summary>
            是否存在界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.HasUIForm(System.String)">
            <summary>
            是否存在界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetUIForm(System.Int32)">
            <summary>
            获取界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetUIForm(System.String)">
            <summary>
            获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetUIForms(System.String)">
            <summary>
            获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetUIForms(System.String,System.Collections.Generic.List{GameFramework.UI.IUIForm})">
            <summary>
            获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="results">要获取的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetAllLoadedUIForms">
            <summary>
            获取所有已加载的界面。
            </summary>
            <returns>所有已加载的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetAllLoadedUIForms(System.Collections.Generic.List{GameFramework.UI.IUIForm})">
            <summary>
            获取所有已加载的界面。
            </summary>
            <param name="results">所有已加载的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetAllLoadingUIFormSerialIds">
            <summary>
            获取所有正在加载界面的序列编号。
            </summary>
            <returns>所有正在加载界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.GetAllLoadingUIFormSerialIds(System.Collections.Generic.List{System.Int32})">
            <summary>
            获取所有正在加载界面的序列编号。
            </summary>
            <param name="results">所有正在加载界面的序列编号。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.IsLoadingUIForm(System.Int32)">
            <summary>
            是否正在加载界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>是否正在加载界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.IsLoadingUIForm(System.String)">
            <summary>
            是否正在加载界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>是否正在加载界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.IsValidUIForm(GameFramework.UI.IUIForm)">
            <summary>
            是否是合法的界面。
            </summary>
            <param name="uiForm">界面。</param>
            <returns>界面是否合法。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String,System.Int32)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="priority">加载界面资源的优先级。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String,System.Boolean)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="priority">加载界面资源的优先级。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String,System.Int32,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="priority">加载界面资源的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.OpenUIForm(System.String,System.String,System.Int32,System.Boolean,System.Object)">
            <summary>
            打开界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="uiGroupName">界面组名称。</param>
            <param name="priority">加载界面资源的优先级。</param>
            <param name="pauseCoveredUIForm">是否暂停被覆盖的界面。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>界面的序列编号。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseUIForm(System.Int32)">
            <summary>
            关闭界面。
            </summary>
            <param name="serialId">要关闭界面的序列编号。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseUIForm(System.Int32,System.Object)">
            <summary>
            关闭界面。
            </summary>
            <param name="serialId">要关闭界面的序列编号。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseUIForm(GameFramework.UI.IUIForm)">
            <summary>
            关闭界面。
            </summary>
            <param name="uiForm">要关闭的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseUIForm(GameFramework.UI.IUIForm,System.Object)">
            <summary>
            关闭界面。
            </summary>
            <param name="uiForm">要关闭的界面。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseAllLoadedUIForms">
            <summary>
            关闭所有已加载的界面。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseAllLoadedUIForms(System.Object)">
            <summary>
            关闭所有已加载的界面。
            </summary>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.CloseAllLoadingUIForms">
            <summary>
            关闭所有正在加载的界面。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.RefocusUIForm(GameFramework.UI.IUIForm)">
            <summary>
            激活界面。
            </summary>
            <param name="uiForm">要激活的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.RefocusUIForm(GameFramework.UI.IUIForm,System.Object)">
            <summary>
            激活界面。
            </summary>
            <param name="uiForm">要激活的界面。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.SetUIFormInstanceLocked(System.Object,System.Boolean)">
            <summary>
            设置界面实例是否被加锁。
            </summary>
            <param name="uiFormInstance">要设置是否被加锁的界面实例。</param>
            <param name="locked">界面实例是否被加锁。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.SetUIFormInstancePriority(System.Object,System.Int32)">
            <summary>
            设置界面实例的优先级。
            </summary>
            <param name="uiFormInstance">要设置优先级的界面实例。</param>
            <param name="priority">界面实例优先级。</param>
        </member>
        <member name="T:GameFramework.UI.UIManager.UIFormInstanceObject">
            <summary>
            界面实例对象。
            </summary>
        </member>
        <member name="T:GameFramework.UI.UIManager.UIGroup">
            <summary>
            界面组。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.#ctor(System.String,System.Int32,GameFramework.UI.IUIGroupHelper)">
            <summary>
            初始化界面组的新实例。
            </summary>
            <param name="name">界面组名称。</param>
            <param name="depth">界面组深度。</param>
            <param name="uiGroupHelper">界面组辅助器。</param>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.Name">
            <summary>
            获取界面组名称。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.Depth">
            <summary>
            获取或设置界面组深度。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.Pause">
            <summary>
            获取或设置界面组是否暂停。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.UIFormCount">
            <summary>
            获取界面组中界面数量。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.CurrentUIForm">
            <summary>
            获取当前界面。
            </summary>
        </member>
        <member name="P:GameFramework.UI.UIManager.UIGroup.Helper">
            <summary>
            获取界面组辅助器。
            </summary>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.Update(System.Single,System.Single)">
            <summary>
            界面组轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.HasUIForm(System.Int32)">
            <summary>
            界面组中是否存在界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>界面组中是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.HasUIForm(System.String)">
            <summary>
            界面组中是否存在界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>界面组中是否存在界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.GetUIForm(System.Int32)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="serialId">界面序列编号。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.GetUIForm(System.String)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.GetUIForms(System.String)">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <returns>要获取的界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.GetUIForms(System.String,System.Collections.Generic.List{GameFramework.UI.IUIForm})">
            <summary>
            从界面组中获取界面。
            </summary>
            <param name="uiFormAssetName">界面资源名称。</param>
            <param name="results">要获取的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.GetAllUIForms">
            <summary>
            从界面组中获取所有界面。
            </summary>
            <returns>界面组中的所有界面。</returns>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.GetAllUIForms(System.Collections.Generic.List{GameFramework.UI.IUIForm})">
            <summary>
            从界面组中获取所有界面。
            </summary>
            <param name="results">界面组中的所有界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.AddUIForm(GameFramework.UI.IUIForm)">
            <summary>
            往界面组增加界面。
            </summary>
            <param name="uiForm">要增加的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.RemoveUIForm(GameFramework.UI.IUIForm)">
            <summary>
            从界面组移除界面。
            </summary>
            <param name="uiForm">要移除的界面。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.RefocusUIForm(GameFramework.UI.IUIForm,System.Object)">
            <summary>
            激活界面。
            </summary>
            <param name="uiForm">要激活的界面。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.UI.UIManager.UIGroup.Refresh">
            <summary>
            刷新界面组。
            </summary>
        </member>
        <member name="T:GameFramework.UI.UIManager.UIGroup.UIFormInfo">
            <summary>
            界面组界面信息。
            </summary>
        </member>
        <member name="T:GameFramework.Utility">
            <summary>
            实用函数集。
            </summary>
        </member>
        <member name="T:GameFramework.Utility.Assembly">
            <summary>
            程序集相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Assembly.GetAssemblies">
            <summary>
            获取已加载的程序集。
            </summary>
            <returns>已加载的程序集。</returns>
        </member>
        <member name="M:GameFramework.Utility.Assembly.GetTypes">
            <summary>
            获取已加载的程序集中的所有类型。
            </summary>
            <returns>已加载的程序集中的所有类型。</returns>
        </member>
        <member name="M:GameFramework.Utility.Assembly.GetTypes(System.Collections.Generic.List{System.Type})">
            <summary>
            获取已加载的程序集中的所有类型。
            </summary>
            <param name="results">已加载的程序集中的所有类型。</param>
        </member>
        <member name="M:GameFramework.Utility.Assembly.GetType(System.String)">
            <summary>
            获取已加载的程序集中的指定类型。
            </summary>
            <param name="typeName">要获取的类型名。</param>
            <returns>已加载的程序集中的指定类型。</returns>
        </member>
        <member name="T:GameFramework.Utility.Converter">
            <summary>
            类型转换相关的实用函数。
            </summary>
        </member>
        <member name="P:GameFramework.Utility.Converter.IsLittleEndian">
            <summary>
            获取数据在此计算机结构中存储时的字节顺序。
            </summary>
        </member>
        <member name="P:GameFramework.Utility.Converter.ScreenDpi">
            <summary>
            获取或设置屏幕每英寸点数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetCentimetersFromPixels(System.Single)">
            <summary>
            将像素转换为厘米。
            </summary>
            <param name="pixels">像素。</param>
            <returns>厘米。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetPixelsFromCentimeters(System.Single)">
            <summary>
            将厘米转换为像素。
            </summary>
            <param name="centimeters">厘米。</param>
            <returns>像素。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInchesFromPixels(System.Single)">
            <summary>
            将像素转换为英寸。
            </summary>
            <param name="pixels">像素。</param>
            <returns>英寸。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetPixelsFromInches(System.Single)">
            <summary>
            将英寸转换为像素。
            </summary>
            <param name="inches">英寸。</param>
            <returns>像素。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Boolean)">
            <summary>
            以字节数组的形式获取指定的布尔值。
            </summary>
            <param name="value">要转换的布尔值。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Boolean,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的布尔值。
            </summary>
            <param name="value">要转换的布尔值。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的布尔值。
            </summary>
            <param name="value">要转换的布尔值。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBoolean(System.Byte[])">
            <summary>
            返回由字节数组中首字节转换来的布尔值。
            </summary>
            <param name="value">字节数组。</param>
            <returns>如果 value 中的首字节非零，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBoolean(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的一个字节转换来的布尔值。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>如果 value 中指定位置的字节非零，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Char)">
            <summary>
            以字节数组的形式获取指定的 Unicode 字符值。
            </summary>
            <param name="value">要转换的字符。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Char,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 Unicode 字符值。
            </summary>
            <param name="value">要转换的字符。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 Unicode 字符值。
            </summary>
            <param name="value">要转换的字符。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetChar(System.Byte[])">
            <summary>
            返回由字节数组中前两个字节转换来的 Unicode 字符。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由两个字节构成的字符。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetChar(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的两个字节转换来的 Unicode 字符。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由两个字节构成的字符。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int16)">
            <summary>
            以字节数组的形式获取指定的 16 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int16,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 16 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 16 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt16(System.Byte[])">
            <summary>
            返回由字节数组中前两个字节转换来的 16 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由两个字节构成的 16 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt16(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的两个字节转换来的 16 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由两个字节构成的 16 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt16)">
            <summary>
            以字节数组的形式获取指定的 16 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt16,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 16 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 16 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt16(System.Byte[])">
            <summary>
            返回由字节数组中前两个字节转换来的 16 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由两个字节构成的 16 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt16(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的两个字节转换来的 16 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由两个字节构成的 16 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int32)">
            <summary>
            以字节数组的形式获取指定的 32 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int32,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 32 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 32 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt32(System.Byte[])">
            <summary>
            返回由字节数组中前四个字节转换来的 32 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由四个字节构成的 32 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt32(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的 32 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由四个字节构成的 32 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt32)">
            <summary>
            以字节数组的形式获取指定的 32 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt32,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 32 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 32 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt32(System.Byte[])">
            <summary>
            返回由字节数组中前四个字节转换来的 32 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由四个字节构成的 32 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt32(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的 32 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由四个字节构成的 32 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int64)">
            <summary>
            以字节数组的形式获取指定的 64 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int64,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 64 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 64 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt64(System.Byte[])">
            <summary>
            返回由字节数组中前八个字节转换来的 64 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由八个字节构成的 64 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt64(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的八个字节转换来的 64 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由八个字节构成的 64 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt64)">
            <summary>
            以字节数组的形式获取指定的 64 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt64,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 64 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 64 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt64(System.Byte[])">
            <summary>
            返回由字节数组中前八个字节转换来的 64 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由八个字节构成的 64 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt64(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的八个字节转换来的 64 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由八个字节构成的 64 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Single)">
            <summary>
            以字节数组的形式获取指定的单精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Single,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的单精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的单精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetSingle(System.Byte[])">
            <summary>
            返回由字节数组中前四个字节转换来的单精度浮点数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由四个字节构成的单精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetSingle(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的单精度浮点数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由四个字节构成的单精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Double)">
            <summary>
            以字节数组的形式获取指定的双精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Double,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的双精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的双精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetDouble(System.Byte[])">
            <summary>
            返回由字节数组中前八个字节转换来的双精度浮点数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由八个字节构成的双精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetDouble(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的八个字节转换来的双精度浮点数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由八个字节构成的双精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.String)">
            <summary>
            以字节数组的形式获取指定的 UTF-8 字符串。
            </summary>
            <param name="value">要转换的字符串。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetString(System.Byte[])">
            <summary>
            返回由字节数组转换来的 UTF-8 字符串。
            </summary>
            <param name="value">字节数组。</param>
            <returns>UTF-8 字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            返回由字节数组转换来的 UTF-8 字符串。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <param name="length">长度。</param>
            <returns>UTF-8 字符串。</returns>
        </member>
        <member name="T:GameFramework.Utility.Encryption">
            <summary>
            加密解密相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetQuickXorBytes(System.Byte[],System.Byte[])">
            <summary>
            将 bytes 使用 code 做异或运算的快速版本。
            </summary>
            <param name="bytes">原始二进制流。</param>
            <param name="code">异或二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetQuickSelfXorBytes(System.Byte[],System.Byte[])">
            <summary>
            将 bytes 使用 code 做异或运算的快速版本。此方法将复用并改写传入的 bytes 作为返回值，而不额外分配内存空间。
            </summary>
            <param name="bytes">原始及异或后的二进制流。</param>
            <param name="code">异或二进制流。</param>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetXorBytes(System.Byte[],System.Byte[])">
            <summary>
            将 bytes 使用 code 做异或运算。
            </summary>
            <param name="bytes">原始二进制流。</param>
            <param name="code">异或二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetSelfXorBytes(System.Byte[],System.Byte[])">
            <summary>
            将 bytes 使用 code 做异或运算。此方法将复用并改写传入的 bytes 作为返回值，而不额外分配内存空间。
            </summary>
            <param name="bytes">原始及异或后的二进制流。</param>
            <param name="code">异或二进制流。</param>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetXorBytes(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            将 bytes 使用 code 做异或运算。
            </summary>
            <param name="bytes">原始二进制流。</param>
            <param name="code">异或二进制流。</param>
            <param name="length">异或计算长度，若小于 0，则计算整个二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetSelfXorBytes(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            将 bytes 使用 code 做异或运算。此方法将复用并改写传入的 bytes 作为返回值，而不额外分配内存空间。
            </summary>
            <param name="bytes">原始及异或后的二进制流。</param>
            <param name="code">异或二进制流。</param>
            <param name="length">异或计算长度，若小于 0，则计算整个二进制流。</param>
        </member>
        <member name="T:GameFramework.Utility.Json">
            <summary>
            JSON 相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Json.SetJsonHelper(GameFramework.Utility.Json.IJsonHelper)">
            <summary>
            设置 JSON 辅助器。
            </summary>
            <param name="jsonHelper">要设置的 JSON 辅助器。</param>
        </member>
        <member name="M:GameFramework.Utility.Json.ToJson(System.Object)">
            <summary>
            将对象序列化为 JSON 字符串。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的 JSON 字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToJsonData(System.Object)">
            <summary>
            将对象序列化为 JSON 流。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的 JSON 流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToObject``1(System.String)">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToObject(System.Type,System.String)">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToObject``1(System.Byte[])">
            <summary>
            将 JSON 流反序列化为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="jsonData">要反序列化的 JSON 流。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToObject(System.Type,System.Byte[])">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="jsonData">要反序列化的 JSON 流。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:GameFramework.Utility.Json.IJsonHelper">
            <summary>
            JSON 辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Json.IJsonHelper.ToJson(System.Object)">
            <summary>
            将对象序列化为 JSON 字符串。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的 JSON 字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.IJsonHelper.ToObject``1(System.String)">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.IJsonHelper.ToObject(System.Type,System.String)">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:GameFramework.Utility.Nullable">
            <summary>
            可空类型相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Nullable.IsNullable``1(``0)">
            <summary>
            获取对象是否是可空类型。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="t">对象。</param>
            <returns>对象是否是可空类型。</returns>
        </member>
        <member name="M:GameFramework.Utility.Nullable.IsNullable``1(System.Nullable{``0})">
            <summary>
            获取对象是否是可空类型。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="t">对象。</param>
            <returns>对象是否是可空类型。</returns>
        </member>
        <member name="T:GameFramework.Utility.Path">
            <summary>
            路径相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Path.GetRegularPath(System.String)">
            <summary>
            获取规范的路径。
            </summary>
            <param name="path">要规范的路径。</param>
            <returns>规范的路径。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.GetRemotePath(System.String)">
            <summary>
            获取远程格式的路径（带有file:// 或 http:// 前缀）。
            </summary>
            <param name="path">原始路径。</param>
            <returns>远程格式路径。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.RemoveEmptyDirectory(System.String)">
            <summary>
            移除空文件夹。
            </summary>
            <param name="directoryName">要处理的文件夹名称。</param>
            <returns>是否移除空文件夹成功。</returns>
        </member>
        <member name="T:GameFramework.Utility.Random">
            <summary>
            随机相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Random.SetSeed(System.Int32)">
            <summary>
            设置随机数种子。
            </summary>
            <param name="seed">随机数种子。</param>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandom">
            <summary>
            返回非负随机数。
            </summary>
            <returns>大于等于零且小于 System.Int32.MaxValue 的 32 位带符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandom(System.Int32)">
            <summary>
            返回一个小于所指定最大值的非负随机数。
            </summary>
            <param name="maxValue">要生成的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于零。</param>
            <returns>大于等于零且小于 maxValue 的 32 位带符号整数，即：返回值的范围通常包括零但不包括 maxValue。不过，如果 maxValue 等于零，则返回 maxValue。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandom(System.Int32,System.Int32)">
            <summary>
            返回一个指定范围内的随机数。
            </summary>
            <param name="minValue">返回的随机数的下界（随机数可取该下界值）。</param>
            <param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于 minValue。</param>
            <returns>一个大于等于 minValue 且小于 maxValue 的 32 位带符号整数，即：返回的值范围包括 minValue 但不包括 maxValue。如果 minValue 等于 maxValue，则返回 minValue。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandomDouble">
            <summary>
            返回一个介于 0.0 和 1.0 之间的随机数。
            </summary>
            <returns>大于等于 0.0 并且小于 1.0 的双精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandomBytes(System.Byte[])">
            <summary>
            用随机数填充指定字节数组的元素。
            </summary>
            <param name="buffer">包含随机数的字节数组。</param>
        </member>
        <member name="T:GameFramework.Utility.Text">
            <summary>
            字符相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Text.Format(System.String,System.Object)">
            <summary>
            获取格式化字符串。
            </summary>
            <param name="format">字符串格式。</param>
            <param name="arg0">字符串参数 0。</param>
            <returns>格式化后的字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.Format(System.String,System.Object,System.Object)">
            <summary>
            获取格式化字符串。
            </summary>
            <param name="format">字符串格式。</param>
            <param name="arg0">字符串参数 0。</param>
            <param name="arg1">字符串参数 1。</param>
            <returns>格式化后的字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
            获取格式化字符串。
            </summary>
            <param name="format">字符串格式。</param>
            <param name="arg0">字符串参数 0。</param>
            <param name="arg1">字符串参数 1。</param>
            <param name="arg2">字符串参数 2。</param>
            <returns>格式化后的字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.Format(System.String,System.Object[])">
            <summary>
            获取格式化字符串。
            </summary>
            <param name="format">字符串格式。</param>
            <param name="args">字符串参数。</param>
            <returns>格式化后的字符串。</returns>
        </member>
        <member name="T:GameFramework.Utility.Verifier">
            <summary>
            校验相关的实用函数。
            </summary>
        </member>
        <member name="T:GameFramework.Utility.Verifier.Crc32">
            <summary>
            CRC32 算法。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32(System.Byte[])">
            <summary>
            计算二进制流的 CRC32。
            </summary>
            <param name="bytes">指定的二进制流。</param>
            <returns>计算后的 CRC32。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算二进制流的 CRC32。
            </summary>
            <param name="bytes">指定的二进制流。</param>
            <param name="offset">二进制流的偏移。</param>
            <param name="length">二进制流的长度。</param>
            <returns>计算后的 CRC32。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32(System.IO.Stream)">
            <summary>
            计算二进制流的 CRC32。
            </summary>
            <param name="stream">指定的二进制流。</param>
            <returns>计算后的 CRC32。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32Bytes(System.Int32)">
            <summary>
            获取 CRC32 数值的二进制数组。
            </summary>
            <param name="crc32">CRC32 数值。</param>
            <returns>CRC32 数值的二进制数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32Bytes(System.Int32,System.Byte[])">
            <summary>
            获取 CRC32 数值的二进制数组。
            </summary>
            <param name="crc32">CRC32 数值。</param>
            <param name="bytes">要存放结果的数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32Bytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            获取 CRC32 数值的二进制数组。
            </summary>
            <param name="crc32">CRC32 数值。</param>
            <param name="bytes">要存放结果的数组。</param>
            <param name="offset">CRC32 数值的二进制数组在结果数组内的起始位置。</param>
        </member>
        <member name="T:GameFramework.Utility.Zip">
            <summary>
            压缩解压缩相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Zip.SetZipHelper(GameFramework.Utility.Zip.IZipHelper)">
            <summary>
            设置压缩解压缩辅助器。
            </summary>
            <param name="zipHelper">要设置的压缩解压缩辅助器。</param>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.Byte[])">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据的二进制流。</param>
            <returns>压缩后的数据的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.Byte[],System.IO.Stream)">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据的二进制流。</param>
            <param name="compressedStream">压缩后的数据的二进制流。</param>
            <returns>是否压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据的二进制流。</param>
            <param name="offset">要压缩的数据的二进制流的偏移。</param>
            <param name="length">要压缩的数据的二进制流的长度。</param>
            <returns>压缩后的数据的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据的二进制流。</param>
            <param name="offset">要压缩的数据的二进制流的偏移。</param>
            <param name="length">要压缩的数据的二进制流的长度。</param>
            <param name="compressedStream">压缩后的数据的二进制流。</param>
            <returns>是否压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.IO.Stream)">
            <summary>
            压缩数据。
            </summary>
            <param name="stream">要压缩的数据的二进制流。</param>
            <returns>压缩后的数据的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>
            压缩数据。
            </summary>
            <param name="stream">要压缩的数据的二进制流。</param>
            <param name="compressedStream">压缩后的数据的二进制流。</param>
            <returns>是否压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.Byte[])">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据的二进制流。</param>
            <returns>解压缩后的数据的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.Byte[],System.IO.Stream)">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据的二进制流。</param>
            <param name="decompressedStream">解压缩后的数据的二进制流。</param>
            <returns>是否解压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据的二进制流。</param>
            <param name="offset">要解压缩的数据的二进制流的偏移。</param>
            <param name="length">要解压缩的数据的二进制流的长度。</param>
            <returns>解压缩后的数据的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据的二进制流。</param>
            <param name="offset">要解压缩的数据的二进制流的偏移。</param>
            <param name="length">要解压缩的数据的二进制流的长度。</param>
            <param name="decompressedStream">解压缩后的数据的二进制流。</param>
            <returns>是否解压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.IO.Stream)">
            <summary>
            解压缩数据。
            </summary>
            <param name="stream">要解压缩的数据的二进制流。</param>
            <returns>是否解压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            解压缩数据。
            </summary>
            <param name="stream">要解压缩的数据的二进制流。</param>
            <param name="decompressedStream">解压缩后的数据的二进制流。</param>
            <returns>是否解压缩数据成功。</returns>
        </member>
        <member name="T:GameFramework.Utility.Zip.IZipHelper">
            <summary>
            压缩解压缩辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Zip.IZipHelper.Compress(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据的二进制流。</param>
            <param name="offset">要压缩的数据的二进制流的偏移。</param>
            <param name="length">要压缩的数据的二进制流的长度。</param>
            <param name="compressedStream">压缩后的数据的二进制流。</param>
            <returns>是否压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.IZipHelper.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>
            压缩数据。
            </summary>
            <param name="stream">要压缩的数据的二进制流。</param>
            <param name="compressedStream">压缩后的数据的二进制流。</param>
            <returns>是否压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.IZipHelper.Decompress(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据的二进制流。</param>
            <param name="offset">要解压缩的数据的二进制流的偏移。</param>
            <param name="length">要解压缩的数据的二进制流的长度。</param>
            <param name="decompressedStream">解压缩后的数据的二进制流。</param>
            <returns>是否解压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.IZipHelper.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            解压缩数据。
            </summary>
            <param name="stream">要解压缩的数据的二进制流。</param>
            <param name="decompressedStream">解压缩后的数据的二进制流。</param>
            <returns>是否解压缩数据成功。</returns>
        </member>
        <member name="T:GameFramework.WebRequest.Constant">
            <summary>
            Web 请求相关常量。
            </summary>
        </member>
        <member name="F:GameFramework.WebRequest.Constant.DefaultPriority">
            <summary>
            默认 Web 请求任务优先级。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.IWebRequestAgentHelper">
            <summary>
            Web 请求代理辅助器接口。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.IWebRequestAgentHelper.WebRequestAgentHelperComplete">
            <summary>
            Web 请求代理辅助器完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.IWebRequestAgentHelper.WebRequestAgentHelperError">
            <summary>
            Web 请求代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestAgentHelper.Request(System.String,System.Object)">
            <summary>
            通过 Web 请求代理辅助器发送 Web 请求。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestAgentHelper.Request(System.String,System.Byte[],System.Object)">
            <summary>
            通过 Web 请求代理辅助器发送 Web 请求。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestAgentHelper.Reset">
            <summary>
            重置 Web 请求代理辅助器。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.IWebRequestManager">
            <summary>
            Web 请求管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.IWebRequestManager.TotalAgentCount">
            <summary>
            获取 Web 请求代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.IWebRequestManager.FreeAgentCount">
            <summary>
            获取可用 Web 请求代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.IWebRequestManager.WorkingAgentCount">
            <summary>
            获取工作中 Web 请求代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.IWebRequestManager.WaitingTaskCount">
            <summary>
            获取等待 Web 请求数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.IWebRequestManager.Timeout">
            <summary>
            获取或设置 Web 请求超时时长，以秒为单位。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.IWebRequestManager.WebRequestStart">
            <summary>
            Web 请求开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.IWebRequestManager.WebRequestSuccess">
            <summary>
            Web 请求成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.IWebRequestManager.WebRequestFailure">
            <summary>
            Web 请求失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequestAgentHelper(GameFramework.WebRequest.IWebRequestAgentHelper)">
            <summary>
            增加 Web 请求代理辅助器。
            </summary>
            <param name="webRequestAgentHelper">要增加的 Web 请求代理辅助器。</param>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String,System.Byte[])">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String,System.Int32)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="priority">Web 请求任务的优先级。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String,System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String,System.Byte[],System.Int32)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="priority">Web 请求任务的优先级。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String,System.Byte[],System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String,System.Int32,System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="priority">Web 请求任务的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.AddWebRequest(System.String,System.Byte[],System.Int32,System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="priority">Web 请求任务的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.RemoveWebRequest(System.Int32)">
            <summary>
            移除 Web 请求任务。
            </summary>
            <param name="serialId">要移除 Web 请求任务的序列编号。</param>
            <returns>是否移除 Web 请求任务成功。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.RemoveAllWebRequests">
            <summary>
            移除所有 Web 请求任务。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.IWebRequestManager.GetAllWebRequestInfos">
            <summary>
            获取所有 Web 请求任务的信息。
            </summary>
            <returns>所有 Web 请求任务的信息。</returns>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestAgentHelperCompleteEventArgs">
            <summary>
            Web 请求代理辅助器完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestAgentHelperCompleteEventArgs.#ctor">
            <summary>
            初始化 Web 请求代理辅助器完成事件的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestAgentHelperCompleteEventArgs.Create(System.Byte[])">
            <summary>
            创建 Web 请求代理辅助器完成事件。
            </summary>
            <param name="webResponseBytes">Web 响应的数据流。</param>
            <returns>创建的 Web 请求代理辅助器完成事件。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestAgentHelperCompleteEventArgs.Clear">
            <summary>
            清理 Web 请求代理辅助器完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestAgentHelperCompleteEventArgs.GetWebResponseBytes">
            <summary>
            获取 Web 响应的数据流。
            </summary>
            <returns>Web 响应的数据流。</returns>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestAgentHelperErrorEventArgs">
            <summary>
            Web 请求代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestAgentHelperErrorEventArgs.#ctor">
            <summary>
            初始化 Web 请求代理辅助器错误事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestAgentHelperErrorEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestAgentHelperErrorEventArgs.Create(System.String)">
            <summary>
            创建 Web 请求代理辅助器错误事件。
            </summary>
            <param name="errorMessage">错误信息。</param>
            <returns>创建的 Web 请求代理辅助器错误事件。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestAgentHelperErrorEventArgs.Clear">
            <summary>
            清理 Web 请求代理辅助器错误事件。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestFailureEventArgs">
            <summary>
            Web 请求失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestFailureEventArgs.#ctor">
            <summary>
            初始化 Web 请求失败事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestFailureEventArgs.SerialId">
            <summary>
            获取 Web 请求任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestFailureEventArgs.WebRequestUri">
            <summary>
            获取 Web 请求地址。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestFailureEventArgs.Create(System.Int32,System.String,System.String,System.Object)">
            <summary>
            创建 Web 请求失败事件。
            </summary>
            <param name="serialId">Web 请求任务的序列编号。</param>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的 Web 请求失败事件。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestFailureEventArgs.Clear">
            <summary>
            清理 Web 请求失败事件。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestManager">
            <summary>
            Web 请求管理器。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.#ctor">
            <summary>
            初始化 Web 请求管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.TotalAgentCount">
            <summary>
            获取 Web 请求代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.FreeAgentCount">
            <summary>
            获取可用 Web 请求代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WorkingAgentCount">
            <summary>
            获取工作中 Web 请求代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WaitingTaskCount">
            <summary>
            获取等待 Web 请求数量。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.Timeout">
            <summary>
            获取或设置 Web 请求超时时长，以秒为单位。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.WebRequestManager.WebRequestStart">
            <summary>
            Web 请求开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.WebRequestManager.WebRequestSuccess">
            <summary>
            Web 请求成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.WebRequest.WebRequestManager.WebRequestFailure">
            <summary>
            Web 请求失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.Update(System.Single,System.Single)">
            <summary>
            Web 请求管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.Shutdown">
            <summary>
            关闭并清理 Web 请求管理器。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequestAgentHelper(GameFramework.WebRequest.IWebRequestAgentHelper)">
            <summary>
            增加 Web 请求代理辅助器。
            </summary>
            <param name="webRequestAgentHelper">要增加的 Web 请求代理辅助器。</param>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String,System.Byte[])">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String,System.Int32)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="priority">Web 请求任务的优先级。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String,System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String,System.Byte[],System.Int32)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="priority">Web 请求任务的优先级。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String,System.Byte[],System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String,System.Int32,System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="priority">Web 请求任务的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.AddWebRequest(System.String,System.Byte[],System.Int32,System.Object)">
            <summary>
            增加 Web 请求任务。
            </summary>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="priority">Web 请求任务的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增 Web 请求任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.RemoveWebRequest(System.Int32)">
            <summary>
            移除 Web 请求任务。
            </summary>
            <param name="serialId">要移除 Web 请求任务的序列编号。</param>
            <returns>是否移除 Web 请求任务成功。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.RemoveAllWebRequests">
            <summary>
            移除所有 Web 请求任务。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.GetAllWebRequestInfos">
            <summary>
            获取所有 Web 请求任务的信息。
            </summary>
            <returns>所有 Web 请求任务的信息。</returns>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestManager.WebRequestAgent">
            <summary>
            Web 请求代理。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.#ctor(GameFramework.WebRequest.IWebRequestAgentHelper)">
            <summary>
            初始化 Web 请求代理的新实例。
            </summary>
            <param name="webRequestAgentHelper">Web 请求代理辅助器。</param>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Task">
            <summary>
            获取 Web 请求任务。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.WaitTime">
            <summary>
            获取已经等待时间。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Initialize">
            <summary>
            初始化 Web 请求代理。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Update(System.Single,System.Single)">
            <summary>
            Web 请求代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Shutdown">
            <summary>
            关闭并清理 Web 请求代理。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Start(GameFramework.WebRequest.WebRequestManager.WebRequestTask)">
            <summary>
            开始处理 Web 请求任务。
            </summary>
            <param name="task">要处理的 Web 请求任务。</param>
            <returns>开始处理任务的状态。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestAgent.Reset">
            <summary>
            重置 Web 请求代理。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestManager.WebRequestTask">
            <summary>
            Web 请求任务。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.Status">
            <summary>
            获取或设置 Web 请求任务的状态。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.WebRequestUri">
            <summary>
            获取要发送的远程地址。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.Timeout">
            <summary>
            获取 Web 请求超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestManager.WebRequestTask.Description">
            <summary>
            获取 Web 请求任务的描述。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestTask.Create(System.String,System.Byte[],System.Int32,System.Single,System.Object)">
            <summary>
            创建 Web 请求任务。
            </summary>
            <param name="webRequestUri">要发送的远程地址。</param>
            <param name="postData">要发送的数据流。</param>
            <param name="priority">Web 请求任务的优先级。</param>
            <param name="timeout">下载超时时长，以秒为单位。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的 Web 请求任务。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestTask.Clear">
            <summary>
            清理 Web 请求任务。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestManager.WebRequestTask.GetPostData">
            <summary>
            获取要发送的数据流。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestManager.WebRequestTaskStatus">
            <summary>
            Web 请求任务的状态。
            </summary>
        </member>
        <member name="F:GameFramework.WebRequest.WebRequestManager.WebRequestTaskStatus.Todo">
            <summary>
            准备请求。
            </summary>
        </member>
        <member name="F:GameFramework.WebRequest.WebRequestManager.WebRequestTaskStatus.Doing">
            <summary>
            请求中。
            </summary>
        </member>
        <member name="F:GameFramework.WebRequest.WebRequestManager.WebRequestTaskStatus.Done">
            <summary>
            请求完成。
            </summary>
        </member>
        <member name="F:GameFramework.WebRequest.WebRequestManager.WebRequestTaskStatus.Error">
            <summary>
            请求错误。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestStartEventArgs">
            <summary>
            Web 请求开始事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestStartEventArgs.#ctor">
            <summary>
            初始化 Web 请求开始事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestStartEventArgs.SerialId">
            <summary>
            获取 Web 请求任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestStartEventArgs.WebRequestUri">
            <summary>
            获取 Web 请求地址。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestStartEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestStartEventArgs.Create(System.Int32,System.String,System.Object)">
            <summary>
            创建 Web 请求开始事件。
            </summary>
            <param name="serialId">Web 请求任务的序列编号。</param>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的 Web 请求开始事件。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestStartEventArgs.Clear">
            <summary>
            清理 Web 请求开始事件。
            </summary>
        </member>
        <member name="T:GameFramework.WebRequest.WebRequestSuccessEventArgs">
            <summary>
            Web 请求成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestSuccessEventArgs.#ctor">
            <summary>
            初始化 Web 请求成功事件的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestSuccessEventArgs.SerialId">
            <summary>
            获取 Web 请求任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestSuccessEventArgs.WebRequestUri">
            <summary>
            获取 Web 请求地址。
            </summary>
        </member>
        <member name="P:GameFramework.WebRequest.WebRequestSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestSuccessEventArgs.Create(System.Int32,System.String,System.Byte[],System.Object)">
            <summary>
            创建 Web 请求成功事件。
            </summary>
            <param name="serialId">Web 请求任务的序列编号。</param>
            <param name="webRequestUri">Web 请求地址。</param>
            <param name="webResponseBytes">Web 响应的数据流。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>创建的 Web 请求成功事件。</returns>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestSuccessEventArgs.Clear">
            <summary>
            清理 Web 请求成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.WebRequest.WebRequestSuccessEventArgs.GetWebResponseBytes">
            <summary>
            获取 Web 响应的数据流。
            </summary>
            <returns>Web 响应的数据流。</returns>
        </member>
    </members>
</doc>
